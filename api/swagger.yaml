---
swagger: "2.0"
info:
  description: "Description of all APIs"
  version: "version not set"
  title: "Consolidate Services"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /api/v1/account:
    get:
      tags:
      - "AccountService"
      summary: "ListAccounts returns the list of accounts"
      operationId: "AccountService_ListAccounts"
      parameters: []
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/accountAccountsList"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/account/can-i/{resource}/{action}/{subresource}:
    get:
      tags:
      - "AccountService"
      summary: "CanI checks if the current account has permission to perform an action"
      operationId: "AccountService_CanI"
      parameters:
      - name: "resource"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Resource"
      - name: "action"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Action"
      - name: "subresource"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Subresource"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/accountCanIResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/account/password:
    put:
      tags:
      - "AccountService"
      summary: "UpdatePassword updates an account's password to a new value"
      operationId: "AccountService_UpdatePassword"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/accountUpdatePasswordRequest"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/accountUpdatePasswordResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/account/{name}:
    get:
      tags:
      - "AccountService"
      summary: "GetAccount returns an account"
      operationId: "AccountService_GetAccount"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/accountAccount"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/account/{name}/token:
    post:
      tags:
      - "AccountService"
      summary: "CreateToken creates a token"
      operationId: "AccountService_CreateToken"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/accountCreateTokenRequest"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/accountCreateTokenResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/account/{name}/token/{id}:
    delete:
      tags:
      - "AccountService"
      summary: "DeleteToken deletes a token"
      operationId: "AccountService_DeleteToken"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/accountEmptyResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/applications:
    get:
      tags:
      - "ApplicationService"
      summary: "List returns list of applications"
      operationId: "ApplicationService_List"
      parameters:
      - name: "name"
        in: "query"
        description: "the application's name."
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "refresh"
        in: "query"
        description: "forces application reconciliation if set to true."
        required: false
        type: "string"
        x-exportParamName: "Refresh"
        x-optionalDataType: "String"
      - name: "project"
        in: "query"
        description: "the project names to restrict returned list applications."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
        x-exportParamName: "Project"
      - name: "resourceVersion"
        in: "query"
        description: "when specified with a watch call, shows changes that occur after\
          \ that particular version of a resource."
        required: false
        type: "string"
        x-exportParamName: "ResourceVersion"
        x-optionalDataType: "String"
      - name: "selector"
        in: "query"
        description: "the selector to to restrict returned list to applications only\
          \ with matched labels."
        required: false
        type: "string"
        x-exportParamName: "Selector"
        x-optionalDataType: "String"
      - name: "repo"
        in: "query"
        description: "the repoURL to restrict returned list applications."
        required: false
        type: "string"
        x-exportParamName: "Repo"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/v1alpha1ApplicationList"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
    post:
      tags:
      - "ApplicationService"
      summary: "Create creates an application"
      operationId: "ApplicationService_Create"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/v1alpha1Application"
        x-exportParamName: "Body"
      - name: "upsert"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "Upsert"
        x-optionalDataType: "Bool"
      - name: "validate"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "Validate"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/v1alpha1Application"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/applications/{application.metadata.name}:
    put:
      tags:
      - "ApplicationService"
      summary: "Update updates an application"
      operationId: "ApplicationService_Update"
      parameters:
      - name: "application.metadata.name"
        in: "path"
        description: "Name must be unique within a namespace. Is required when creating\
          \ resources, although\nsome resources may allow a client to request the\
          \ generation of an appropriate name\nautomatically. Name is primarily intended\
          \ for creation idempotence and configuration\ndefinition.\nCannot be updated.\n\
          More info: http://kubernetes.io/docs/user-guide/identifiers#names\n+optional"
        required: true
        type: "string"
        x-exportParamName: "ApplicationMetadataName"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/v1alpha1Application"
        x-exportParamName: "Body"
      - name: "validate"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "Validate"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/v1alpha1Application"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/applications/{applicationName}/managed-resources:
    get:
      tags:
      - "ApplicationService"
      summary: "ManagedResources returns list of managed resources"
      operationId: "ApplicationService_ManagedResources"
      parameters:
      - name: "applicationName"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ApplicationName"
      - name: "namespace"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Namespace"
        x-optionalDataType: "String"
      - name: "name"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Version"
        x-optionalDataType: "String"
      - name: "group"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Group"
        x-optionalDataType: "String"
      - name: "kind"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Kind"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/applicationManagedResourcesResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/applications/{applicationName}/resource-tree:
    get:
      tags:
      - "ApplicationService"
      summary: "ResourceTree returns resource tree"
      operationId: "ApplicationService_ResourceTree"
      parameters:
      - name: "applicationName"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ApplicationName"
      - name: "namespace"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Namespace"
        x-optionalDataType: "String"
      - name: "name"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Version"
        x-optionalDataType: "String"
      - name: "group"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Group"
        x-optionalDataType: "String"
      - name: "kind"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Kind"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/v1alpha1ApplicationTree"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/applications/{name}:
    get:
      tags:
      - "ApplicationService"
      summary: "Get returns an application by name"
      operationId: "ApplicationService_Get"
      parameters:
      - name: "name"
        in: "path"
        description: "the application's name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "refresh"
        in: "query"
        description: "forces application reconciliation if set to true."
        required: false
        type: "string"
        x-exportParamName: "Refresh"
        x-optionalDataType: "String"
      - name: "project"
        in: "query"
        description: "the project names to restrict returned list applications."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
        x-exportParamName: "Project"
      - name: "resourceVersion"
        in: "query"
        description: "when specified with a watch call, shows changes that occur after\
          \ that particular version of a resource."
        required: false
        type: "string"
        x-exportParamName: "ResourceVersion"
        x-optionalDataType: "String"
      - name: "selector"
        in: "query"
        description: "the selector to to restrict returned list to applications only\
          \ with matched labels."
        required: false
        type: "string"
        x-exportParamName: "Selector"
        x-optionalDataType: "String"
      - name: "repo"
        in: "query"
        description: "the repoURL to restrict returned list applications."
        required: false
        type: "string"
        x-exportParamName: "Repo"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/v1alpha1Application"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
    delete:
      tags:
      - "ApplicationService"
      summary: "Delete deletes an application"
      operationId: "ApplicationService_Delete"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "cascade"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "Cascade"
        x-optionalDataType: "Bool"
      - name: "propagationPolicy"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "PropagationPolicy"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/applicationApplicationResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
    patch:
      tags:
      - "ApplicationService"
      summary: "Patch patch an application"
      operationId: "ApplicationService_Patch"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/applicationApplicationPatchRequest"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/v1alpha1Application"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/applications/{name}/events:
    get:
      tags:
      - "ApplicationService"
      summary: "ListResourceEvents returns a list of event resources"
      operationId: "ApplicationService_ListResourceEvents"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "resourceNamespace"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "ResourceNamespace"
        x-optionalDataType: "String"
      - name: "resourceName"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "ResourceName"
        x-optionalDataType: "String"
      - name: "resourceUID"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "ResourceUID"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/v1EventList"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/applications/{name}/logs:
    get:
      tags:
      - "ApplicationService"
      summary: "PodLogs returns stream of log entries for the specified pod. Pod"
      operationId: "ApplicationService_PodLogs2"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "namespace"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Namespace"
        x-optionalDataType: "String"
      - name: "podName"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "PodName"
        x-optionalDataType: "String"
      - name: "container"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Container"
        x-optionalDataType: "String"
      - name: "sinceSeconds"
        in: "query"
        required: false
        type: "string"
        format: "int64"
        x-exportParamName: "SinceSeconds"
        x-optionalDataType: "String"
      - name: "sinceTime.seconds"
        in: "query"
        description: "Represents seconds of UTC time since Unix epoch\n1970-01-01T00:00:00Z.\
          \ Must be from 0001-01-01T00:00:00Z to\n9999-12-31T23:59:59Z inclusive."
        required: false
        type: "string"
        format: "int64"
        x-exportParamName: "SinceTimeSeconds"
        x-optionalDataType: "String"
      - name: "sinceTime.nanos"
        in: "query"
        description: "Non-negative fractions of a second at nanosecond resolution.\
          \ Negative\nsecond values with fractions must still have non-negative nanos\
          \ values\nthat count forward in time. Must be from 0 to 999,999,999\ninclusive.\
          \ This field may be limited in precision depending on context."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "SinceTimeNanos"
        x-optionalDataType: "Int32"
      - name: "tailLines"
        in: "query"
        required: false
        type: "string"
        format: "int64"
        x-exportParamName: "TailLines"
        x-optionalDataType: "String"
      - name: "follow"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "Follow"
        x-optionalDataType: "Bool"
      - name: "untilTime"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "UntilTime"
        x-optionalDataType: "String"
      - name: "filter"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      - name: "kind"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Kind"
        x-optionalDataType: "String"
      - name: "group"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Group"
        x-optionalDataType: "String"
      - name: "resourceName"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "ResourceName"
        x-optionalDataType: "String"
      - name: "previous"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "Previous"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "A successful response.(streaming responses)"
          schema:
            $ref: "#/definitions/Stream result of applicationLogEntry"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/applications/{name}/manifests:
    get:
      tags:
      - "ApplicationService"
      summary: "GetManifests returns application manifests"
      operationId: "ApplicationService_GetManifests"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "revision"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Revision"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/repositoryManifestResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/applications/{name}/operation:
    delete:
      tags:
      - "ApplicationService"
      summary: "TerminateOperation terminates the currently running operation"
      operationId: "ApplicationService_TerminateOperation"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/applicationOperationTerminateResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/applications/{name}/pods/{podName}/logs:
    get:
      tags:
      - "ApplicationService"
      summary: "PodLogs returns stream of log entries for the specified pod. Pod"
      operationId: "ApplicationService_PodLogs"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "podName"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "PodName"
      - name: "namespace"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Namespace"
        x-optionalDataType: "String"
      - name: "container"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Container"
        x-optionalDataType: "String"
      - name: "sinceSeconds"
        in: "query"
        required: false
        type: "string"
        format: "int64"
        x-exportParamName: "SinceSeconds"
        x-optionalDataType: "String"
      - name: "sinceTime.seconds"
        in: "query"
        description: "Represents seconds of UTC time since Unix epoch\n1970-01-01T00:00:00Z.\
          \ Must be from 0001-01-01T00:00:00Z to\n9999-12-31T23:59:59Z inclusive."
        required: false
        type: "string"
        format: "int64"
        x-exportParamName: "SinceTimeSeconds"
        x-optionalDataType: "String"
      - name: "sinceTime.nanos"
        in: "query"
        description: "Non-negative fractions of a second at nanosecond resolution.\
          \ Negative\nsecond values with fractions must still have non-negative nanos\
          \ values\nthat count forward in time. Must be from 0 to 999,999,999\ninclusive.\
          \ This field may be limited in precision depending on context."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "SinceTimeNanos"
        x-optionalDataType: "Int32"
      - name: "tailLines"
        in: "query"
        required: false
        type: "string"
        format: "int64"
        x-exportParamName: "TailLines"
        x-optionalDataType: "String"
      - name: "follow"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "Follow"
        x-optionalDataType: "Bool"
      - name: "untilTime"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "UntilTime"
        x-optionalDataType: "String"
      - name: "filter"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      - name: "kind"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Kind"
        x-optionalDataType: "String"
      - name: "group"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Group"
        x-optionalDataType: "String"
      - name: "resourceName"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "ResourceName"
        x-optionalDataType: "String"
      - name: "previous"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "Previous"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "A successful response.(streaming responses)"
          schema:
            $ref: "#/definitions/Stream result of applicationLogEntry"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/applications/{name}/resource:
    get:
      tags:
      - "ApplicationService"
      summary: "GetResource returns single application resource"
      operationId: "ApplicationService_GetResource"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "namespace"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Namespace"
        x-optionalDataType: "String"
      - name: "resourceName"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "ResourceName"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Version"
        x-optionalDataType: "String"
      - name: "group"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Group"
        x-optionalDataType: "String"
      - name: "kind"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Kind"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/applicationApplicationResourceResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
    post:
      tags:
      - "ApplicationService"
      summary: "PatchResource patch single application resource"
      operationId: "ApplicationService_PatchResource"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - in: "body"
        name: "body"
        required: true
        schema:
          type: "string"
        x-exportParamName: "Body"
      - name: "namespace"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Namespace"
        x-optionalDataType: "String"
      - name: "resourceName"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "ResourceName"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Version"
        x-optionalDataType: "String"
      - name: "group"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Group"
        x-optionalDataType: "String"
      - name: "kind"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Kind"
        x-optionalDataType: "String"
      - name: "patchType"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "PatchType"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/applicationApplicationResourceResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
    delete:
      tags:
      - "ApplicationService"
      summary: "DeleteResource deletes a single application resource"
      operationId: "ApplicationService_DeleteResource"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "namespace"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Namespace"
        x-optionalDataType: "String"
      - name: "resourceName"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "ResourceName"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Version"
        x-optionalDataType: "String"
      - name: "group"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Group"
        x-optionalDataType: "String"
      - name: "kind"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Kind"
        x-optionalDataType: "String"
      - name: "force"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "Force"
        x-optionalDataType: "Bool"
      - name: "orphan"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "Orphan"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/applicationApplicationResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/applications/{name}/resource/actions:
    get:
      tags:
      - "ApplicationService"
      summary: "ListResourceActions returns list of resource actions"
      operationId: "ApplicationService_ListResourceActions"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "namespace"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Namespace"
        x-optionalDataType: "String"
      - name: "resourceName"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "ResourceName"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Version"
        x-optionalDataType: "String"
      - name: "group"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Group"
        x-optionalDataType: "String"
      - name: "kind"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Kind"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/applicationResourceActionsListResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
    post:
      tags:
      - "ApplicationService"
      summary: "RunResourceAction run resource action"
      operationId: "ApplicationService_RunResourceAction"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - in: "body"
        name: "body"
        required: true
        schema:
          type: "string"
        x-exportParamName: "Body"
      - name: "namespace"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Namespace"
        x-optionalDataType: "String"
      - name: "resourceName"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "ResourceName"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Version"
        x-optionalDataType: "String"
      - name: "group"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Group"
        x-optionalDataType: "String"
      - name: "kind"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Kind"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/applicationApplicationResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/applications/{name}/revisions/{revision}/metadata:
    get:
      tags:
      - "ApplicationService"
      summary: "Get the meta-data (author, date, tags, message) for a specific revision\
        \ of the application"
      operationId: "ApplicationService_RevisionMetadata"
      parameters:
      - name: "name"
        in: "path"
        description: "the application's name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "revision"
        in: "path"
        description: "the revision of the app"
        required: true
        type: "string"
        x-exportParamName: "Revision"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/v1alpha1RevisionMetadata"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/applications/{name}/rollback:
    post:
      tags:
      - "ApplicationService"
      summary: "Rollback syncs an application to its target state"
      operationId: "ApplicationService_Rollback"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/applicationApplicationRollbackRequest"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/v1alpha1Application"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/applications/{name}/spec:
    put:
      tags:
      - "ApplicationService"
      summary: "UpdateSpec updates an application spec"
      operationId: "ApplicationService_UpdateSpec"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/v1alpha1ApplicationSpec"
        x-exportParamName: "Body"
      - name: "validate"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "Validate"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/v1alpha1ApplicationSpec"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/applications/{name}/sync:
    post:
      tags:
      - "ApplicationService"
      summary: "Sync syncs an application to its target state"
      operationId: "ApplicationService_Sync"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/applicationApplicationSyncRequest"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/v1alpha1Application"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/applications/{name}/syncwindows:
    get:
      tags:
      - "ApplicationService"
      summary: "Get returns sync windows of the application"
      operationId: "ApplicationService_GetApplicationSyncWindows"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/applicationApplicationSyncWindowsResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/certificates:
    get:
      tags:
      - "CertificateService"
      summary: "List all available repository certificates"
      operationId: "CertificateService_ListCertificates"
      parameters:
      - name: "hostNamePattern"
        in: "query"
        description: "A file-glob pattern (not regular expression) the host name has\
          \ to match."
        required: false
        type: "string"
        x-exportParamName: "HostNamePattern"
        x-optionalDataType: "String"
      - name: "certType"
        in: "query"
        description: "The type of the certificate to match (ssh or https)."
        required: false
        type: "string"
        x-exportParamName: "CertType"
        x-optionalDataType: "String"
      - name: "certSubType"
        in: "query"
        description: "The sub type of the certificate to match (protocol dependent,\
          \ usually only used for ssh certs)."
        required: false
        type: "string"
        x-exportParamName: "CertSubType"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/v1alpha1RepositoryCertificateList"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
    post:
      tags:
      - "CertificateService"
      summary: "Creates repository certificates on the server"
      operationId: "CertificateService_CreateCertificate"
      parameters:
      - in: "body"
        name: "body"
        description: "List of certificates to be created"
        required: true
        schema:
          $ref: "#/definitions/v1alpha1RepositoryCertificateList"
        x-exportParamName: "Body"
      - name: "upsert"
        in: "query"
        description: "Whether to upsert already existing certificates."
        required: false
        type: "boolean"
        x-exportParamName: "Upsert"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/v1alpha1RepositoryCertificateList"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
    delete:
      tags:
      - "CertificateService"
      summary: "Delete the certificates that match the RepositoryCertificateQuery"
      operationId: "CertificateService_DeleteCertificate"
      parameters:
      - name: "hostNamePattern"
        in: "query"
        description: "A file-glob pattern (not regular expression) the host name has\
          \ to match."
        required: false
        type: "string"
        x-exportParamName: "HostNamePattern"
        x-optionalDataType: "String"
      - name: "certType"
        in: "query"
        description: "The type of the certificate to match (ssh or https)."
        required: false
        type: "string"
        x-exportParamName: "CertType"
        x-optionalDataType: "String"
      - name: "certSubType"
        in: "query"
        description: "The sub type of the certificate to match (protocol dependent,\
          \ usually only used for ssh certs)."
        required: false
        type: "string"
        x-exportParamName: "CertSubType"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/v1alpha1RepositoryCertificateList"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/clusters:
    get:
      tags:
      - "ClusterService"
      summary: "List returns list of clusters"
      operationId: "ClusterService_List"
      parameters:
      - name: "server"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Server"
        x-optionalDataType: "String"
      - name: "name"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/v1alpha1ClusterList"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
    post:
      tags:
      - "ClusterService"
      summary: "Create creates a cluster"
      operationId: "ClusterService_Create"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/v1alpha1Cluster"
        x-exportParamName: "Body"
      - name: "upsert"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "Upsert"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/v1alpha1Cluster"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/clusters/{cluster.server}:
    put:
      tags:
      - "ClusterService"
      summary: "Update updates a cluster"
      operationId: "ClusterService_Update"
      parameters:
      - name: "cluster.server"
        in: "path"
        description: "Server is the API server URL of the Kubernetes cluster"
        required: true
        type: "string"
        x-exportParamName: "ClusterServer"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/v1alpha1Cluster"
        x-exportParamName: "Body"
      - name: "updatedFields"
        in: "query"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
        x-exportParamName: "UpdatedFields"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/v1alpha1Cluster"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/clusters/{server}:
    get:
      tags:
      - "ClusterService"
      summary: "Get returns a cluster by server address"
      operationId: "ClusterService_Get"
      parameters:
      - name: "server"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Server"
      - name: "name"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/v1alpha1Cluster"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
    delete:
      tags:
      - "ClusterService"
      summary: "Delete deletes a cluster"
      operationId: "ClusterService_Delete"
      parameters:
      - name: "server"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Server"
      - name: "name"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/clusterClusterResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/clusters/{server}/invalidate-cache:
    post:
      tags:
      - "ClusterService"
      summary: "InvalidateCache invalidates cluster cache"
      operationId: "ClusterService_InvalidateCache"
      parameters:
      - name: "server"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Server"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/v1alpha1Cluster"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/clusters/{server}/rotate-auth:
    post:
      tags:
      - "ClusterService"
      summary: "RotateAuth rotates the bearer token used for a cluster"
      operationId: "ClusterService_RotateAuth"
      parameters:
      - name: "server"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Server"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/clusterClusterResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/gpgkeys:
    get:
      tags:
      - "GPGKeyService"
      summary: "List all available repository certificates"
      operationId: "GPGKeyService_List"
      parameters:
      - name: "keyID"
        in: "query"
        description: "The GPG key ID to query for."
        required: false
        type: "string"
        x-exportParamName: "KeyID"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/v1alpha1GnuPGPublicKeyList"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
    post:
      tags:
      - "GPGKeyService"
      summary: "Create one or more GPG public keys in the server's configuration"
      operationId: "GPGKeyService_Create"
      parameters:
      - in: "body"
        name: "body"
        description: "Raw key data of the GPG key(s) to create"
        required: true
        schema:
          $ref: "#/definitions/v1alpha1GnuPGPublicKey"
        x-exportParamName: "Body"
      - name: "upsert"
        in: "query"
        description: "Whether to upsert already existing public keys."
        required: false
        type: "boolean"
        x-exportParamName: "Upsert"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/gpgkeyGnuPGPublicKeyCreateResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
    delete:
      tags:
      - "GPGKeyService"
      summary: "Delete specified GPG public key from the server's configuration"
      operationId: "GPGKeyService_Delete"
      parameters:
      - name: "keyID"
        in: "query"
        description: "The GPG key ID to query for."
        required: false
        type: "string"
        x-exportParamName: "KeyID"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/gpgkeyGnuPGPublicKeyResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/gpgkeys/{keyID}:
    get:
      tags:
      - "GPGKeyService"
      summary: "Get information about specified GPG public key from the server"
      operationId: "GPGKeyService_Get"
      parameters:
      - name: "keyID"
        in: "path"
        description: "The GPG key ID to query for"
        required: true
        type: "string"
        x-exportParamName: "KeyID"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/v1alpha1GnuPGPublicKey"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/projects:
    get:
      tags:
      - "ProjectService"
      summary: "List returns list of projects"
      operationId: "ProjectService_List"
      parameters:
      - name: "name"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/v1alpha1AppProjectList"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
    post:
      tags:
      - "ProjectService"
      summary: "Create a new project"
      operationId: "ProjectService_Create"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/projectProjectCreateRequest"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/v1alpha1AppProject"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/projects/{name}:
    get:
      tags:
      - "ProjectService"
      summary: "Get returns a project by name"
      operationId: "ProjectService_Get"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/v1alpha1AppProject"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
    delete:
      tags:
      - "ProjectService"
      summary: "Delete deletes a project"
      operationId: "ProjectService_Delete"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/projectEmptyResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/projects/{name}/detailed:
    get:
      tags:
      - "ProjectService"
      summary: "GetDetailedProject returns a project that include project, global\
        \ project and scoped resources by name"
      operationId: "ProjectService_GetDetailedProject"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/projectDetailedProjectsResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/projects/{name}/events:
    get:
      tags:
      - "ProjectService"
      summary: "ListEvents returns a list of project events"
      operationId: "ProjectService_ListEvents"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/v1EventList"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/projects/{name}/globalprojects:
    get:
      tags:
      - "ProjectService"
      summary: "Get returns a virtual project by name"
      operationId: "ProjectService_GetGlobalProjects"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/projectGlobalProjectsResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/projects/{name}/syncwindows:
    get:
      tags:
      - "ProjectService"
      summary: "GetSchedulesState returns true if there are any active sync syncWindows"
      operationId: "ProjectService_GetSyncWindowsState"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/projectSyncWindowsResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/projects/{project.metadata.name}:
    put:
      tags:
      - "ProjectService"
      summary: "Update updates a project"
      operationId: "ProjectService_Update"
      parameters:
      - name: "project.metadata.name"
        in: "path"
        description: "Name must be unique within a namespace. Is required when creating\
          \ resources, although\nsome resources may allow a client to request the\
          \ generation of an appropriate name\nautomatically. Name is primarily intended\
          \ for creation idempotence and configuration\ndefinition.\nCannot be updated.\n\
          More info: http://kubernetes.io/docs/user-guide/identifiers#names\n+optional"
        required: true
        type: "string"
        x-exportParamName: "ProjectMetadataName"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/projectProjectUpdateRequest"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/v1alpha1AppProject"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/projects/{project}/roles/{role}/token:
    post:
      tags:
      - "ProjectService"
      summary: "Create a new project token"
      operationId: "ProjectService_CreateToken"
      parameters:
      - name: "project"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Project"
      - name: "role"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Role"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/projectProjectTokenCreateRequest"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/projectProjectTokenResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/projects/{project}/roles/{role}/token/{iat}:
    delete:
      tags:
      - "ProjectService"
      summary: "Delete a new project token"
      operationId: "ProjectService_DeleteToken"
      parameters:
      - name: "project"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Project"
      - name: "role"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Role"
      - name: "iat"
        in: "path"
        required: true
        type: "string"
        format: "int64"
        x-exportParamName: "Iat"
      - name: "id"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Id"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/projectEmptyResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/repocreds:
    get:
      tags:
      - "RepoCredsService"
      summary: "ListRepositoryCredentials gets a list of all configured repository\
        \ credential sets"
      operationId: "RepoCredsService_ListRepositoryCredentials"
      parameters:
      - name: "url"
        in: "query"
        description: "Repo URL for query."
        required: false
        type: "string"
        x-exportParamName: "Url"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/v1alpha1RepoCredsList"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
    post:
      tags:
      - "RepoCredsService"
      summary: "CreateRepositoryCredentials creates a new repository credential set"
      operationId: "RepoCredsService_CreateRepositoryCredentials"
      parameters:
      - in: "body"
        name: "body"
        description: "Repository definition"
        required: true
        schema:
          $ref: "#/definitions/v1alpha1RepoCreds"
        x-exportParamName: "Body"
      - name: "upsert"
        in: "query"
        description: "Whether to create in upsert mode."
        required: false
        type: "boolean"
        x-exportParamName: "Upsert"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/v1alpha1RepoCreds"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/repocreds/{creds.url}:
    put:
      tags:
      - "RepoCredsService"
      summary: "UpdateRepositoryCredentials updates a repository credential set"
      operationId: "RepoCredsService_UpdateRepositoryCredentials"
      parameters:
      - name: "creds.url"
        in: "path"
        description: "URL is the URL that this credentials matches to"
        required: true
        type: "string"
        x-exportParamName: "CredsUrl"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/v1alpha1RepoCreds"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/v1alpha1RepoCreds"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/repocreds/{url}:
    delete:
      tags:
      - "RepoCredsService"
      summary: "DeleteRepositoryCredentials deletes a repository credential set from\
        \ the configuration"
      operationId: "RepoCredsService_DeleteRepositoryCredentials"
      parameters:
      - name: "url"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Url"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/repocredsRepoCredsResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/repositories:
    get:
      tags:
      - "RepositoryService"
      summary: "ListRepositories gets a list of all configured repositories"
      operationId: "RepositoryService_ListRepositories"
      parameters:
      - name: "repo"
        in: "query"
        description: "Repo URL for query."
        required: false
        type: "string"
        x-exportParamName: "Repo"
        x-optionalDataType: "String"
      - name: "forceRefresh"
        in: "query"
        description: "Whether to force a cache refresh on repo's connection state."
        required: false
        type: "boolean"
        x-exportParamName: "ForceRefresh"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/v1alpha1RepositoryList"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
    post:
      tags:
      - "RepositoryService"
      summary: "CreateRepository creates a new repository configuration"
      operationId: "RepositoryService_CreateRepository"
      parameters:
      - in: "body"
        name: "body"
        description: "Repository definition"
        required: true
        schema:
          $ref: "#/definitions/v1alpha1Repository"
        x-exportParamName: "Body"
      - name: "upsert"
        in: "query"
        description: "Whether to create in upsert mode."
        required: false
        type: "boolean"
        x-exportParamName: "Upsert"
        x-optionalDataType: "Bool"
      - name: "credsOnly"
        in: "query"
        description: "Whether to operate on credential set instead of repository."
        required: false
        type: "boolean"
        x-exportParamName: "CredsOnly"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/v1alpha1Repository"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/repositories/{repo.repo}:
    put:
      tags:
      - "RepositoryService"
      summary: "UpdateRepository updates a repository configuration"
      operationId: "RepositoryService_UpdateRepository"
      parameters:
      - name: "repo.repo"
        in: "path"
        description: "Repo contains the URL to the remote repository"
        required: true
        type: "string"
        x-exportParamName: "RepoRepo"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/v1alpha1Repository"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/v1alpha1Repository"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/repositories/{repo}:
    get:
      tags:
      - "RepositoryService"
      summary: "Get returns a repository or its credentials"
      operationId: "RepositoryService_Get"
      parameters:
      - name: "repo"
        in: "path"
        description: "Repo URL for query"
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - name: "forceRefresh"
        in: "query"
        description: "Whether to force a cache refresh on repo's connection state."
        required: false
        type: "boolean"
        x-exportParamName: "ForceRefresh"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/v1alpha1Repository"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
    delete:
      tags:
      - "RepositoryService"
      summary: "DeleteRepository deletes a repository from the configuration"
      operationId: "RepositoryService_DeleteRepository"
      parameters:
      - name: "repo"
        in: "path"
        description: "Repo URL for query"
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - name: "forceRefresh"
        in: "query"
        description: "Whether to force a cache refresh on repo's connection state."
        required: false
        type: "boolean"
        x-exportParamName: "ForceRefresh"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/repositoryRepoResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/repositories/{repo}/apps:
    get:
      tags:
      - "RepositoryService"
      summary: "ListApps returns list of apps in the repo"
      operationId: "RepositoryService_ListApps"
      parameters:
      - name: "repo"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - name: "revision"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Revision"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/repositoryRepoAppsResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/repositories/{repo}/helmcharts:
    get:
      tags:
      - "RepositoryService"
      summary: "GetHelmCharts returns list of helm charts in the specified repository"
      operationId: "RepositoryService_GetHelmCharts"
      parameters:
      - name: "repo"
        in: "path"
        description: "Repo URL for query"
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - name: "forceRefresh"
        in: "query"
        description: "Whether to force a cache refresh on repo's connection state."
        required: false
        type: "boolean"
        x-exportParamName: "ForceRefresh"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/repositoryHelmChartsResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/repositories/{repo}/refs:
    get:
      tags:
      - "RepositoryService"
      operationId: "RepositoryService_ListRefs"
      parameters:
      - name: "repo"
        in: "path"
        description: "Repo URL for query"
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - name: "forceRefresh"
        in: "query"
        description: "Whether to force a cache refresh on repo's connection state."
        required: false
        type: "boolean"
        x-exportParamName: "ForceRefresh"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/repositoryRefs"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/repositories/{repo}/validate:
    post:
      tags:
      - "RepositoryService"
      summary: "ValidateAccess validates access to a repository with given parameters"
      operationId: "RepositoryService_ValidateAccess"
      parameters:
      - name: "repo"
        in: "path"
        description: "The URL to the repo"
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - in: "body"
        name: "body"
        description: "The URL to the repo"
        required: true
        schema:
          type: "string"
        x-exportParamName: "Body"
      - name: "username"
        in: "query"
        description: "Username for accessing repo."
        required: false
        type: "string"
        x-exportParamName: "Username"
        x-optionalDataType: "String"
      - name: "password"
        in: "query"
        description: "Password for accessing repo."
        required: false
        type: "string"
        x-exportParamName: "Password"
        x-optionalDataType: "String"
      - name: "sshPrivateKey"
        in: "query"
        description: "Private key data for accessing SSH repository."
        required: false
        type: "string"
        x-exportParamName: "SshPrivateKey"
        x-optionalDataType: "String"
      - name: "insecure"
        in: "query"
        description: "Whether to skip certificate or host key validation."
        required: false
        type: "boolean"
        x-exportParamName: "Insecure"
        x-optionalDataType: "Bool"
      - name: "tlsClientCertData"
        in: "query"
        description: "TLS client cert data for accessing HTTPS repository."
        required: false
        type: "string"
        x-exportParamName: "TlsClientCertData"
        x-optionalDataType: "String"
      - name: "tlsClientCertKey"
        in: "query"
        description: "TLS client cert key for accessing HTTPS repository."
        required: false
        type: "string"
        x-exportParamName: "TlsClientCertKey"
        x-optionalDataType: "String"
      - name: "type"
        in: "query"
        description: "The type of the repo."
        required: false
        type: "string"
        x-exportParamName: "Type_"
        x-optionalDataType: "String"
      - name: "name"
        in: "query"
        description: "The name of the repo."
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "enableOci"
        in: "query"
        description: "Whether helm-oci support should be enabled for this repo."
        required: false
        type: "boolean"
        x-exportParamName: "EnableOci"
        x-optionalDataType: "Bool"
      - name: "githubAppPrivateKey"
        in: "query"
        description: "Github App Private Key PEM data."
        required: false
        type: "string"
        x-exportParamName: "GithubAppPrivateKey"
        x-optionalDataType: "String"
      - name: "githubAppID"
        in: "query"
        description: "Github App ID of the app used to access the repo."
        required: false
        type: "string"
        format: "int64"
        x-exportParamName: "GithubAppID"
        x-optionalDataType: "String"
      - name: "githubAppInstallationID"
        in: "query"
        description: "Github App Installation ID of the installed GitHub App."
        required: false
        type: "string"
        format: "int64"
        x-exportParamName: "GithubAppInstallationID"
        x-optionalDataType: "String"
      - name: "githubAppEnterpriseBaseUrl"
        in: "query"
        description: "Github App Enterprise base url if empty will default to https://api.github.com."
        required: false
        type: "string"
        x-exportParamName: "GithubAppEnterpriseBaseUrl"
        x-optionalDataType: "String"
      - name: "proxy"
        in: "query"
        description: "HTTP/HTTPS proxy to access the repository."
        required: false
        type: "string"
        x-exportParamName: "Proxy"
        x-optionalDataType: "String"
      - name: "project"
        in: "query"
        description: "Reference between project and repository that allow you automatically\
          \ to be added as item inside SourceRepos project entity."
        required: false
        type: "string"
        x-exportParamName: "Project"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/repositoryRepoResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/repositories/{source.repoURL}/appdetails:
    post:
      tags:
      - "RepositoryService"
      summary: "GetAppDetails returns application details by given path"
      operationId: "RepositoryService_GetAppDetails"
      parameters:
      - name: "source.repoURL"
        in: "path"
        description: "RepoURL is the URL to the repository (Git or Helm) that contains\
          \ the application manifests"
        required: true
        type: "string"
        x-exportParamName: "SourceRepoURL"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/repositoryRepoAppDetailsQuery"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/repositoryRepoAppDetailsResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/session:
    post:
      tags:
      - "SessionService"
      summary: "Create a new JWT for authentication and set a cookie if using HTTP"
      operationId: "SessionService_Create"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/sessionSessionCreateRequest"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/sessionSessionResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
    delete:
      tags:
      - "SessionService"
      summary: "Delete an existing JWT cookie if using HTTP"
      operationId: "SessionService_Delete"
      parameters: []
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/sessionSessionResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/session/userinfo:
    get:
      tags:
      - "SessionService"
      summary: "Get the current user's info"
      operationId: "SessionService_GetUserInfo"
      parameters: []
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/sessionGetUserInfoResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/settings:
    get:
      tags:
      - "SettingsService"
      summary: "Get returns Argo CD settings"
      operationId: "SettingsService_Get"
      parameters: []
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/clusterSettings"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/stream/applications:
    get:
      tags:
      - "ApplicationService"
      summary: "Watch returns stream of application change events"
      operationId: "ApplicationService_Watch"
      parameters:
      - name: "name"
        in: "query"
        description: "the application's name."
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "refresh"
        in: "query"
        description: "forces application reconciliation if set to true."
        required: false
        type: "string"
        x-exportParamName: "Refresh"
        x-optionalDataType: "String"
      - name: "project"
        in: "query"
        description: "the project names to restrict returned list applications."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
        x-exportParamName: "Project"
      - name: "resourceVersion"
        in: "query"
        description: "when specified with a watch call, shows changes that occur after\
          \ that particular version of a resource."
        required: false
        type: "string"
        x-exportParamName: "ResourceVersion"
        x-optionalDataType: "String"
      - name: "selector"
        in: "query"
        description: "the selector to to restrict returned list to applications only\
          \ with matched labels."
        required: false
        type: "string"
        x-exportParamName: "Selector"
        x-optionalDataType: "String"
      - name: "repo"
        in: "query"
        description: "the repoURL to restrict returned list applications."
        required: false
        type: "string"
        x-exportParamName: "Repo"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "A successful response.(streaming responses)"
          schema:
            $ref: "#/definitions/Stream result of v1alpha1ApplicationWatchEvent"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/v1/stream/applications/{applicationName}/resource-tree:
    get:
      tags:
      - "ApplicationService"
      summary: "Watch returns stream of application resource tree"
      operationId: "ApplicationService_WatchResourceTree"
      parameters:
      - name: "applicationName"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ApplicationName"
      - name: "namespace"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Namespace"
        x-optionalDataType: "String"
      - name: "name"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Version"
        x-optionalDataType: "String"
      - name: "group"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Group"
        x-optionalDataType: "String"
      - name: "kind"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Kind"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "A successful response.(streaming responses)"
          schema:
            $ref: "#/definitions/Stream result of v1alpha1ApplicationTree"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
  /api/version:
    get:
      tags:
      - "VersionService"
      summary: "Version returns version information of the API server"
      operationId: "VersionService_Version"
      parameters: []
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/versionVersionMessage"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/runtimeError"
definitions:
  accountAccount:
    type: "object"
    properties:
      capabilities:
        type: "array"
        items:
          type: "string"
      enabled:
        type: "boolean"
      name:
        type: "string"
      tokens:
        type: "array"
        items:
          $ref: "#/definitions/accountToken"
    example:
      capabilities:
      - "capabilities"
      - "capabilities"
      name: "name"
      tokens:
      - id: "id"
        issuedAt: "issuedAt"
        expiresAt: "expiresAt"
      - id: "id"
        issuedAt: "issuedAt"
        expiresAt: "expiresAt"
      enabled: true
  accountAccountsList:
    type: "object"
    properties:
      items:
        type: "array"
        items:
          $ref: "#/definitions/accountAccount"
    example:
      items:
      - capabilities:
        - "capabilities"
        - "capabilities"
        name: "name"
        tokens:
        - id: "id"
          issuedAt: "issuedAt"
          expiresAt: "expiresAt"
        - id: "id"
          issuedAt: "issuedAt"
          expiresAt: "expiresAt"
        enabled: true
      - capabilities:
        - "capabilities"
        - "capabilities"
        name: "name"
        tokens:
        - id: "id"
          issuedAt: "issuedAt"
          expiresAt: "expiresAt"
        - id: "id"
          issuedAt: "issuedAt"
          expiresAt: "expiresAt"
        enabled: true
  accountCanIResponse:
    type: "object"
    properties:
      value:
        type: "string"
    example:
      value: "value"
  accountCreateTokenRequest:
    type: "object"
    properties:
      expiresIn:
        type: "string"
        format: "int64"
        title: "expiresIn represents a duration in seconds"
      id:
        type: "string"
      name:
        type: "string"
  accountCreateTokenResponse:
    type: "object"
    properties:
      token:
        type: "string"
    example:
      token: "token"
  accountEmptyResponse:
    type: "object"
  accountToken:
    type: "object"
    properties:
      expiresAt:
        type: "string"
        format: "int64"
      id:
        type: "string"
      issuedAt:
        type: "string"
        format: "int64"
    example:
      id: "id"
      issuedAt: "issuedAt"
      expiresAt: "expiresAt"
  accountUpdatePasswordRequest:
    type: "object"
    properties:
      currentPassword:
        type: "string"
      name:
        type: "string"
      newPassword:
        type: "string"
  accountUpdatePasswordResponse:
    type: "object"
  applicationApplicationPatchRequest:
    type: "object"
    properties:
      name:
        type: "string"
      patch:
        type: "string"
      patchType:
        type: "string"
    title: "ApplicationPatchRequest is a request to patch an application"
  applicationApplicationResourceResponse:
    type: "object"
    properties:
      manifest:
        type: "string"
    example:
      manifest: "manifest"
  applicationApplicationResponse:
    type: "object"
  applicationApplicationRollbackRequest:
    type: "object"
    properties:
      dryRun:
        type: "boolean"
      id:
        type: "string"
        format: "int64"
      name:
        type: "string"
      prune:
        type: "boolean"
  applicationApplicationSyncRequest:
    type: "object"
    properties:
      dryRun:
        type: "boolean"
      infos:
        type: "array"
        items:
          $ref: "#/definitions/v1alpha1Info"
      manifests:
        type: "array"
        items:
          type: "string"
      name:
        type: "string"
      prune:
        type: "boolean"
      resources:
        type: "array"
        items:
          $ref: "#/definitions/v1alpha1SyncOperationResource"
      retryStrategy:
        $ref: "#/definitions/v1alpha1RetryStrategy"
      revision:
        type: "string"
      strategy:
        $ref: "#/definitions/v1alpha1SyncStrategy"
      syncOptions:
        $ref: "#/definitions/applicationSyncOptions"
    title: "ApplicationSyncRequest is a request to apply the config state to live\
      \ state"
  applicationApplicationSyncWindow:
    type: "object"
    properties:
      duration:
        type: "string"
      kind:
        type: "string"
      manualSync:
        type: "boolean"
      schedule:
        type: "string"
    example:
      duration: "duration"
      schedule: "schedule"
      kind: "kind"
      manualSync: true
  applicationApplicationSyncWindowsResponse:
    type: "object"
    properties:
      activeWindows:
        type: "array"
        items:
          $ref: "#/definitions/applicationApplicationSyncWindow"
      assignedWindows:
        type: "array"
        items:
          $ref: "#/definitions/applicationApplicationSyncWindow"
      canSync:
        type: "boolean"
    example:
      assignedWindows:
      - duration: "duration"
        schedule: "schedule"
        kind: "kind"
        manualSync: true
      - duration: "duration"
        schedule: "schedule"
        kind: "kind"
        manualSync: true
      activeWindows:
      - duration: "duration"
        schedule: "schedule"
        kind: "kind"
        manualSync: true
      - duration: "duration"
        schedule: "schedule"
        kind: "kind"
        manualSync: true
      canSync: true
  applicationLogEntry:
    type: "object"
    properties:
      content:
        type: "string"
      last:
        type: "boolean"
      podName:
        type: "string"
      timeStamp:
        $ref: "#/definitions/v1Time"
      timeStampStr:
        type: "string"
    example:
      timeStamp:
        seconds: "seconds"
        nanos: 0
      last: true
      timeStampStr: "timeStampStr"
      podName: "podName"
      content: "content"
  applicationManagedResourcesResponse:
    type: "object"
    properties:
      items:
        type: "array"
        items:
          $ref: "#/definitions/v1alpha1ResourceDiff"
    example:
      items:
      - hook: true
        kind: "kind"
        targetState: "targetState"
        normalizedLiveState: "normalizedLiveState"
        resourceVersion: "resourceVersion"
        name: "name"
        namespace: "namespace"
        modified: true
        diff: "diff"
        predictedLiveState: "predictedLiveState"
        group: "group"
        liveState: "liveState"
      - hook: true
        kind: "kind"
        targetState: "targetState"
        normalizedLiveState: "normalizedLiveState"
        resourceVersion: "resourceVersion"
        name: "name"
        namespace: "namespace"
        modified: true
        diff: "diff"
        predictedLiveState: "predictedLiveState"
        group: "group"
        liveState: "liveState"
  applicationOperationTerminateResponse:
    type: "object"
  applicationResourceActionsListResponse:
    type: "object"
    properties:
      actions:
        type: "array"
        items:
          $ref: "#/definitions/v1alpha1ResourceAction"
    example:
      actions:
      - name: "name"
        disabled: true
        params:
        - default: "default"
          name: "name"
          type: "type"
          value: "value"
        - default: "default"
          name: "name"
          type: "type"
          value: "value"
      - name: "name"
        disabled: true
        params:
        - default: "default"
          name: "name"
          type: "type"
          value: "value"
        - default: "default"
          name: "name"
          type: "type"
          value: "value"
  applicationSyncOptions:
    type: "object"
    properties:
      items:
        type: "array"
        items:
          type: "string"
  applicationv1alpha1EnvEntry:
    type: "object"
    properties:
      name:
        type: "string"
        title: "Name is the name of the variable, usually expressed in uppercase"
      value:
        type: "string"
        title: "Value is the value of the variable"
    title: "EnvEntry represents an entry in the application's environment"
    example:
      name: "name"
      value: "value"
  clusterClusterResponse:
    type: "object"
  clusterConnector:
    type: "object"
    properties:
      name:
        type: "string"
      type:
        type: "string"
    example:
      name: "name"
      type: "type"
  clusterDexConfig:
    type: "object"
    properties:
      connectors:
        type: "array"
        items:
          $ref: "#/definitions/clusterConnector"
    example:
      connectors:
      - name: "name"
        type: "type"
      - name: "name"
        type: "type"
  clusterGoogleAnalyticsConfig:
    type: "object"
    properties:
      anonymizeUsers:
        type: "boolean"
      trackingID:
        type: "string"
    example:
      anonymizeUsers: true
      trackingID: "trackingID"
  clusterHelp:
    type: "object"
    properties:
      chatText:
        type: "string"
        title: "the text for getting chat help, defaults to \"Chat now!\""
      chatUrl:
        type: "string"
        title: "the URL for getting chat help, this will typically be your Slack channel\
          \ for support"
    title: "Help settings"
    example:
      chatText: "chatText"
      chatUrl: "chatUrl"
  clusterOIDCConfig:
    type: "object"
    properties:
      cliClientID:
        type: "string"
      clientID:
        type: "string"
      idTokenClaims:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/oidcClaim"
      issuer:
        type: "string"
      name:
        type: "string"
      scopes:
        type: "array"
        items:
          type: "string"
    example:
      idTokenClaims:
        key:
          values:
          - "values"
          - "values"
          value: "value"
          essential: true
      clientID: "clientID"
      name: "name"
      cliClientID: "cliClientID"
      scopes:
      - "scopes"
      - "scopes"
      issuer: "issuer"
  clusterPlugin:
    type: "object"
    properties:
      name:
        type: "string"
        title: "the name of the plugin, e.g. \"kasane\""
    title: "Plugin settings"
    example:
      name: "name"
  clusterSettings:
    type: "object"
    properties:
      appLabelKey:
        type: "string"
      configManagementPlugins:
        type: "array"
        items:
          $ref: "#/definitions/v1alpha1ConfigManagementPlugin"
      dexConfig:
        $ref: "#/definitions/clusterDexConfig"
      googleAnalytics:
        $ref: "#/definitions/clusterGoogleAnalyticsConfig"
      help:
        $ref: "#/definitions/clusterHelp"
      kustomizeOptions:
        $ref: "#/definitions/v1alpha1KustomizeOptions"
      kustomizeVersions:
        type: "array"
        items:
          type: "string"
      oidcConfig:
        $ref: "#/definitions/clusterOIDCConfig"
      passwordPattern:
        type: "string"
      plugins:
        type: "array"
        items:
          $ref: "#/definitions/clusterPlugin"
      resourceOverrides:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/v1alpha1ResourceOverride"
      statusBadgeEnabled:
        type: "boolean"
      trackingMethod:
        type: "string"
      uiBannerContent:
        type: "string"
      uiBannerPermanent:
        type: "boolean"
      uiBannerPosition:
        type: "string"
      uiBannerURL:
        type: "string"
      uiCssURL:
        type: "string"
      url:
        type: "string"
      userLoginsDisabled:
        type: "boolean"
    example:
      appLabelKey: "appLabelKey"
      uiBannerPermanent: true
      kustomizeVersions:
      - "kustomizeVersions"
      - "kustomizeVersions"
      plugins:
      - name: "name"
      - name: "name"
      uiBannerContent: "uiBannerContent"
      statusBadgeEnabled: true
      userLoginsDisabled: true
      resourceOverrides:
        key:
          healthLua: "healthLua"
          knownTypeFields:
          - field: "field"
            type: "type"
          - field: "field"
            type: "type"
          useOpenLibs: true
          actions: "actions"
          ignoreDifferences:
            jqPathExpressions:
            - "jqPathExpressions"
            - "jqPathExpressions"
            jSONPointers:
            - "jSONPointers"
            - "jSONPointers"
      kustomizeOptions:
        binaryPath: "binaryPath"
        buildOptions: "buildOptions"
      configManagementPlugins:
      - lockRepo: true
        init:
          args:
          - "args"
          - "args"
          command:
          - "command"
          - "command"
        name: "name"
        generate:
          args:
          - "args"
          - "args"
          command:
          - "command"
          - "command"
      - lockRepo: true
        init:
          args:
          - "args"
          - "args"
          command:
          - "command"
          - "command"
        name: "name"
        generate:
          args:
          - "args"
          - "args"
          command:
          - "command"
          - "command"
      passwordPattern: "passwordPattern"
      uiBannerURL: "uiBannerURL"
      url: "url"
      help:
        chatText: "chatText"
        chatUrl: "chatUrl"
      trackingMethod: "trackingMethod"
      googleAnalytics:
        anonymizeUsers: true
        trackingID: "trackingID"
      uiCssURL: "uiCssURL"
      oidcConfig:
        idTokenClaims:
          key:
            values:
            - "values"
            - "values"
            value: "value"
            essential: true
        clientID: "clientID"
        name: "name"
        cliClientID: "cliClientID"
        scopes:
        - "scopes"
        - "scopes"
        issuer: "issuer"
      dexConfig:
        connectors:
        - name: "name"
          type: "type"
        - name: "name"
          type: "type"
      uiBannerPosition: "uiBannerPosition"
  gpgkeyGnuPGPublicKeyCreateResponse:
    type: "object"
    properties:
      created:
        $ref: "#/definitions/v1alpha1GnuPGPublicKeyList"
      skipped:
        type: "array"
        title: "List of key IDs that haven been skipped because they already exist\
          \ on the server"
        items:
          type: "string"
    title: "Response to a public key creation request"
    example:
      created:
        metadata:
          remainingItemCount: "remainingItemCount"
          continue: "continue"
          resourceVersion: "resourceVersion"
          selfLink: "selfLink"
        items:
        - owner: "owner"
          trust: "trust"
          keyData: "keyData"
          fingerprint: "fingerprint"
          keyID: "keyID"
          subType: "subType"
        - owner: "owner"
          trust: "trust"
          keyData: "keyData"
          fingerprint: "fingerprint"
          keyID: "keyID"
          subType: "subType"
      skipped:
      - "skipped"
      - "skipped"
  gpgkeyGnuPGPublicKeyResponse:
    type: "object"
    title: "Generic (empty) response for GPG public key CRUD requests"
  oidcClaim:
    type: "object"
    properties:
      essential:
        type: "boolean"
      value:
        type: "string"
      values:
        type: "array"
        items:
          type: "string"
    example:
      values:
      - "values"
      - "values"
      value: "value"
      essential: true
  projectDetailedProjectsResponse:
    type: "object"
    properties:
      clusters:
        type: "array"
        items:
          $ref: "#/definitions/v1alpha1Cluster"
      globalProjects:
        type: "array"
        items:
          $ref: "#/definitions/v1alpha1AppProject"
      project:
        $ref: "#/definitions/v1alpha1AppProject"
      repositories:
        type: "array"
        items:
          $ref: "#/definitions/v1alpha1Repository"
    example:
      globalProjects:
      - metadata:
          generation: "generation"
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          deletionTimestamp:
            seconds: "seconds"
            nanos: 0
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: "deletionGracePeriodSeconds"
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1:
              Raw: "Raw"
            manager: "manager"
            subresource: "subresource"
            time:
              seconds: "seconds"
              nanos: 0
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1:
              Raw: "Raw"
            manager: "manager"
            subresource: "subresource"
            time:
              seconds: "seconds"
              nanos: 0
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp:
            seconds: "seconds"
            nanos: 0
          name: "name"
          namespace: "namespace"
        spec:
          sourceRepos:
          - "sourceRepos"
          - "sourceRepos"
          orphanedResources:
            warn: true
            ignore:
            - kind: "kind"
              name: "name"
              group: "group"
            - kind: "kind"
              name: "name"
              group: "group"
          destinations:
          - server: "server"
            name: "name"
            namespace: "namespace"
          - server: "server"
            name: "name"
            namespace: "namespace"
          roles:
          - name: "name"
            policies:
            - "policies"
            - "policies"
            description: "description"
            groups:
            - "groups"
            - "groups"
            jwtTokens:
            - id: "id"
              exp: "exp"
              iat: "iat"
            - id: "id"
              exp: "exp"
              iat: "iat"
          - name: "name"
            policies:
            - "policies"
            - "policies"
            description: "description"
            groups:
            - "groups"
            - "groups"
            jwtTokens:
            - id: "id"
              exp: "exp"
              iat: "iat"
            - id: "id"
              exp: "exp"
              iat: "iat"
          clusterResourceWhitelist:
          - kind: "kind"
            group: "group"
          - kind: "kind"
            group: "group"
          namespaceResourceBlacklist:
          - kind: "kind"
            group: "group"
          - kind: "kind"
            group: "group"
          description: "description"
          clusterResourceBlacklist:
          - kind: "kind"
            group: "group"
          - kind: "kind"
            group: "group"
          namespaceResourceWhitelist:
          - kind: "kind"
            group: "group"
          - kind: "kind"
            group: "group"
          signatureKeys:
          - keyID: "keyID"
          - keyID: "keyID"
          syncWindows:
          - duration: "duration"
            schedule: "schedule"
            kind: "kind"
            timeZone: "timeZone"
            manualSync: true
            clusters:
            - "clusters"
            - "clusters"
            applications:
            - "applications"
            - "applications"
            namespaces:
            - "namespaces"
            - "namespaces"
          - duration: "duration"
            schedule: "schedule"
            kind: "kind"
            timeZone: "timeZone"
            manualSync: true
            clusters:
            - "clusters"
            - "clusters"
            applications:
            - "applications"
            - "applications"
            namespaces:
            - "namespaces"
            - "namespaces"
        status:
          jwtTokensByRole:
            key:
              items:
              - id: "id"
                exp: "exp"
                iat: "iat"
              - id: "id"
                exp: "exp"
                iat: "iat"
      - metadata:
          generation: "generation"
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          deletionTimestamp:
            seconds: "seconds"
            nanos: 0
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: "deletionGracePeriodSeconds"
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1:
              Raw: "Raw"
            manager: "manager"
            subresource: "subresource"
            time:
              seconds: "seconds"
              nanos: 0
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1:
              Raw: "Raw"
            manager: "manager"
            subresource: "subresource"
            time:
              seconds: "seconds"
              nanos: 0
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp:
            seconds: "seconds"
            nanos: 0
          name: "name"
          namespace: "namespace"
        spec:
          sourceRepos:
          - "sourceRepos"
          - "sourceRepos"
          orphanedResources:
            warn: true
            ignore:
            - kind: "kind"
              name: "name"
              group: "group"
            - kind: "kind"
              name: "name"
              group: "group"
          destinations:
          - server: "server"
            name: "name"
            namespace: "namespace"
          - server: "server"
            name: "name"
            namespace: "namespace"
          roles:
          - name: "name"
            policies:
            - "policies"
            - "policies"
            description: "description"
            groups:
            - "groups"
            - "groups"
            jwtTokens:
            - id: "id"
              exp: "exp"
              iat: "iat"
            - id: "id"
              exp: "exp"
              iat: "iat"
          - name: "name"
            policies:
            - "policies"
            - "policies"
            description: "description"
            groups:
            - "groups"
            - "groups"
            jwtTokens:
            - id: "id"
              exp: "exp"
              iat: "iat"
            - id: "id"
              exp: "exp"
              iat: "iat"
          clusterResourceWhitelist:
          - kind: "kind"
            group: "group"
          - kind: "kind"
            group: "group"
          namespaceResourceBlacklist:
          - kind: "kind"
            group: "group"
          - kind: "kind"
            group: "group"
          description: "description"
          clusterResourceBlacklist:
          - kind: "kind"
            group: "group"
          - kind: "kind"
            group: "group"
          namespaceResourceWhitelist:
          - kind: "kind"
            group: "group"
          - kind: "kind"
            group: "group"
          signatureKeys:
          - keyID: "keyID"
          - keyID: "keyID"
          syncWindows:
          - duration: "duration"
            schedule: "schedule"
            kind: "kind"
            timeZone: "timeZone"
            manualSync: true
            clusters:
            - "clusters"
            - "clusters"
            applications:
            - "applications"
            - "applications"
            namespaces:
            - "namespaces"
            - "namespaces"
          - duration: "duration"
            schedule: "schedule"
            kind: "kind"
            timeZone: "timeZone"
            manualSync: true
            clusters:
            - "clusters"
            - "clusters"
            applications:
            - "applications"
            - "applications"
            namespaces:
            - "namespaces"
            - "namespaces"
        status:
          jwtTokensByRole:
            key:
              items:
              - id: "id"
                exp: "exp"
                iat: "iat"
              - id: "id"
                exp: "exp"
                iat: "iat"
      repositories:
      - tlsClientCertKey: "tlsClientCertKey"
        insecureIgnoreHostKey: true
        githubAppID: "githubAppID"
        connectionState:
          message: "message"
          attemptedAt:
            seconds: "seconds"
            nanos: 0
          status: "status"
        repo: "repo"
        githubAppInstallationID: "githubAppInstallationID"
        project: "project"
        tlsClientCertData: "tlsClientCertData"
        enableOCI: true
        type: "type"
        githubAppPrivateKey: "githubAppPrivateKey"
        enableLfs: true
        proxy: "proxy"
        password: "password"
        sshPrivateKey: "sshPrivateKey"
        insecure: true
        name: "name"
        inheritedCreds: true
        githubAppEnterpriseBaseUrl: "githubAppEnterpriseBaseUrl"
        username: "username"
      - tlsClientCertKey: "tlsClientCertKey"
        insecureIgnoreHostKey: true
        githubAppID: "githubAppID"
        connectionState:
          message: "message"
          attemptedAt:
            seconds: "seconds"
            nanos: 0
          status: "status"
        repo: "repo"
        githubAppInstallationID: "githubAppInstallationID"
        project: "project"
        tlsClientCertData: "tlsClientCertData"
        enableOCI: true
        type: "type"
        githubAppPrivateKey: "githubAppPrivateKey"
        enableLfs: true
        proxy: "proxy"
        password: "password"
        sshPrivateKey: "sshPrivateKey"
        insecure: true
        name: "name"
        inheritedCreds: true
        githubAppEnterpriseBaseUrl: "githubAppEnterpriseBaseUrl"
        username: "username"
      project:
        metadata:
          generation: "generation"
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          deletionTimestamp:
            seconds: "seconds"
            nanos: 0
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: "deletionGracePeriodSeconds"
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1:
              Raw: "Raw"
            manager: "manager"
            subresource: "subresource"
            time:
              seconds: "seconds"
              nanos: 0
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1:
              Raw: "Raw"
            manager: "manager"
            subresource: "subresource"
            time:
              seconds: "seconds"
              nanos: 0
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp:
            seconds: "seconds"
            nanos: 0
          name: "name"
          namespace: "namespace"
        spec:
          sourceRepos:
          - "sourceRepos"
          - "sourceRepos"
          orphanedResources:
            warn: true
            ignore:
            - kind: "kind"
              name: "name"
              group: "group"
            - kind: "kind"
              name: "name"
              group: "group"
          destinations:
          - server: "server"
            name: "name"
            namespace: "namespace"
          - server: "server"
            name: "name"
            namespace: "namespace"
          roles:
          - name: "name"
            policies:
            - "policies"
            - "policies"
            description: "description"
            groups:
            - "groups"
            - "groups"
            jwtTokens:
            - id: "id"
              exp: "exp"
              iat: "iat"
            - id: "id"
              exp: "exp"
              iat: "iat"
          - name: "name"
            policies:
            - "policies"
            - "policies"
            description: "description"
            groups:
            - "groups"
            - "groups"
            jwtTokens:
            - id: "id"
              exp: "exp"
              iat: "iat"
            - id: "id"
              exp: "exp"
              iat: "iat"
          clusterResourceWhitelist:
          - kind: "kind"
            group: "group"
          - kind: "kind"
            group: "group"
          namespaceResourceBlacklist:
          - kind: "kind"
            group: "group"
          - kind: "kind"
            group: "group"
          description: "description"
          clusterResourceBlacklist:
          - kind: "kind"
            group: "group"
          - kind: "kind"
            group: "group"
          namespaceResourceWhitelist:
          - kind: "kind"
            group: "group"
          - kind: "kind"
            group: "group"
          signatureKeys:
          - keyID: "keyID"
          - keyID: "keyID"
          syncWindows:
          - duration: "duration"
            schedule: "schedule"
            kind: "kind"
            timeZone: "timeZone"
            manualSync: true
            clusters:
            - "clusters"
            - "clusters"
            applications:
            - "applications"
            - "applications"
            namespaces:
            - "namespaces"
            - "namespaces"
          - duration: "duration"
            schedule: "schedule"
            kind: "kind"
            timeZone: "timeZone"
            manualSync: true
            clusters:
            - "clusters"
            - "clusters"
            applications:
            - "applications"
            - "applications"
            namespaces:
            - "namespaces"
            - "namespaces"
        status:
          jwtTokensByRole:
            key:
              items:
              - id: "id"
                exp: "exp"
                iat: "iat"
              - id: "id"
                exp: "exp"
                iat: "iat"
      clusters:
      - server: "server"
        serverVersion: "serverVersion"
        connectionState:
          message: "message"
          attemptedAt:
            seconds: "seconds"
            nanos: 0
          status: "status"
        annotations:
          key: "annotations"
        project: "project"
        labels:
          key: "labels"
        refreshRequestedAt:
          seconds: "seconds"
          nanos: 0
        clusterResources: true
        name: "name"
        shard: "shard"
        config:
          awsAuthConfig:
            roleARN: "roleARN"
            clusterName: "clusterName"
          password: "password"
          tlsClientConfig:
            keyData: "keyData"
            insecure: true
            serverName: "serverName"
            certData: "certData"
            caData: "caData"
          bearerToken: "bearerToken"
          execProviderConfig:
            args:
            - "args"
            - "args"
            apiVersion: "apiVersion"
            env:
              key: "env"
            installHint: "installHint"
            command: "command"
          username: "username"
        info:
          serverVersion: "serverVersion"
          apiVersions:
          - "apiVersions"
          - "apiVersions"
          connectionState:
            message: "message"
            attemptedAt:
              seconds: "seconds"
              nanos: 0
            status: "status"
          cacheInfo:
            apisCount: "apisCount"
            lastCacheSyncTime:
              seconds: "seconds"
              nanos: 0
            resourcesCount: "resourcesCount"
          applicationsCount: "applicationsCount"
        namespaces:
        - "namespaces"
        - "namespaces"
      - server: "server"
        serverVersion: "serverVersion"
        connectionState:
          message: "message"
          attemptedAt:
            seconds: "seconds"
            nanos: 0
          status: "status"
        annotations:
          key: "annotations"
        project: "project"
        labels:
          key: "labels"
        refreshRequestedAt:
          seconds: "seconds"
          nanos: 0
        clusterResources: true
        name: "name"
        shard: "shard"
        config:
          awsAuthConfig:
            roleARN: "roleARN"
            clusterName: "clusterName"
          password: "password"
          tlsClientConfig:
            keyData: "keyData"
            insecure: true
            serverName: "serverName"
            certData: "certData"
            caData: "caData"
          bearerToken: "bearerToken"
          execProviderConfig:
            args:
            - "args"
            - "args"
            apiVersion: "apiVersion"
            env:
              key: "env"
            installHint: "installHint"
            command: "command"
          username: "username"
        info:
          serverVersion: "serverVersion"
          apiVersions:
          - "apiVersions"
          - "apiVersions"
          connectionState:
            message: "message"
            attemptedAt:
              seconds: "seconds"
              nanos: 0
            status: "status"
          cacheInfo:
            apisCount: "apisCount"
            lastCacheSyncTime:
              seconds: "seconds"
              nanos: 0
            resourcesCount: "resourcesCount"
          applicationsCount: "applicationsCount"
        namespaces:
        - "namespaces"
        - "namespaces"
  projectEmptyResponse:
    type: "object"
  projectGlobalProjectsResponse:
    type: "object"
    properties:
      items:
        type: "array"
        items:
          $ref: "#/definitions/v1alpha1AppProject"
    example:
      items:
      - metadata:
          generation: "generation"
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          deletionTimestamp:
            seconds: "seconds"
            nanos: 0
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: "deletionGracePeriodSeconds"
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1:
              Raw: "Raw"
            manager: "manager"
            subresource: "subresource"
            time:
              seconds: "seconds"
              nanos: 0
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1:
              Raw: "Raw"
            manager: "manager"
            subresource: "subresource"
            time:
              seconds: "seconds"
              nanos: 0
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp:
            seconds: "seconds"
            nanos: 0
          name: "name"
          namespace: "namespace"
        spec:
          sourceRepos:
          - "sourceRepos"
          - "sourceRepos"
          orphanedResources:
            warn: true
            ignore:
            - kind: "kind"
              name: "name"
              group: "group"
            - kind: "kind"
              name: "name"
              group: "group"
          destinations:
          - server: "server"
            name: "name"
            namespace: "namespace"
          - server: "server"
            name: "name"
            namespace: "namespace"
          roles:
          - name: "name"
            policies:
            - "policies"
            - "policies"
            description: "description"
            groups:
            - "groups"
            - "groups"
            jwtTokens:
            - id: "id"
              exp: "exp"
              iat: "iat"
            - id: "id"
              exp: "exp"
              iat: "iat"
          - name: "name"
            policies:
            - "policies"
            - "policies"
            description: "description"
            groups:
            - "groups"
            - "groups"
            jwtTokens:
            - id: "id"
              exp: "exp"
              iat: "iat"
            - id: "id"
              exp: "exp"
              iat: "iat"
          clusterResourceWhitelist:
          - kind: "kind"
            group: "group"
          - kind: "kind"
            group: "group"
          namespaceResourceBlacklist:
          - kind: "kind"
            group: "group"
          - kind: "kind"
            group: "group"
          description: "description"
          clusterResourceBlacklist:
          - kind: "kind"
            group: "group"
          - kind: "kind"
            group: "group"
          namespaceResourceWhitelist:
          - kind: "kind"
            group: "group"
          - kind: "kind"
            group: "group"
          signatureKeys:
          - keyID: "keyID"
          - keyID: "keyID"
          syncWindows:
          - duration: "duration"
            schedule: "schedule"
            kind: "kind"
            timeZone: "timeZone"
            manualSync: true
            clusters:
            - "clusters"
            - "clusters"
            applications:
            - "applications"
            - "applications"
            namespaces:
            - "namespaces"
            - "namespaces"
          - duration: "duration"
            schedule: "schedule"
            kind: "kind"
            timeZone: "timeZone"
            manualSync: true
            clusters:
            - "clusters"
            - "clusters"
            applications:
            - "applications"
            - "applications"
            namespaces:
            - "namespaces"
            - "namespaces"
        status:
          jwtTokensByRole:
            key:
              items:
              - id: "id"
                exp: "exp"
                iat: "iat"
              - id: "id"
                exp: "exp"
                iat: "iat"
      - metadata:
          generation: "generation"
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          deletionTimestamp:
            seconds: "seconds"
            nanos: 0
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: "deletionGracePeriodSeconds"
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1:
              Raw: "Raw"
            manager: "manager"
            subresource: "subresource"
            time:
              seconds: "seconds"
              nanos: 0
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1:
              Raw: "Raw"
            manager: "manager"
            subresource: "subresource"
            time:
              seconds: "seconds"
              nanos: 0
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp:
            seconds: "seconds"
            nanos: 0
          name: "name"
          namespace: "namespace"
        spec:
          sourceRepos:
          - "sourceRepos"
          - "sourceRepos"
          orphanedResources:
            warn: true
            ignore:
            - kind: "kind"
              name: "name"
              group: "group"
            - kind: "kind"
              name: "name"
              group: "group"
          destinations:
          - server: "server"
            name: "name"
            namespace: "namespace"
          - server: "server"
            name: "name"
            namespace: "namespace"
          roles:
          - name: "name"
            policies:
            - "policies"
            - "policies"
            description: "description"
            groups:
            - "groups"
            - "groups"
            jwtTokens:
            - id: "id"
              exp: "exp"
              iat: "iat"
            - id: "id"
              exp: "exp"
              iat: "iat"
          - name: "name"
            policies:
            - "policies"
            - "policies"
            description: "description"
            groups:
            - "groups"
            - "groups"
            jwtTokens:
            - id: "id"
              exp: "exp"
              iat: "iat"
            - id: "id"
              exp: "exp"
              iat: "iat"
          clusterResourceWhitelist:
          - kind: "kind"
            group: "group"
          - kind: "kind"
            group: "group"
          namespaceResourceBlacklist:
          - kind: "kind"
            group: "group"
          - kind: "kind"
            group: "group"
          description: "description"
          clusterResourceBlacklist:
          - kind: "kind"
            group: "group"
          - kind: "kind"
            group: "group"
          namespaceResourceWhitelist:
          - kind: "kind"
            group: "group"
          - kind: "kind"
            group: "group"
          signatureKeys:
          - keyID: "keyID"
          - keyID: "keyID"
          syncWindows:
          - duration: "duration"
            schedule: "schedule"
            kind: "kind"
            timeZone: "timeZone"
            manualSync: true
            clusters:
            - "clusters"
            - "clusters"
            applications:
            - "applications"
            - "applications"
            namespaces:
            - "namespaces"
            - "namespaces"
          - duration: "duration"
            schedule: "schedule"
            kind: "kind"
            timeZone: "timeZone"
            manualSync: true
            clusters:
            - "clusters"
            - "clusters"
            applications:
            - "applications"
            - "applications"
            namespaces:
            - "namespaces"
            - "namespaces"
        status:
          jwtTokensByRole:
            key:
              items:
              - id: "id"
                exp: "exp"
                iat: "iat"
              - id: "id"
                exp: "exp"
                iat: "iat"
  projectProjectCreateRequest:
    type: "object"
    properties:
      project:
        $ref: "#/definitions/v1alpha1AppProject"
      upsert:
        type: "boolean"
    description: "ProjectCreateRequest defines project creation parameters."
  projectProjectTokenCreateRequest:
    type: "object"
    properties:
      description:
        type: "string"
      expiresIn:
        type: "string"
        format: "int64"
        title: "expiresIn represents a duration in seconds"
      id:
        type: "string"
      project:
        type: "string"
      role:
        type: "string"
    description: "ProjectTokenCreateRequest defines project token creation parameters."
  projectProjectTokenResponse:
    type: "object"
    properties:
      token:
        type: "string"
    description: "ProjectTokenResponse wraps the created token or returns an empty\
      \ string if deleted."
    example:
      token: "token"
  projectProjectUpdateRequest:
    type: "object"
    properties:
      project:
        $ref: "#/definitions/v1alpha1AppProject"
  projectSyncWindowsResponse:
    type: "object"
    properties:
      windows:
        type: "array"
        items:
          $ref: "#/definitions/v1alpha1SyncWindow"
    example:
      windows:
      - duration: "duration"
        schedule: "schedule"
        kind: "kind"
        timeZone: "timeZone"
        manualSync: true
        clusters:
        - "clusters"
        - "clusters"
        applications:
        - "applications"
        - "applications"
        namespaces:
        - "namespaces"
        - "namespaces"
      - duration: "duration"
        schedule: "schedule"
        kind: "kind"
        timeZone: "timeZone"
        manualSync: true
        clusters:
        - "clusters"
        - "clusters"
        applications:
        - "applications"
        - "applications"
        namespaces:
        - "namespaces"
        - "namespaces"
  protobufAny:
    type: "object"
    properties:
      type_url:
        type: "string"
      value:
        type: "string"
        format: "byte"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
    example:
      value: "value"
      type_url: "type_url"
  repocredsRepoCredsResponse:
    type: "object"
    title: "RepoCredsResponse is a response to most repository credentials requests"
  repositoryAppInfo:
    type: "object"
    properties:
      path:
        type: "string"
      type:
        type: "string"
    title: "AppInfo contains application type and app file path"
    example:
      path: "path"
      type: "type"
  repositoryDirectoryAppSpec:
    type: "object"
    title: "DirectoryAppSpec contains directory"
  repositoryHelmAppSpec:
    type: "object"
    properties:
      fileParameters:
        type: "array"
        title: "helm file parameters"
        items:
          $ref: "#/definitions/v1alpha1HelmFileParameter"
      name:
        type: "string"
      parameters:
        type: "array"
        title: "the output of `helm inspect values`"
        items:
          $ref: "#/definitions/v1alpha1HelmParameter"
      valueFiles:
        type: "array"
        items:
          type: "string"
      values:
        type: "string"
        title: "the contents of values.yaml"
    title: "HelmAppSpec contains helm app name  in source repo"
    example:
      valueFiles:
      - "valueFiles"
      - "valueFiles"
      fileParameters:
      - path: "path"
        name: "name"
      - path: "path"
        name: "name"
      values: "values"
      name: "name"
      parameters:
      - forceString: true
        name: "name"
        value: "value"
      - forceString: true
        name: "name"
        value: "value"
  repositoryHelmChart:
    type: "object"
    properties:
      name:
        type: "string"
      versions:
        type: "array"
        items:
          type: "string"
    example:
      versions:
      - "versions"
      - "versions"
      name: "name"
  repositoryHelmChartsResponse:
    type: "object"
    properties:
      items:
        type: "array"
        items:
          $ref: "#/definitions/repositoryHelmChart"
    example:
      items:
      - versions:
        - "versions"
        - "versions"
        name: "name"
      - versions:
        - "versions"
        - "versions"
        name: "name"
  repositoryKsonnetAppSpec:
    type: "object"
    properties:
      environments:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/repositoryKsonnetEnvironment"
      name:
        type: "string"
      parameters:
        type: "array"
        items:
          $ref: "#/definitions/v1alpha1KsonnetParameter"
    title: "KsonnetAppSpec contains Ksonnet app response\nThis roughly reflects: ksonnet/ksonnet/metadata/app/schema.go"
    example:
      environments:
        key:
          destination:
            server: "server"
            namespace: "namespace"
          name: "name"
          k8sVersion: "k8sVersion"
      name: "name"
      parameters:
      - component: "component"
        name: "name"
        value: "value"
      - component: "component"
        name: "name"
        value: "value"
  repositoryKsonnetEnvironment:
    type: "object"
    properties:
      destination:
        $ref: "#/definitions/repositoryKsonnetEnvironmentDestination"
      k8sVersion:
        type: "string"
        description: "KubernetesVersion is the kubernetes version the targeted cluster\
          \ is running on."
      name:
        type: "string"
        title: "Name is the user defined name of an environment"
    example:
      destination:
        server: "server"
        namespace: "namespace"
      name: "name"
      k8sVersion: "k8sVersion"
  repositoryKsonnetEnvironmentDestination:
    type: "object"
    properties:
      namespace:
        type: "string"
        title: "Namespace is the namespace of the Kubernetes server that targets should\
          \ be deployed to"
      server:
        type: "string"
        description: "Server is the Kubernetes server that the cluster is running\
          \ on."
    example:
      server: "server"
      namespace: "namespace"
  repositoryKustomizeAppSpec:
    type: "object"
    properties:
      images:
        type: "array"
        description: "images is a list of available images."
        items:
          type: "string"
    title: "KustomizeAppSpec contains kustomize images"
    example:
      images:
      - "images"
      - "images"
  repositoryManifestResponse:
    type: "object"
    properties:
      manifests:
        type: "array"
        items:
          type: "string"
      namespace:
        type: "string"
      revision:
        type: "string"
        title: "resolved revision"
      server:
        type: "string"
      sourceType:
        type: "string"
      verifyResult:
        type: "string"
        title: "Raw response of git verify-commit operation (always the empty string\
          \ for Helm)"
    example:
      server: "server"
      sourceType: "sourceType"
      manifests:
      - "manifests"
      - "manifests"
      namespace: "namespace"
      verifyResult: "verifyResult"
      revision: "revision"
  repositoryRefs:
    type: "object"
    properties:
      branches:
        type: "array"
        items:
          type: "string"
      tags:
        type: "array"
        items:
          type: "string"
    title: "A subset of the repository's named refs"
    example:
      branches:
      - "branches"
      - "branches"
      tags:
      - "tags"
      - "tags"
  repositoryRepoAppDetailsQuery:
    type: "object"
    properties:
      appName:
        type: "string"
      source:
        $ref: "#/definitions/v1alpha1ApplicationSource"
    title: "RepoAppDetailsQuery contains query information for app details request"
  repositoryRepoAppDetailsResponse:
    type: "object"
    properties:
      directory:
        $ref: "#/definitions/repositoryDirectoryAppSpec"
      helm:
        $ref: "#/definitions/repositoryHelmAppSpec"
      ksonnet:
        $ref: "#/definitions/repositoryKsonnetAppSpec"
      kustomize:
        $ref: "#/definitions/repositoryKustomizeAppSpec"
      type:
        type: "string"
    title: "RepoAppDetailsResponse application details"
    example:
      ksonnet:
        environments:
          key:
            destination:
              server: "server"
              namespace: "namespace"
            name: "name"
            k8sVersion: "k8sVersion"
        name: "name"
        parameters:
        - component: "component"
          name: "name"
          value: "value"
        - component: "component"
          name: "name"
          value: "value"
      kustomize:
        images:
        - "images"
        - "images"
      type: "type"
      directory: {}
      helm:
        valueFiles:
        - "valueFiles"
        - "valueFiles"
        fileParameters:
        - path: "path"
          name: "name"
        - path: "path"
          name: "name"
        values: "values"
        name: "name"
        parameters:
        - forceString: true
          name: "name"
          value: "value"
        - forceString: true
          name: "name"
          value: "value"
  repositoryRepoAppsResponse:
    type: "object"
    properties:
      items:
        type: "array"
        items:
          $ref: "#/definitions/repositoryAppInfo"
    title: "RepoAppsResponse contains applications of specified repository"
    example:
      items:
      - path: "path"
        type: "type"
      - path: "path"
        type: "type"
  repositoryRepoResponse:
    type: "object"
  runtimeError:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      details:
        type: "array"
        items:
          $ref: "#/definitions/protobufAny"
      error:
        type: "string"
      message:
        type: "string"
  runtimeStreamError:
    type: "object"
    properties:
      details:
        type: "array"
        items:
          $ref: "#/definitions/protobufAny"
      grpc_code:
        type: "integer"
        format: "int32"
      http_code:
        type: "integer"
        format: "int32"
      http_status:
        type: "string"
      message:
        type: "string"
    example:
      http_code: 6
      details:
      - value: "value"
        type_url: "type_url"
      - value: "value"
        type_url: "type_url"
      http_status: "http_status"
      message: "message"
      grpc_code: 0
  sessionGetUserInfoResponse:
    type: "object"
    properties:
      groups:
        type: "array"
        items:
          type: "string"
      iss:
        type: "string"
      loggedIn:
        type: "boolean"
      username:
        type: "string"
    title: "The current user's userInfo info"
    example:
      loggedIn: true
      iss: "iss"
      groups:
      - "groups"
      - "groups"
      username: "username"
  sessionSessionCreateRequest:
    type: "object"
    properties:
      password:
        type: "string"
      token:
        type: "string"
      username:
        type: "string"
    description: "SessionCreateRequest is for logging in."
  sessionSessionResponse:
    type: "object"
    properties:
      token:
        type: "string"
    description: "SessionResponse wraps the created token or returns an empty string\
      \ if deleted."
    example:
      token: "token"
  v1Event:
    type: "object"
    properties:
      action:
        type: "string"
        title: "What action was taken/failed regarding to the Regarding object.\n\
          +optional"
      count:
        type: "integer"
        format: "int32"
        title: "The number of times this event has occurred.\n+optional"
      eventTime:
        $ref: "#/definitions/v1MicroTime"
      firstTimestamp:
        $ref: "#/definitions/v1Time"
      involvedObject:
        $ref: "#/definitions/v1ObjectReference"
      lastTimestamp:
        $ref: "#/definitions/v1Time"
      message:
        type: "string"
        title: "A human-readable description of the status of this operation.\nTODO:\
          \ decide on maximum length.\n+optional"
      metadata:
        $ref: "#/definitions/v1ObjectMeta"
      reason:
        type: "string"
        title: "This should be a short, machine understandable string that gives the\
          \ reason\nfor the transition into the object's current status.\nTODO: provide\
          \ exact specification for format.\n+optional"
      related:
        $ref: "#/definitions/v1ObjectReference"
      reportingComponent:
        type: "string"
        title: "Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.\n\
          +optional"
      reportingInstance:
        type: "string"
        title: "ID of the controller instance, e.g. `kubelet-xyzf`.\n+optional"
      series:
        $ref: "#/definitions/v1EventSeries"
      source:
        $ref: "#/definitions/v1EventSource"
      type:
        type: "string"
        title: "Type of this event (Normal, Warning), new types could be added in\
          \ the future\n+optional"
    description: "Event is a report of an event somewhere in the cluster.  Events\n\
      have a limited retention time and triggers and messages may evolve\nwith time.\
      \  Event consumers should not rely on the timing of an event\nwith a given Reason\
      \ reflecting a consistent underlying trigger, or the\ncontinued existence of\
      \ events with that Reason.  Events should be\ntreated as informative, best-effort,\
      \ supplemental data."
    example:
      reason: "reason"
      metadata:
        generation: "generation"
        finalizers:
        - "finalizers"
        - "finalizers"
        resourceVersion: "resourceVersion"
        annotations:
          key: "annotations"
        generateName: "generateName"
        deletionTimestamp:
          seconds: "seconds"
          nanos: 0
        labels:
          key: "labels"
        ownerReferences:
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        selfLink: "selfLink"
        deletionGracePeriodSeconds: "deletionGracePeriodSeconds"
        uid: "uid"
        managedFields:
        - apiVersion: "apiVersion"
          fieldsV1:
            Raw: "Raw"
          manager: "manager"
          subresource: "subresource"
          time:
            seconds: "seconds"
            nanos: 0
          operation: "operation"
          fieldsType: "fieldsType"
        - apiVersion: "apiVersion"
          fieldsV1:
            Raw: "Raw"
          manager: "manager"
          subresource: "subresource"
          time:
            seconds: "seconds"
            nanos: 0
          operation: "operation"
          fieldsType: "fieldsType"
        clusterName: "clusterName"
        creationTimestamp:
          seconds: "seconds"
          nanos: 0
        name: "name"
        namespace: "namespace"
      involvedObject:
        uid: "uid"
        apiVersion: "apiVersion"
        kind: "kind"
        resourceVersion: "resourceVersion"
        fieldPath: "fieldPath"
        name: "name"
        namespace: "namespace"
      reportingInstance: "reportingInstance"
      count: 0
      source:
        component: "component"
        host: "host"
      message: "message"
      type: "type"
      reportingComponent: "reportingComponent"
      firstTimestamp:
        seconds: "seconds"
        nanos: 0
      related:
        uid: "uid"
        apiVersion: "apiVersion"
        kind: "kind"
        resourceVersion: "resourceVersion"
        fieldPath: "fieldPath"
        name: "name"
        namespace: "namespace"
      lastTimestamp:
        seconds: "seconds"
        nanos: 0
      series:
        count: 1
        lastObservedTime:
          seconds: "seconds"
          nanos: 6
      eventTime:
        seconds: "seconds"
        nanos: 6
      action: "action"
  v1EventList:
    type: "object"
    properties:
      items:
        type: "array"
        title: "List of events"
        items:
          $ref: "#/definitions/v1Event"
      metadata:
        $ref: "#/definitions/v1ListMeta"
    description: "EventList is a list of events."
    example:
      metadata:
        remainingItemCount: "remainingItemCount"
        continue: "continue"
        resourceVersion: "resourceVersion"
        selfLink: "selfLink"
      items:
      - reason: "reason"
        metadata:
          generation: "generation"
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          deletionTimestamp:
            seconds: "seconds"
            nanos: 0
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: "deletionGracePeriodSeconds"
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1:
              Raw: "Raw"
            manager: "manager"
            subresource: "subresource"
            time:
              seconds: "seconds"
              nanos: 0
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1:
              Raw: "Raw"
            manager: "manager"
            subresource: "subresource"
            time:
              seconds: "seconds"
              nanos: 0
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp:
            seconds: "seconds"
            nanos: 0
          name: "name"
          namespace: "namespace"
        involvedObject:
          uid: "uid"
          apiVersion: "apiVersion"
          kind: "kind"
          resourceVersion: "resourceVersion"
          fieldPath: "fieldPath"
          name: "name"
          namespace: "namespace"
        reportingInstance: "reportingInstance"
        count: 0
        source:
          component: "component"
          host: "host"
        message: "message"
        type: "type"
        reportingComponent: "reportingComponent"
        firstTimestamp:
          seconds: "seconds"
          nanos: 0
        related:
          uid: "uid"
          apiVersion: "apiVersion"
          kind: "kind"
          resourceVersion: "resourceVersion"
          fieldPath: "fieldPath"
          name: "name"
          namespace: "namespace"
        lastTimestamp:
          seconds: "seconds"
          nanos: 0
        series:
          count: 1
          lastObservedTime:
            seconds: "seconds"
            nanos: 6
        eventTime:
          seconds: "seconds"
          nanos: 6
        action: "action"
      - reason: "reason"
        metadata:
          generation: "generation"
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          deletionTimestamp:
            seconds: "seconds"
            nanos: 0
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: "deletionGracePeriodSeconds"
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1:
              Raw: "Raw"
            manager: "manager"
            subresource: "subresource"
            time:
              seconds: "seconds"
              nanos: 0
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1:
              Raw: "Raw"
            manager: "manager"
            subresource: "subresource"
            time:
              seconds: "seconds"
              nanos: 0
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp:
            seconds: "seconds"
            nanos: 0
          name: "name"
          namespace: "namespace"
        involvedObject:
          uid: "uid"
          apiVersion: "apiVersion"
          kind: "kind"
          resourceVersion: "resourceVersion"
          fieldPath: "fieldPath"
          name: "name"
          namespace: "namespace"
        reportingInstance: "reportingInstance"
        count: 0
        source:
          component: "component"
          host: "host"
        message: "message"
        type: "type"
        reportingComponent: "reportingComponent"
        firstTimestamp:
          seconds: "seconds"
          nanos: 0
        related:
          uid: "uid"
          apiVersion: "apiVersion"
          kind: "kind"
          resourceVersion: "resourceVersion"
          fieldPath: "fieldPath"
          name: "name"
          namespace: "namespace"
        lastTimestamp:
          seconds: "seconds"
          nanos: 0
        series:
          count: 1
          lastObservedTime:
            seconds: "seconds"
            nanos: 6
        eventTime:
          seconds: "seconds"
          nanos: 6
        action: "action"
  v1EventSeries:
    type: "object"
    properties:
      count:
        type: "integer"
        format: "int32"
        title: "Number of occurrences in this series up to the last heartbeat time"
      lastObservedTime:
        $ref: "#/definitions/v1MicroTime"
    description: "EventSeries contain information on series of events, i.e. thing\
      \ that was/is happening\ncontinuously for some time."
    example:
      count: 1
      lastObservedTime:
        seconds: "seconds"
        nanos: 6
  v1EventSource:
    type: "object"
    properties:
      component:
        type: "string"
        title: "Component from which the event is generated.\n+optional"
      host:
        type: "string"
        title: "Node name on which the event is generated.\n+optional"
    description: "EventSource contains information for an event."
    example:
      component: "component"
      host: "host"
  v1FieldsV1:
    type: "object"
    properties:
      Raw:
        type: "string"
        format: "byte"
        description: "Raw is the underlying serialization of this object."
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
    description: "FieldsV1 stores a set of fields in a data structure like a Trie,\
      \ in JSON format.\n\nEach key is either a '.' representing the field itself,\
      \ and will always map to an empty set,\nor a string representing a sub-field\
      \ or item. The string will follow one of these four formats:\n'f:<name>', where\
      \ <name> is the name of a field in a struct, or key in a map\n'v:<value>', where\
      \ <value> is the exact json formatted value of a list item\n'i:<index>', where\
      \ <index> is position of a item in a list\n'k:<keys>', where <keys> is a map\
      \ of  a list item's key fields to their unique values\nIf a key maps to an empty\
      \ Fields value, the field that key represents is part of the set.\n\nThe exact\
      \ format is defined in sigs.k8s.io/structured-merge-diff\n+protobuf.options.(gogoproto.goproto_stringer)=false"
    example:
      Raw: "Raw"
  v1GroupKind:
    type: "object"
    properties:
      group:
        type: "string"
      kind:
        type: "string"
    title: "GroupKind specifies a Group and a Kind, but does not force a version.\
      \  This is useful for identifying\nconcepts during lookup stages without having\
      \ partially valid types"
    description: "+protobuf.options.(gogoproto.goproto_stringer)=false"
    example:
      kind: "kind"
      group: "group"
  v1ListMeta:
    type: "object"
    properties:
      continue:
        type: "string"
        description: "continue may be set if the user set a limit on the number of\
          \ items returned, and indicates that\nthe server has more data available.\
          \ The value is opaque and may be used to issue another request\nto the endpoint\
          \ that served this list to retrieve the next set of available objects. Continuing\
          \ a\nconsistent list may not be possible if the server configuration has\
          \ changed or more than a few\nminutes have passed. The resourceVersion field\
          \ returned when using this continue value will be\nidentical to the value\
          \ in the first response, unless you have received this token from an error\n\
          message."
      remainingItemCount:
        type: "string"
        format: "int64"
        title: "remainingItemCount is the number of subsequent items in the list which\
          \ are not included in this\nlist response. If the list request contained\
          \ label or field selectors, then the number of\nremaining items is unknown\
          \ and the field will be left unset and omitted during serialization.\nIf\
          \ the list is complete (either because it is not chunking or because this\
          \ is the last chunk),\nthen there are no more remaining items and this field\
          \ will be left unset and omitted during\nserialization.\nServers older than\
          \ v1.15 do not set this field.\nThe intended use of the remainingItemCount\
          \ is *estimating* the size of a collection. Clients\nshould not rely on\
          \ the remainingItemCount to be set or to be exact.\n+optional"
      resourceVersion:
        type: "string"
        title: "String that identifies the server's internal version of this object\
          \ that\ncan be used by clients to determine when objects have changed.\n\
          Value must be treated as opaque by clients and passed unmodified back to\
          \ the server.\nPopulated by the system.\nRead-only.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n\
          +optional"
      selfLink:
        type: "string"
        description: "selfLink is a URL representing this object.\nPopulated by the\
          \ system.\nRead-only.\n\nDEPRECATED\nKubernetes will stop propagating this\
          \ field in 1.20 release and the field is planned\nto be removed in 1.21\
          \ release.\n+optional"
    description: "ListMeta describes metadata that synthetic resources must have,\
      \ including lists and\nvarious status objects. A resource may have only one\
      \ of {ObjectMeta, ListMeta}."
    example:
      remainingItemCount: "remainingItemCount"
      continue: "continue"
      resourceVersion: "resourceVersion"
      selfLink: "selfLink"
  v1LoadBalancerIngress:
    type: "object"
    properties:
      hostname:
        type: "string"
        title: "Hostname is set for load-balancer ingress points that are DNS based\n\
          (typically AWS load-balancers)\n+optional"
      ip:
        type: "string"
        title: "IP is set for load-balancer ingress points that are IP based\n(typically\
          \ GCE or OpenStack load-balancers)\n+optional"
      ports:
        type: "array"
        title: "Ports is a list of records of service ports\nIf used, every port defined\
          \ in the service should have an entry in it\n+listType=atomic\n+optional"
        items:
          $ref: "#/definitions/v1PortStatus"
    description: "LoadBalancerIngress represents the status of a load-balancer ingress\
      \ point:\ntraffic intended for the service should be sent to an ingress point."
    example:
      hostname: "hostname"
      ip: "ip"
      ports:
      - protocol: "protocol"
        port: 0
        error: "error"
      - protocol: "protocol"
        port: 0
        error: "error"
  v1ManagedFieldsEntry:
    type: "object"
    properties:
      apiVersion:
        type: "string"
        description: "APIVersion defines the version of this resource that this field\
          \ set\napplies to. The format is \"group/version\" just like the top-level\n\
          APIVersion field. It is necessary to track the version of a field\nset because\
          \ it cannot be automatically converted."
      fieldsType:
        type: "string"
        title: "FieldsType is the discriminator for the different fields format and\
          \ version.\nThere is currently only one possible value: \"FieldsV1\""
      fieldsV1:
        $ref: "#/definitions/v1FieldsV1"
      manager:
        type: "string"
        description: "Manager is an identifier of the workflow managing these fields."
      operation:
        type: "string"
        description: "Operation is the type of operation which lead to this ManagedFieldsEntry\
          \ being created.\nThe only valid values for this field are 'Apply' and 'Update'."
      subresource:
        type: "string"
        description: "Subresource is the name of the subresource used to update that\
          \ object, or\nempty string if the object was updated through the main resource.\
          \ The\nvalue of this field is used to distinguish between managers, even\
          \ if they\nshare the same name. For example, a status update will be distinct\
          \ from a\nregular update using the same manager name.\nNote that the APIVersion\
          \ field is not related to the Subresource field and\nit always corresponds\
          \ to the version of the main resource."
      time:
        $ref: "#/definitions/v1Time"
    description: "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version\
      \ of the resource\nthat the fieldset applies to."
    example:
      apiVersion: "apiVersion"
      fieldsV1:
        Raw: "Raw"
      manager: "manager"
      subresource: "subresource"
      time:
        seconds: "seconds"
        nanos: 0
      operation: "operation"
      fieldsType: "fieldsType"
  v1MicroTime:
    type: "object"
    properties:
      nanos:
        type: "integer"
        format: "int32"
        description: "Non-negative fractions of a second at nanosecond resolution.\
          \ Negative\nsecond values with fractions must still have non-negative nanos\
          \ values\nthat count forward in time. Must be from 0 to 999,999,999\ninclusive.\
          \ This field may be limited in precision depending on context."
      seconds:
        type: "string"
        format: "int64"
        description: "Represents seconds of UTC time since Unix epoch\n1970-01-01T00:00:00Z.\
          \ Must be from 0001-01-01T00:00:00Z to\n9999-12-31T23:59:59Z inclusive."
    description: "MicroTime is version of Time with microsecond level precision.\n\
      \n+protobuf.options.marshal=false\n+protobuf.as=Timestamp\n+protobuf.options.(gogoproto.goproto_stringer)=false"
    example:
      seconds: "seconds"
      nanos: 6
  v1NodeSystemInfo:
    type: "object"
    properties:
      architecture:
        type: "string"
        title: "The Architecture reported by the node"
      bootID:
        type: "string"
        description: "Boot ID reported by the node."
      containerRuntimeVersion:
        type: "string"
        description: "ContainerRuntime Version reported by the node through runtime\
          \ remote API (e.g. docker://1.5.0)."
      kernelVersion:
        type: "string"
        description: "Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64)."
      kubeProxyVersion:
        type: "string"
        description: "KubeProxy Version reported by the node."
      kubeletVersion:
        type: "string"
        description: "Kubelet Version reported by the node."
      machineID:
        type: "string"
        title: "MachineID reported by the node. For unique machine identification\n\
          in the cluster this field is preferred. Learn more from man(5)\nmachine-id:\
          \ http://man7.org/linux/man-pages/man5/machine-id.5.html"
      operatingSystem:
        type: "string"
        title: "The Operating System reported by the node"
      osImage:
        type: "string"
        description: "OS Image reported by the node from /etc/os-release (e.g. Debian\
          \ GNU/Linux 7 (wheezy))."
      systemUUID:
        type: "string"
        title: "SystemUUID reported by the node. For unique machine identification\n\
          MachineID is preferred. This field is specific to Red Hat hosts\nhttps://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid"
    description: "NodeSystemInfo is a set of ids/uuids to uniquely identify the node."
    example:
      machineID: "machineID"
      bootID: "bootID"
      containerRuntimeVersion: "containerRuntimeVersion"
      kernelVersion: "kernelVersion"
      kubeletVersion: "kubeletVersion"
      systemUUID: "systemUUID"
      kubeProxyVersion: "kubeProxyVersion"
      operatingSystem: "operatingSystem"
      architecture: "architecture"
      osImage: "osImage"
  v1ObjectMeta:
    type: "object"
    properties:
      annotations:
        type: "object"
        title: "Annotations is an unstructured key value map stored with a resource\
          \ that may be\nset by external tools to store and retrieve arbitrary metadata.\
          \ They are not\nqueryable and should be preserved when modifying objects.\n\
          More info: http://kubernetes.io/docs/user-guide/annotations\n+optional"
        additionalProperties:
          type: "string"
      clusterName:
        type: "string"
        title: "The name of the cluster which the object belongs to.\nThis is used\
          \ to distinguish resources with same name and namespace in different clusters.\n\
          This field is not set anywhere right now and apiserver is going to ignore\
          \ it if set in create or update request.\n+optional"
      creationTimestamp:
        $ref: "#/definitions/v1Time"
      deletionGracePeriodSeconds:
        type: "string"
        format: "int64"
        title: "Number of seconds allowed for this object to gracefully terminate\
          \ before\nit will be removed from the system. Only set when deletionTimestamp\
          \ is also set.\nMay only be shortened.\nRead-only.\n+optional"
      deletionTimestamp:
        $ref: "#/definitions/v1Time"
      finalizers:
        type: "array"
        title: "Must be empty before the object is deleted from the registry. Each\
          \ entry\nis an identifier for the responsible component that will remove\
          \ the entry\nfrom the list. If the deletionTimestamp of the object is non-nil,\
          \ entries\nin this list can only be removed.\nFinalizers may be processed\
          \ and removed in any order.  Order is NOT enforced\nbecause it introduces\
          \ significant risk of stuck finalizers.\nfinalizers is a shared field, any\
          \ actor with permission can reorder it.\nIf the finalizer list is processed\
          \ in order, then this can lead to a situation\nin which the component responsible\
          \ for the first finalizer in the list is\nwaiting for a signal (field value,\
          \ external system, or other) produced by a\ncomponent responsible for a\
          \ finalizer later in the list, resulting in a deadlock.\nWithout enforced\
          \ ordering finalizers are free to order amongst themselves and\nare not\
          \ vulnerable to ordering changes in the list.\n+optional\n+patchStrategy=merge"
        items:
          type: "string"
      generateName:
        type: "string"
        description: "GenerateName is an optional prefix, used by the server, to generate\
          \ a unique\nname ONLY IF the Name field has not been provided.\nIf this\
          \ field is used, the name returned to the client will be different\nthan\
          \ the name passed. This value will also be combined with a unique suffix.\n\
          The provided value has the same validation rules as the Name field,\nand\
          \ may be truncated by the length of the suffix required to make the value\n\
          unique on the server.\n\nIf this field is specified and the generated name\
          \ exists, the server will\nNOT return a 409 - instead, it will either return\
          \ 201 Created or 500 with Reason\nServerTimeout indicating a unique name\
          \ could not be found in the time allotted, and the client\nshould retry\
          \ (optionally after the time indicated in the Retry-After header).\n\nApplied\
          \ only if Name is not specified.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\n\
          +optional"
      generation:
        type: "string"
        format: "int64"
        title: "A sequence number representing a specific generation of the desired\
          \ state.\nPopulated by the system. Read-only.\n+optional"
      labels:
        type: "object"
        title: "Map of string keys and values that can be used to organize and categorize\n\
          (scope and select) objects. May match selectors of replication controllers\n\
          and services.\nMore info: http://kubernetes.io/docs/user-guide/labels\n\
          +optional"
        additionalProperties:
          type: "string"
      managedFields:
        type: "array"
        description: "ManagedFields maps workflow-id and version to the set of fields\n\
          that are managed by that workflow. This is mostly for internal\nhousekeeping,\
          \ and users typically shouldn't need to set or\nunderstand this field. A\
          \ workflow can be the user's name, a\ncontroller's name, or the name of\
          \ a specific apply path like\n\"ci-cd\". The set of fields is always in\
          \ the version that the\nworkflow used when modifying the object.\n\n+optional"
        items:
          $ref: "#/definitions/v1ManagedFieldsEntry"
      name:
        type: "string"
        title: "Name must be unique within a namespace. Is required when creating\
          \ resources, although\nsome resources may allow a client to request the\
          \ generation of an appropriate name\nautomatically. Name is primarily intended\
          \ for creation idempotence and configuration\ndefinition.\nCannot be updated.\n\
          More info: http://kubernetes.io/docs/user-guide/identifiers#names\n+optional"
      namespace:
        type: "string"
        description: "Namespace defines the space within which each name must be unique.\
          \ An empty namespace is\nequivalent to the \"default\" namespace, but \"\
          default\" is the canonical representation.\nNot all objects are required\
          \ to be scoped to a namespace - the value of this field for\nthose objects\
          \ will be empty.\n\nMust be a DNS_LABEL.\nCannot be updated.\nMore info:\
          \ http://kubernetes.io/docs/user-guide/namespaces\n+optional"
      ownerReferences:
        type: "array"
        title: "List of objects depended by this object. If ALL objects in the list\
          \ have\nbeen deleted, this object will be garbage collected. If this object\
          \ is managed by a controller,\nthen an entry in this list will point to\
          \ this controller, with the controller field set to true.\nThere cannot\
          \ be more than one managing controller.\n+optional\n+patchMergeKey=uid\n\
          +patchStrategy=merge"
        items:
          $ref: "#/definitions/v1OwnerReference"
      resourceVersion:
        type: "string"
        description: "An opaque value that represents the internal version of this\
          \ object that can\nbe used by clients to determine when objects have changed.\
          \ May be used for optimistic\nconcurrency, change detection, and the watch\
          \ operation on a resource or set of resources.\nClients must treat these\
          \ values as opaque and passed unmodified back to the server.\nThey may only\
          \ be valid for a particular resource or set of resources.\n\nPopulated by\
          \ the system.\nRead-only.\nValue must be treated as opaque by clients and\
          \ .\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n\
          +optional"
      selfLink:
        type: "string"
        description: "SelfLink is a URL representing this object.\nPopulated by the\
          \ system.\nRead-only.\n\nDEPRECATED\nKubernetes will stop propagating this\
          \ field in 1.20 release and the field is planned\nto be removed in 1.21\
          \ release.\n+optional"
      uid:
        type: "string"
        description: "UID is the unique in time and space value for this object. It\
          \ is typically generated by\nthe server on successful creation of a resource\
          \ and is not allowed to change on PUT\noperations.\n\nPopulated by the system.\n\
          Read-only.\nMore info: http://kubernetes.io/docs/user-guide/identifiers#uids\n\
          +optional"
    description: "ObjectMeta is metadata that all persisted resources must have, which\
      \ includes all objects\nusers must create."
    example:
      generation: "generation"
      finalizers:
      - "finalizers"
      - "finalizers"
      resourceVersion: "resourceVersion"
      annotations:
        key: "annotations"
      generateName: "generateName"
      deletionTimestamp:
        seconds: "seconds"
        nanos: 0
      labels:
        key: "labels"
      ownerReferences:
      - uid: "uid"
        controller: true
        apiVersion: "apiVersion"
        kind: "kind"
        name: "name"
        blockOwnerDeletion: true
      - uid: "uid"
        controller: true
        apiVersion: "apiVersion"
        kind: "kind"
        name: "name"
        blockOwnerDeletion: true
      selfLink: "selfLink"
      deletionGracePeriodSeconds: "deletionGracePeriodSeconds"
      uid: "uid"
      managedFields:
      - apiVersion: "apiVersion"
        fieldsV1:
          Raw: "Raw"
        manager: "manager"
        subresource: "subresource"
        time:
          seconds: "seconds"
          nanos: 0
        operation: "operation"
        fieldsType: "fieldsType"
      - apiVersion: "apiVersion"
        fieldsV1:
          Raw: "Raw"
        manager: "manager"
        subresource: "subresource"
        time:
          seconds: "seconds"
          nanos: 0
        operation: "operation"
        fieldsType: "fieldsType"
      clusterName: "clusterName"
      creationTimestamp:
        seconds: "seconds"
        nanos: 0
      name: "name"
      namespace: "namespace"
  v1ObjectReference:
    type: "object"
    properties:
      apiVersion:
        type: "string"
        title: "API version of the referent.\n+optional"
      fieldPath:
        type: "string"
        title: "If referring to a piece of an object instead of an entire object,\
          \ this string\nshould contain a valid JSON/Go field access statement, such\
          \ as desiredState.manifest.containers[2].\nFor example, if the object reference\
          \ is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\"\
          \ (where \"name\" refers to the name of the container that triggered\nthe\
          \ event) or if no container name is specified \"spec.containers[2]\" (container\
          \ with\nindex 2 in this pod). This syntax is chosen only to have some well-defined\
          \ way of\nreferencing a part of an object.\nTODO: this design is not final\
          \ and this field is subject to change in the future.\n+optional"
      kind:
        type: "string"
        title: "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n\
          +optional"
      name:
        type: "string"
        title: "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n\
          +optional"
      namespace:
        type: "string"
        title: "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\n\
          +optional"
      resourceVersion:
        type: "string"
        title: "Specific resourceVersion to which this reference is made, if any.\n\
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n\
          +optional"
      uid:
        type: "string"
        title: "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids\n\
          +optional"
    title: "ObjectReference contains enough information to let you inspect or modify\
      \ the referred object.\n---\nNew uses of this type are discouraged because of\
      \ difficulty describing its usage when embedded in APIs.\n 1. Ignored fields.\
      \  It includes many fields which are not generally honored.  For instance, ResourceVersion\
      \ and FieldPath are both very rarely valid in actual usage.\n 2. Invalid usage\
      \ help.  It is impossible to add specific help for individual usage.  In most\
      \ embedded usages, there are particular\n    restrictions like, \"must refer\
      \ only to types A and B\" or \"UID not honored\" or \"name must be restricted\"\
      .\n    Those cannot be well described when embedded.\n 3. Inconsistent validation.\
      \  Because the usages are different, the validation rules are different by usage,\
      \ which makes it hard for users to predict what will happen.\n 4. The fields\
      \ are both imprecise and overly precise.  Kind is not a precise mapping to a\
      \ URL. This can produce ambiguity\n    during interpretation and require a REST\
      \ mapping.  In most cases, the dependency is on the group,resource tuple\n \
      \   and the version of the actual struct is irrelevant.\n 5. We cannot easily\
      \ change it.  Because this type is embedded in many locations, updates to this\
      \ type\n    will affect numerous schemas.  Don't make new APIs embed an underspecified\
      \ API type they do not control.\nInstead of using this type, create a locally\
      \ provided and used type that is well-focused on your reference.\nFor example,\
      \ ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533\
      \ .\n+k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object\n+structType=atomic"
    example:
      uid: "uid"
      apiVersion: "apiVersion"
      kind: "kind"
      resourceVersion: "resourceVersion"
      fieldPath: "fieldPath"
      name: "name"
      namespace: "namespace"
  v1OwnerReference:
    type: "object"
    properties:
      apiVersion:
        type: "string"
        description: "API version of the referent."
      blockOwnerDeletion:
        type: "boolean"
        title: "If true, AND if the owner has the \"foregroundDeletion\" finalizer,\
          \ then\nthe owner cannot be deleted from the key-value store until this\n\
          reference is removed.\nDefaults to false.\nTo set this field, a user needs\
          \ \"delete\" permission of the owner,\notherwise 422 (Unprocessable Entity)\
          \ will be returned.\n+optional"
      controller:
        type: "boolean"
        title: "If true, this reference points to the managing controller.\n+optional"
      kind:
        type: "string"
        title: "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      name:
        type: "string"
        title: "Name of the referent.\nMore info: http://kubernetes.io/docs/user-guide/identifiers#names"
      uid:
        type: "string"
        title: "UID of the referent.\nMore info: http://kubernetes.io/docs/user-guide/identifiers#uids"
    title: "OwnerReference contains enough information to let you identify an owning\n\
      object. An owning object must be in the same namespace as the dependent, or\n\
      be cluster-scoped, so there is no namespace field.\n+structType=atomic"
    example:
      uid: "uid"
      controller: true
      apiVersion: "apiVersion"
      kind: "kind"
      name: "name"
      blockOwnerDeletion: true
  v1PortStatus:
    type: "object"
    properties:
      error:
        type: "string"
        title: "Error is to record the problem with the service port\nThe format of\
          \ the error shall comply with the following rules:\n- built-in error values\
          \ shall be specified in this file and those shall use\n  CamelCase names\n\
          - cloud provider specific error values must have names that comply with\
          \ the\n  format foo.example.com/CamelCase.\n---\nThe regex it matches is\
          \ (dns1123SubdomainFmt/)?(qualifiedNameFmt)\n+optional\n+kubebuilder:validation:Required\n\
          +kubebuilder:validation:Pattern=`^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$`\n\
          +kubebuilder:validation:MaxLength=316"
      port:
        type: "integer"
        format: "int32"
        title: "Port is the port number of the service port of which status is recorded\
          \ here"
      protocol:
        type: "string"
        title: "Protocol is the protocol of the service port of which status is recorded\
          \ here\nThe supported values are: \"TCP\", \"UDP\", \"SCTP\""
    example:
      protocol: "protocol"
      port: 0
      error: "error"
  v1Time:
    type: "object"
    properties:
      nanos:
        type: "integer"
        format: "int32"
        description: "Non-negative fractions of a second at nanosecond resolution.\
          \ Negative\nsecond values with fractions must still have non-negative nanos\
          \ values\nthat count forward in time. Must be from 0 to 999,999,999\ninclusive.\
          \ This field may be limited in precision depending on context."
      seconds:
        type: "string"
        format: "int64"
        description: "Represents seconds of UTC time since Unix epoch\n1970-01-01T00:00:00Z.\
          \ Must be from 0001-01-01T00:00:00Z to\n9999-12-31T23:59:59Z inclusive."
    description: "Time is a wrapper around time.Time which supports correct\nmarshaling\
      \ to YAML and JSON.  Wrappers are provided for many\nof the factory methods\
      \ that the time package offers.\n\n+protobuf.options.marshal=false\n+protobuf.as=Timestamp\n\
      +protobuf.options.(gogoproto.goproto_stringer)=false"
    example:
      seconds: "seconds"
      nanos: 0
  v1alpha1AWSAuthConfig:
    type: "object"
    properties:
      clusterName:
        type: "string"
        title: "ClusterName contains AWS cluster name"
      roleARN:
        type: "string"
        description: "RoleARN contains optional role ARN. If set then AWS IAM Authenticator\
          \ assume a role to perform cluster operations instead of the default AWS\
          \ credential provider chain."
    title: "AWSAuthConfig is an AWS IAM authentication configuration"
    example:
      roleARN: "roleARN"
      clusterName: "clusterName"
  v1alpha1AppProject:
    type: "object"
    properties:
      metadata:
        $ref: "#/definitions/v1ObjectMeta"
      spec:
        $ref: "#/definitions/v1alpha1AppProjectSpec"
      status:
        $ref: "#/definitions/v1alpha1AppProjectStatus"
    title: "AppProject provides a logical grouping of applications, providing controls\
      \ for:\n* where the apps may deploy to (cluster whitelist)\n* what may be deployed\
      \ (repository whitelist, resource whitelist/blacklist)\n* who can access these\
      \ applications (roles, OIDC group claims bindings)\n* and what they can do (RBAC\
      \ policies)\n* automation access to these roles (JWT tokens)\n+genclient\n+genclient:noStatus\n\
      +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object\n+kubebuilder:resource:path=appprojects,shortName=appproj;appprojs"
    example:
      metadata:
        generation: "generation"
        finalizers:
        - "finalizers"
        - "finalizers"
        resourceVersion: "resourceVersion"
        annotations:
          key: "annotations"
        generateName: "generateName"
        deletionTimestamp:
          seconds: "seconds"
          nanos: 0
        labels:
          key: "labels"
        ownerReferences:
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        selfLink: "selfLink"
        deletionGracePeriodSeconds: "deletionGracePeriodSeconds"
        uid: "uid"
        managedFields:
        - apiVersion: "apiVersion"
          fieldsV1:
            Raw: "Raw"
          manager: "manager"
          subresource: "subresource"
          time:
            seconds: "seconds"
            nanos: 0
          operation: "operation"
          fieldsType: "fieldsType"
        - apiVersion: "apiVersion"
          fieldsV1:
            Raw: "Raw"
          manager: "manager"
          subresource: "subresource"
          time:
            seconds: "seconds"
            nanos: 0
          operation: "operation"
          fieldsType: "fieldsType"
        clusterName: "clusterName"
        creationTimestamp:
          seconds: "seconds"
          nanos: 0
        name: "name"
        namespace: "namespace"
      spec:
        sourceRepos:
        - "sourceRepos"
        - "sourceRepos"
        orphanedResources:
          warn: true
          ignore:
          - kind: "kind"
            name: "name"
            group: "group"
          - kind: "kind"
            name: "name"
            group: "group"
        destinations:
        - server: "server"
          name: "name"
          namespace: "namespace"
        - server: "server"
          name: "name"
          namespace: "namespace"
        roles:
        - name: "name"
          policies:
          - "policies"
          - "policies"
          description: "description"
          groups:
          - "groups"
          - "groups"
          jwtTokens:
          - id: "id"
            exp: "exp"
            iat: "iat"
          - id: "id"
            exp: "exp"
            iat: "iat"
        - name: "name"
          policies:
          - "policies"
          - "policies"
          description: "description"
          groups:
          - "groups"
          - "groups"
          jwtTokens:
          - id: "id"
            exp: "exp"
            iat: "iat"
          - id: "id"
            exp: "exp"
            iat: "iat"
        clusterResourceWhitelist:
        - kind: "kind"
          group: "group"
        - kind: "kind"
          group: "group"
        namespaceResourceBlacklist:
        - kind: "kind"
          group: "group"
        - kind: "kind"
          group: "group"
        description: "description"
        clusterResourceBlacklist:
        - kind: "kind"
          group: "group"
        - kind: "kind"
          group: "group"
        namespaceResourceWhitelist:
        - kind: "kind"
          group: "group"
        - kind: "kind"
          group: "group"
        signatureKeys:
        - keyID: "keyID"
        - keyID: "keyID"
        syncWindows:
        - duration: "duration"
          schedule: "schedule"
          kind: "kind"
          timeZone: "timeZone"
          manualSync: true
          clusters:
          - "clusters"
          - "clusters"
          applications:
          - "applications"
          - "applications"
          namespaces:
          - "namespaces"
          - "namespaces"
        - duration: "duration"
          schedule: "schedule"
          kind: "kind"
          timeZone: "timeZone"
          manualSync: true
          clusters:
          - "clusters"
          - "clusters"
          applications:
          - "applications"
          - "applications"
          namespaces:
          - "namespaces"
          - "namespaces"
      status:
        jwtTokensByRole:
          key:
            items:
            - id: "id"
              exp: "exp"
              iat: "iat"
            - id: "id"
              exp: "exp"
              iat: "iat"
  v1alpha1AppProjectList:
    type: "object"
    properties:
      items:
        type: "array"
        items:
          $ref: "#/definitions/v1alpha1AppProject"
      metadata:
        $ref: "#/definitions/v1ListMeta"
    title: "AppProjectList is list of AppProject resources\n+k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object"
    example:
      metadata:
        remainingItemCount: "remainingItemCount"
        continue: "continue"
        resourceVersion: "resourceVersion"
        selfLink: "selfLink"
      items:
      - metadata:
          generation: "generation"
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          deletionTimestamp:
            seconds: "seconds"
            nanos: 0
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: "deletionGracePeriodSeconds"
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1:
              Raw: "Raw"
            manager: "manager"
            subresource: "subresource"
            time:
              seconds: "seconds"
              nanos: 0
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1:
              Raw: "Raw"
            manager: "manager"
            subresource: "subresource"
            time:
              seconds: "seconds"
              nanos: 0
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp:
            seconds: "seconds"
            nanos: 0
          name: "name"
          namespace: "namespace"
        spec:
          sourceRepos:
          - "sourceRepos"
          - "sourceRepos"
          orphanedResources:
            warn: true
            ignore:
            - kind: "kind"
              name: "name"
              group: "group"
            - kind: "kind"
              name: "name"
              group: "group"
          destinations:
          - server: "server"
            name: "name"
            namespace: "namespace"
          - server: "server"
            name: "name"
            namespace: "namespace"
          roles:
          - name: "name"
            policies:
            - "policies"
            - "policies"
            description: "description"
            groups:
            - "groups"
            - "groups"
            jwtTokens:
            - id: "id"
              exp: "exp"
              iat: "iat"
            - id: "id"
              exp: "exp"
              iat: "iat"
          - name: "name"
            policies:
            - "policies"
            - "policies"
            description: "description"
            groups:
            - "groups"
            - "groups"
            jwtTokens:
            - id: "id"
              exp: "exp"
              iat: "iat"
            - id: "id"
              exp: "exp"
              iat: "iat"
          clusterResourceWhitelist:
          - kind: "kind"
            group: "group"
          - kind: "kind"
            group: "group"
          namespaceResourceBlacklist:
          - kind: "kind"
            group: "group"
          - kind: "kind"
            group: "group"
          description: "description"
          clusterResourceBlacklist:
          - kind: "kind"
            group: "group"
          - kind: "kind"
            group: "group"
          namespaceResourceWhitelist:
          - kind: "kind"
            group: "group"
          - kind: "kind"
            group: "group"
          signatureKeys:
          - keyID: "keyID"
          - keyID: "keyID"
          syncWindows:
          - duration: "duration"
            schedule: "schedule"
            kind: "kind"
            timeZone: "timeZone"
            manualSync: true
            clusters:
            - "clusters"
            - "clusters"
            applications:
            - "applications"
            - "applications"
            namespaces:
            - "namespaces"
            - "namespaces"
          - duration: "duration"
            schedule: "schedule"
            kind: "kind"
            timeZone: "timeZone"
            manualSync: true
            clusters:
            - "clusters"
            - "clusters"
            applications:
            - "applications"
            - "applications"
            namespaces:
            - "namespaces"
            - "namespaces"
        status:
          jwtTokensByRole:
            key:
              items:
              - id: "id"
                exp: "exp"
                iat: "iat"
              - id: "id"
                exp: "exp"
                iat: "iat"
      - metadata:
          generation: "generation"
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          deletionTimestamp:
            seconds: "seconds"
            nanos: 0
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: "deletionGracePeriodSeconds"
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1:
              Raw: "Raw"
            manager: "manager"
            subresource: "subresource"
            time:
              seconds: "seconds"
              nanos: 0
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1:
              Raw: "Raw"
            manager: "manager"
            subresource: "subresource"
            time:
              seconds: "seconds"
              nanos: 0
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp:
            seconds: "seconds"
            nanos: 0
          name: "name"
          namespace: "namespace"
        spec:
          sourceRepos:
          - "sourceRepos"
          - "sourceRepos"
          orphanedResources:
            warn: true
            ignore:
            - kind: "kind"
              name: "name"
              group: "group"
            - kind: "kind"
              name: "name"
              group: "group"
          destinations:
          - server: "server"
            name: "name"
            namespace: "namespace"
          - server: "server"
            name: "name"
            namespace: "namespace"
          roles:
          - name: "name"
            policies:
            - "policies"
            - "policies"
            description: "description"
            groups:
            - "groups"
            - "groups"
            jwtTokens:
            - id: "id"
              exp: "exp"
              iat: "iat"
            - id: "id"
              exp: "exp"
              iat: "iat"
          - name: "name"
            policies:
            - "policies"
            - "policies"
            description: "description"
            groups:
            - "groups"
            - "groups"
            jwtTokens:
            - id: "id"
              exp: "exp"
              iat: "iat"
            - id: "id"
              exp: "exp"
              iat: "iat"
          clusterResourceWhitelist:
          - kind: "kind"
            group: "group"
          - kind: "kind"
            group: "group"
          namespaceResourceBlacklist:
          - kind: "kind"
            group: "group"
          - kind: "kind"
            group: "group"
          description: "description"
          clusterResourceBlacklist:
          - kind: "kind"
            group: "group"
          - kind: "kind"
            group: "group"
          namespaceResourceWhitelist:
          - kind: "kind"
            group: "group"
          - kind: "kind"
            group: "group"
          signatureKeys:
          - keyID: "keyID"
          - keyID: "keyID"
          syncWindows:
          - duration: "duration"
            schedule: "schedule"
            kind: "kind"
            timeZone: "timeZone"
            manualSync: true
            clusters:
            - "clusters"
            - "clusters"
            applications:
            - "applications"
            - "applications"
            namespaces:
            - "namespaces"
            - "namespaces"
          - duration: "duration"
            schedule: "schedule"
            kind: "kind"
            timeZone: "timeZone"
            manualSync: true
            clusters:
            - "clusters"
            - "clusters"
            applications:
            - "applications"
            - "applications"
            namespaces:
            - "namespaces"
            - "namespaces"
        status:
          jwtTokensByRole:
            key:
              items:
              - id: "id"
                exp: "exp"
                iat: "iat"
              - id: "id"
                exp: "exp"
                iat: "iat"
  v1alpha1AppProjectSpec:
    type: "object"
    properties:
      clusterResourceBlacklist:
        type: "array"
        title: "ClusterResourceBlacklist contains list of blacklisted cluster level\
          \ resources"
        items:
          $ref: "#/definitions/v1GroupKind"
      clusterResourceWhitelist:
        type: "array"
        title: "ClusterResourceWhitelist contains list of whitelisted cluster level\
          \ resources"
        items:
          $ref: "#/definitions/v1GroupKind"
      description:
        type: "string"
        title: "Description contains optional project description"
      destinations:
        type: "array"
        title: "Destinations contains list of destinations available for deployment"
        items:
          $ref: "#/definitions/v1alpha1ApplicationDestination"
      namespaceResourceBlacklist:
        type: "array"
        title: "NamespaceResourceBlacklist contains list of blacklisted namespace\
          \ level resources"
        items:
          $ref: "#/definitions/v1GroupKind"
      namespaceResourceWhitelist:
        type: "array"
        title: "NamespaceResourceWhitelist contains list of whitelisted namespace\
          \ level resources"
        items:
          $ref: "#/definitions/v1GroupKind"
      orphanedResources:
        $ref: "#/definitions/v1alpha1OrphanedResourcesMonitorSettings"
      roles:
        type: "array"
        title: "Roles are user defined RBAC roles associated with this project"
        items:
          $ref: "#/definitions/v1alpha1ProjectRole"
      signatureKeys:
        type: "array"
        title: "SignatureKeys contains a list of PGP key IDs that commits in Git must\
          \ be signed with in order to be allowed for sync"
        items:
          $ref: "#/definitions/v1alpha1SignatureKey"
      sourceRepos:
        type: "array"
        title: "SourceRepos contains list of repository URLs which can be used for\
          \ deployment"
        items:
          type: "string"
      syncWindows:
        type: "array"
        title: "SyncWindows controls when syncs can be run for apps in this project"
        items:
          $ref: "#/definitions/v1alpha1SyncWindow"
    title: "AppProjectSpec is the specification of an AppProject"
    example:
      sourceRepos:
      - "sourceRepos"
      - "sourceRepos"
      orphanedResources:
        warn: true
        ignore:
        - kind: "kind"
          name: "name"
          group: "group"
        - kind: "kind"
          name: "name"
          group: "group"
      destinations:
      - server: "server"
        name: "name"
        namespace: "namespace"
      - server: "server"
        name: "name"
        namespace: "namespace"
      roles:
      - name: "name"
        policies:
        - "policies"
        - "policies"
        description: "description"
        groups:
        - "groups"
        - "groups"
        jwtTokens:
        - id: "id"
          exp: "exp"
          iat: "iat"
        - id: "id"
          exp: "exp"
          iat: "iat"
      - name: "name"
        policies:
        - "policies"
        - "policies"
        description: "description"
        groups:
        - "groups"
        - "groups"
        jwtTokens:
        - id: "id"
          exp: "exp"
          iat: "iat"
        - id: "id"
          exp: "exp"
          iat: "iat"
      clusterResourceWhitelist:
      - kind: "kind"
        group: "group"
      - kind: "kind"
        group: "group"
      namespaceResourceBlacklist:
      - kind: "kind"
        group: "group"
      - kind: "kind"
        group: "group"
      description: "description"
      clusterResourceBlacklist:
      - kind: "kind"
        group: "group"
      - kind: "kind"
        group: "group"
      namespaceResourceWhitelist:
      - kind: "kind"
        group: "group"
      - kind: "kind"
        group: "group"
      signatureKeys:
      - keyID: "keyID"
      - keyID: "keyID"
      syncWindows:
      - duration: "duration"
        schedule: "schedule"
        kind: "kind"
        timeZone: "timeZone"
        manualSync: true
        clusters:
        - "clusters"
        - "clusters"
        applications:
        - "applications"
        - "applications"
        namespaces:
        - "namespaces"
        - "namespaces"
      - duration: "duration"
        schedule: "schedule"
        kind: "kind"
        timeZone: "timeZone"
        manualSync: true
        clusters:
        - "clusters"
        - "clusters"
        applications:
        - "applications"
        - "applications"
        namespaces:
        - "namespaces"
        - "namespaces"
  v1alpha1AppProjectStatus:
    type: "object"
    properties:
      jwtTokensByRole:
        type: "object"
        title: "JWTTokensByRole contains a list of JWT tokens issued for a given role"
        additionalProperties:
          $ref: "#/definitions/v1alpha1JWTTokens"
    title: "AppProjectStatus contains status information for AppProject CRs"
    example:
      jwtTokensByRole:
        key:
          items:
          - id: "id"
            exp: "exp"
            iat: "iat"
          - id: "id"
            exp: "exp"
            iat: "iat"
  v1alpha1Application:
    type: "object"
    properties:
      metadata:
        $ref: "#/definitions/v1ObjectMeta"
      operation:
        $ref: "#/definitions/v1alpha1Operation"
      spec:
        $ref: "#/definitions/v1alpha1ApplicationSpec"
      status:
        $ref: "#/definitions/v1alpha1ApplicationStatus"
    title: "Application is a definition of Application resource.\n+genclient\n+genclient:noStatus\n\
      +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object\n+kubebuilder:resource:path=applications,shortName=app;apps\n\
      +kubebuilder:printcolumn:name=\"Sync Status\",type=string,JSONPath=`.status.sync.status`\n\
      +kubebuilder:printcolumn:name=\"Health Status\",type=string,JSONPath=`.status.health.status`\n\
      +kubebuilder:printcolumn:name=\"Revision\",type=string,JSONPath=`.status.sync.revision`,priority=10"
    example:
      metadata:
        generation: "generation"
        finalizers:
        - "finalizers"
        - "finalizers"
        resourceVersion: "resourceVersion"
        annotations:
          key: "annotations"
        generateName: "generateName"
        deletionTimestamp:
          seconds: "seconds"
          nanos: 0
        labels:
          key: "labels"
        ownerReferences:
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        selfLink: "selfLink"
        deletionGracePeriodSeconds: "deletionGracePeriodSeconds"
        uid: "uid"
        managedFields:
        - apiVersion: "apiVersion"
          fieldsV1:
            Raw: "Raw"
          manager: "manager"
          subresource: "subresource"
          time:
            seconds: "seconds"
            nanos: 0
          operation: "operation"
          fieldsType: "fieldsType"
        - apiVersion: "apiVersion"
          fieldsV1:
            Raw: "Raw"
          manager: "manager"
          subresource: "subresource"
          time:
            seconds: "seconds"
            nanos: 0
          operation: "operation"
          fieldsType: "fieldsType"
        clusterName: "clusterName"
        creationTimestamp:
          seconds: "seconds"
          nanos: 0
        name: "name"
        namespace: "namespace"
      operation:
        sync:
          dryRun: true
          prune: true
          manifests:
          - "manifests"
          - "manifests"
          resources:
          - kind: "kind"
            name: "name"
            namespace: "namespace"
            group: "group"
          - kind: "kind"
            name: "name"
            namespace: "namespace"
            group: "group"
          source:
            repoURL: "repoURL"
            ksonnet:
              environment: "environment"
              parameters:
              - component: "component"
                name: "name"
                value: "value"
              - component: "component"
                name: "name"
                value: "value"
            path: "path"
            targetRevision: "targetRevision"
            plugin:
              name: "name"
              env:
              - name: "name"
                value: "value"
              - name: "name"
                value: "value"
            kustomize:
              commonLabels:
                key: "commonLabels"
              images:
              - "images"
              - "images"
              namePrefix: "namePrefix"
              forceCommonAnnotations: true
              nameSuffix: "nameSuffix"
              forceCommonLabels: true
              version: "version"
              commonAnnotations:
                key: "commonAnnotations"
            chart: "chart"
            directory:
              include: "include"
              jsonnet:
                extVars:
                - code: true
                  name: "name"
                  value: "value"
                - code: true
                  name: "name"
                  value: "value"
                libs:
                - "libs"
                - "libs"
                tlas:
                - code: true
                  name: "name"
                  value: "value"
                - code: true
                  name: "name"
                  value: "value"
              recurse: true
              exclude: "exclude"
            helm:
              valueFiles:
              - "valueFiles"
              - "valueFiles"
              releaseName: "releaseName"
              fileParameters:
              - path: "path"
                name: "name"
              - path: "path"
                name: "name"
              values: "values"
              passCredentials: true
              parameters:
              - forceString: true
                name: "name"
                value: "value"
              - forceString: true
                name: "name"
                value: "value"
              version: "version"
          syncStrategy:
            hook:
              syncStrategyApply:
                force: true
            apply:
              force: true
          syncOptions:
          - "syncOptions"
          - "syncOptions"
          revision: "revision"
        initiatedBy:
          automated: true
          username: "username"
        retry:
          backoff:
            duration: "duration"
            factor: "factor"
            maxDuration: "maxDuration"
          limit: "limit"
        info:
        - name: "name"
          value: "value"
        - name: "name"
          value: "value"
      spec:
        destination:
          server: "server"
          name: "name"
          namespace: "namespace"
        project: "project"
        revisionHistoryLimit: "revisionHistoryLimit"
        source:
          repoURL: "repoURL"
          ksonnet:
            environment: "environment"
            parameters:
            - component: "component"
              name: "name"
              value: "value"
            - component: "component"
              name: "name"
              value: "value"
          path: "path"
          targetRevision: "targetRevision"
          plugin:
            name: "name"
            env:
            - name: "name"
              value: "value"
            - name: "name"
              value: "value"
          kustomize:
            commonLabels:
              key: "commonLabels"
            images:
            - "images"
            - "images"
            namePrefix: "namePrefix"
            forceCommonAnnotations: true
            nameSuffix: "nameSuffix"
            forceCommonLabels: true
            version: "version"
            commonAnnotations:
              key: "commonAnnotations"
          chart: "chart"
          directory:
            include: "include"
            jsonnet:
              extVars:
              - code: true
                name: "name"
                value: "value"
              - code: true
                name: "name"
                value: "value"
              libs:
              - "libs"
              - "libs"
              tlas:
              - code: true
                name: "name"
                value: "value"
              - code: true
                name: "name"
                value: "value"
            recurse: true
            exclude: "exclude"
          helm:
            valueFiles:
            - "valueFiles"
            - "valueFiles"
            releaseName: "releaseName"
            fileParameters:
            - path: "path"
              name: "name"
            - path: "path"
              name: "name"
            values: "values"
            passCredentials: true
            parameters:
            - forceString: true
              name: "name"
              value: "value"
            - forceString: true
              name: "name"
              value: "value"
            version: "version"
        ignoreDifferences:
        - jqPathExpressions:
          - "jqPathExpressions"
          - "jqPathExpressions"
          jsonPointers:
          - "jsonPointers"
          - "jsonPointers"
          kind: "kind"
          name: "name"
          namespace: "namespace"
          group: "group"
        - jqPathExpressions:
          - "jqPathExpressions"
          - "jqPathExpressions"
          jsonPointers:
          - "jsonPointers"
          - "jsonPointers"
          kind: "kind"
          name: "name"
          namespace: "namespace"
          group: "group"
        syncPolicy:
          automated:
            allowEmpty: true
            selfHeal: true
            prune: true
          retry:
            backoff:
              duration: "duration"
              factor: "factor"
              maxDuration: "maxDuration"
            limit: "limit"
          syncOptions:
          - "syncOptions"
          - "syncOptions"
        info:
        - name: "name"
          value: "value"
        - name: "name"
          value: "value"
      status:
        summary:
          images:
          - "images"
          - "images"
          externalURLs:
          - "externalURLs"
          - "externalURLs"
        sourceType: "sourceType"
        observedAt:
          seconds: "seconds"
          nanos: 0
        operationState:
          phase: "phase"
          retryCount: "retryCount"
          startedAt:
            seconds: "seconds"
            nanos: 0
          syncResult:
            resources:
            - syncPhase: "syncPhase"
              kind: "kind"
              name: "name"
              namespace: "namespace"
              hookPhase: "hookPhase"
              message: "message"
              version: "version"
              hookType: "hookType"
              group: "group"
              status: "status"
            - syncPhase: "syncPhase"
              kind: "kind"
              name: "name"
              namespace: "namespace"
              hookPhase: "hookPhase"
              message: "message"
              version: "version"
              hookType: "hookType"
              group: "group"
              status: "status"
            source:
              repoURL: "repoURL"
              ksonnet:
                environment: "environment"
                parameters:
                - component: "component"
                  name: "name"
                  value: "value"
                - component: "component"
                  name: "name"
                  value: "value"
              path: "path"
              targetRevision: "targetRevision"
              plugin:
                name: "name"
                env:
                - name: "name"
                  value: "value"
                - name: "name"
                  value: "value"
              kustomize:
                commonLabels:
                  key: "commonLabels"
                images:
                - "images"
                - "images"
                namePrefix: "namePrefix"
                forceCommonAnnotations: true
                nameSuffix: "nameSuffix"
                forceCommonLabels: true
                version: "version"
                commonAnnotations:
                  key: "commonAnnotations"
              chart: "chart"
              directory:
                include: "include"
                jsonnet:
                  extVars:
                  - code: true
                    name: "name"
                    value: "value"
                  - code: true
                    name: "name"
                    value: "value"
                  libs:
                  - "libs"
                  - "libs"
                  tlas:
                  - code: true
                    name: "name"
                    value: "value"
                  - code: true
                    name: "name"
                    value: "value"
                recurse: true
                exclude: "exclude"
              helm:
                valueFiles:
                - "valueFiles"
                - "valueFiles"
                releaseName: "releaseName"
                fileParameters:
                - path: "path"
                  name: "name"
                - path: "path"
                  name: "name"
                values: "values"
                passCredentials: true
                parameters:
                - forceString: true
                  name: "name"
                  value: "value"
                - forceString: true
                  name: "name"
                  value: "value"
                version: "version"
            revision: "revision"
          message: "message"
          operation:
            sync:
              dryRun: true
              prune: true
              manifests:
              - "manifests"
              - "manifests"
              resources:
              - kind: "kind"
                name: "name"
                namespace: "namespace"
                group: "group"
              - kind: "kind"
                name: "name"
                namespace: "namespace"
                group: "group"
              source:
                repoURL: "repoURL"
                ksonnet:
                  environment: "environment"
                  parameters:
                  - component: "component"
                    name: "name"
                    value: "value"
                  - component: "component"
                    name: "name"
                    value: "value"
                path: "path"
                targetRevision: "targetRevision"
                plugin:
                  name: "name"
                  env:
                  - name: "name"
                    value: "value"
                  - name: "name"
                    value: "value"
                kustomize:
                  commonLabels:
                    key: "commonLabels"
                  images:
                  - "images"
                  - "images"
                  namePrefix: "namePrefix"
                  forceCommonAnnotations: true
                  nameSuffix: "nameSuffix"
                  forceCommonLabels: true
                  version: "version"
                  commonAnnotations:
                    key: "commonAnnotations"
                chart: "chart"
                directory:
                  include: "include"
                  jsonnet:
                    extVars:
                    - code: true
                      name: "name"
                      value: "value"
                    - code: true
                      name: "name"
                      value: "value"
                    libs:
                    - "libs"
                    - "libs"
                    tlas:
                    - code: true
                      name: "name"
                      value: "value"
                    - code: true
                      name: "name"
                      value: "value"
                  recurse: true
                  exclude: "exclude"
                helm:
                  valueFiles:
                  - "valueFiles"
                  - "valueFiles"
                  releaseName: "releaseName"
                  fileParameters:
                  - path: "path"
                    name: "name"
                  - path: "path"
                    name: "name"
                  values: "values"
                  passCredentials: true
                  parameters:
                  - forceString: true
                    name: "name"
                    value: "value"
                  - forceString: true
                    name: "name"
                    value: "value"
                  version: "version"
              syncStrategy:
                hook:
                  syncStrategyApply:
                    force: true
                apply:
                  force: true
              syncOptions:
              - "syncOptions"
              - "syncOptions"
              revision: "revision"
            initiatedBy:
              automated: true
              username: "username"
            retry:
              backoff:
                duration: "duration"
                factor: "factor"
                maxDuration: "maxDuration"
              limit: "limit"
            info:
            - name: "name"
              value: "value"
            - name: "name"
              value: "value"
          finishedAt:
            seconds: "seconds"
            nanos: 0
        reconciledAt:
          seconds: "seconds"
          nanos: 0
        health:
          message: "message"
          status: "status"
        resources:
        - hook: true
          kind: "kind"
          name: "name"
          namespace: "namespace"
          health:
            message: "message"
            status: "status"
          requiresPruning: true
          version: "version"
          group: "group"
          status: "status"
        - hook: true
          kind: "kind"
          name: "name"
          namespace: "namespace"
          health:
            message: "message"
            status: "status"
          requiresPruning: true
          version: "version"
          group: "group"
          status: "status"
        history:
        - deployStartedAt:
            seconds: "seconds"
            nanos: 0
          id: "id"
          source:
            repoURL: "repoURL"
            ksonnet:
              environment: "environment"
              parameters:
              - component: "component"
                name: "name"
                value: "value"
              - component: "component"
                name: "name"
                value: "value"
            path: "path"
            targetRevision: "targetRevision"
            plugin:
              name: "name"
              env:
              - name: "name"
                value: "value"
              - name: "name"
                value: "value"
            kustomize:
              commonLabels:
                key: "commonLabels"
              images:
              - "images"
              - "images"
              namePrefix: "namePrefix"
              forceCommonAnnotations: true
              nameSuffix: "nameSuffix"
              forceCommonLabels: true
              version: "version"
              commonAnnotations:
                key: "commonAnnotations"
            chart: "chart"
            directory:
              include: "include"
              jsonnet:
                extVars:
                - code: true
                  name: "name"
                  value: "value"
                - code: true
                  name: "name"
                  value: "value"
                libs:
                - "libs"
                - "libs"
                tlas:
                - code: true
                  name: "name"
                  value: "value"
                - code: true
                  name: "name"
                  value: "value"
              recurse: true
              exclude: "exclude"
            helm:
              valueFiles:
              - "valueFiles"
              - "valueFiles"
              releaseName: "releaseName"
              fileParameters:
              - path: "path"
                name: "name"
              - path: "path"
                name: "name"
              values: "values"
              passCredentials: true
              parameters:
              - forceString: true
                name: "name"
                value: "value"
              - forceString: true
                name: "name"
                value: "value"
              version: "version"
          deployedAt:
            seconds: "seconds"
            nanos: 0
          revision: "revision"
        - deployStartedAt:
            seconds: "seconds"
            nanos: 0
          id: "id"
          source:
            repoURL: "repoURL"
            ksonnet:
              environment: "environment"
              parameters:
              - component: "component"
                name: "name"
                value: "value"
              - component: "component"
                name: "name"
                value: "value"
            path: "path"
            targetRevision: "targetRevision"
            plugin:
              name: "name"
              env:
              - name: "name"
                value: "value"
              - name: "name"
                value: "value"
            kustomize:
              commonLabels:
                key: "commonLabels"
              images:
              - "images"
              - "images"
              namePrefix: "namePrefix"
              forceCommonAnnotations: true
              nameSuffix: "nameSuffix"
              forceCommonLabels: true
              version: "version"
              commonAnnotations:
                key: "commonAnnotations"
            chart: "chart"
            directory:
              include: "include"
              jsonnet:
                extVars:
                - code: true
                  name: "name"
                  value: "value"
                - code: true
                  name: "name"
                  value: "value"
                libs:
                - "libs"
                - "libs"
                tlas:
                - code: true
                  name: "name"
                  value: "value"
                - code: true
                  name: "name"
                  value: "value"
              recurse: true
              exclude: "exclude"
            helm:
              valueFiles:
              - "valueFiles"
              - "valueFiles"
              releaseName: "releaseName"
              fileParameters:
              - path: "path"
                name: "name"
              - path: "path"
                name: "name"
              values: "values"
              passCredentials: true
              parameters:
              - forceString: true
                name: "name"
                value: "value"
              - forceString: true
                name: "name"
                value: "value"
              version: "version"
          deployedAt:
            seconds: "seconds"
            nanos: 0
          revision: "revision"
        conditions:
        - lastTransitionTime:
            seconds: "seconds"
            nanos: 0
          message: "message"
          type: "type"
        - lastTransitionTime:
            seconds: "seconds"
            nanos: 0
          message: "message"
          type: "type"
        sync:
          comparedTo:
            destination:
              server: "server"
              name: "name"
              namespace: "namespace"
            source:
              repoURL: "repoURL"
              ksonnet:
                environment: "environment"
                parameters:
                - component: "component"
                  name: "name"
                  value: "value"
                - component: "component"
                  name: "name"
                  value: "value"
              path: "path"
              targetRevision: "targetRevision"
              plugin:
                name: "name"
                env:
                - name: "name"
                  value: "value"
                - name: "name"
                  value: "value"
              kustomize:
                commonLabels:
                  key: "commonLabels"
                images:
                - "images"
                - "images"
                namePrefix: "namePrefix"
                forceCommonAnnotations: true
                nameSuffix: "nameSuffix"
                forceCommonLabels: true
                version: "version"
                commonAnnotations:
                  key: "commonAnnotations"
              chart: "chart"
              directory:
                include: "include"
                jsonnet:
                  extVars:
                  - code: true
                    name: "name"
                    value: "value"
                  - code: true
                    name: "name"
                    value: "value"
                  libs:
                  - "libs"
                  - "libs"
                  tlas:
                  - code: true
                    name: "name"
                    value: "value"
                  - code: true
                    name: "name"
                    value: "value"
                recurse: true
                exclude: "exclude"
              helm:
                valueFiles:
                - "valueFiles"
                - "valueFiles"
                releaseName: "releaseName"
                fileParameters:
                - path: "path"
                  name: "name"
                - path: "path"
                  name: "name"
                values: "values"
                passCredentials: true
                parameters:
                - forceString: true
                  name: "name"
                  value: "value"
                - forceString: true
                  name: "name"
                  value: "value"
                version: "version"
          revision: "revision"
          status: "status"
  v1alpha1ApplicationCondition:
    type: "object"
    properties:
      lastTransitionTime:
        $ref: "#/definitions/v1Time"
      message:
        type: "string"
        title: "Message contains human-readable message indicating details about condition"
      type:
        type: "string"
        title: "Type is an application condition type"
    title: "ApplicationCondition contains details about an application condition,\
      \ which is usally an error or warning"
    example:
      lastTransitionTime:
        seconds: "seconds"
        nanos: 0
      message: "message"
      type: "type"
  v1alpha1ApplicationDestination:
    type: "object"
    properties:
      name:
        type: "string"
        title: "Name is an alternate way of specifying the target cluster by its symbolic\
          \ name"
      namespace:
        type: "string"
        title: "Namespace specifies the target namespace for the application's resources.\n\
          The namespace will only be set for namespace-scoped resources that have\
          \ not set a value for .metadata.namespace"
      server:
        type: "string"
        title: "Server specifies the URL of the target cluster and must be set to\
          \ the Kubernetes control plane API"
    title: "ApplicationDestination holds information about the application's destination"
    example:
      server: "server"
      name: "name"
      namespace: "namespace"
  v1alpha1ApplicationList:
    type: "object"
    properties:
      items:
        type: "array"
        items:
          $ref: "#/definitions/v1alpha1Application"
      metadata:
        $ref: "#/definitions/v1ListMeta"
    title: "ApplicationList is list of Application resources\n+k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object"
    example:
      metadata:
        remainingItemCount: "remainingItemCount"
        continue: "continue"
        resourceVersion: "resourceVersion"
        selfLink: "selfLink"
      items:
      - metadata:
          generation: "generation"
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          deletionTimestamp:
            seconds: "seconds"
            nanos: 0
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: "deletionGracePeriodSeconds"
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1:
              Raw: "Raw"
            manager: "manager"
            subresource: "subresource"
            time:
              seconds: "seconds"
              nanos: 0
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1:
              Raw: "Raw"
            manager: "manager"
            subresource: "subresource"
            time:
              seconds: "seconds"
              nanos: 0
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp:
            seconds: "seconds"
            nanos: 0
          name: "name"
          namespace: "namespace"
        operation:
          sync:
            dryRun: true
            prune: true
            manifests:
            - "manifests"
            - "manifests"
            resources:
            - kind: "kind"
              name: "name"
              namespace: "namespace"
              group: "group"
            - kind: "kind"
              name: "name"
              namespace: "namespace"
              group: "group"
            source:
              repoURL: "repoURL"
              ksonnet:
                environment: "environment"
                parameters:
                - component: "component"
                  name: "name"
                  value: "value"
                - component: "component"
                  name: "name"
                  value: "value"
              path: "path"
              targetRevision: "targetRevision"
              plugin:
                name: "name"
                env:
                - name: "name"
                  value: "value"
                - name: "name"
                  value: "value"
              kustomize:
                commonLabels:
                  key: "commonLabels"
                images:
                - "images"
                - "images"
                namePrefix: "namePrefix"
                forceCommonAnnotations: true
                nameSuffix: "nameSuffix"
                forceCommonLabels: true
                version: "version"
                commonAnnotations:
                  key: "commonAnnotations"
              chart: "chart"
              directory:
                include: "include"
                jsonnet:
                  extVars:
                  - code: true
                    name: "name"
                    value: "value"
                  - code: true
                    name: "name"
                    value: "value"
                  libs:
                  - "libs"
                  - "libs"
                  tlas:
                  - code: true
                    name: "name"
                    value: "value"
                  - code: true
                    name: "name"
                    value: "value"
                recurse: true
                exclude: "exclude"
              helm:
                valueFiles:
                - "valueFiles"
                - "valueFiles"
                releaseName: "releaseName"
                fileParameters:
                - path: "path"
                  name: "name"
                - path: "path"
                  name: "name"
                values: "values"
                passCredentials: true
                parameters:
                - forceString: true
                  name: "name"
                  value: "value"
                - forceString: true
                  name: "name"
                  value: "value"
                version: "version"
            syncStrategy:
              hook:
                syncStrategyApply:
                  force: true
              apply:
                force: true
            syncOptions:
            - "syncOptions"
            - "syncOptions"
            revision: "revision"
          initiatedBy:
            automated: true
            username: "username"
          retry:
            backoff:
              duration: "duration"
              factor: "factor"
              maxDuration: "maxDuration"
            limit: "limit"
          info:
          - name: "name"
            value: "value"
          - name: "name"
            value: "value"
        spec:
          destination:
            server: "server"
            name: "name"
            namespace: "namespace"
          project: "project"
          revisionHistoryLimit: "revisionHistoryLimit"
          source:
            repoURL: "repoURL"
            ksonnet:
              environment: "environment"
              parameters:
              - component: "component"
                name: "name"
                value: "value"
              - component: "component"
                name: "name"
                value: "value"
            path: "path"
            targetRevision: "targetRevision"
            plugin:
              name: "name"
              env:
              - name: "name"
                value: "value"
              - name: "name"
                value: "value"
            kustomize:
              commonLabels:
                key: "commonLabels"
              images:
              - "images"
              - "images"
              namePrefix: "namePrefix"
              forceCommonAnnotations: true
              nameSuffix: "nameSuffix"
              forceCommonLabels: true
              version: "version"
              commonAnnotations:
                key: "commonAnnotations"
            chart: "chart"
            directory:
              include: "include"
              jsonnet:
                extVars:
                - code: true
                  name: "name"
                  value: "value"
                - code: true
                  name: "name"
                  value: "value"
                libs:
                - "libs"
                - "libs"
                tlas:
                - code: true
                  name: "name"
                  value: "value"
                - code: true
                  name: "name"
                  value: "value"
              recurse: true
              exclude: "exclude"
            helm:
              valueFiles:
              - "valueFiles"
              - "valueFiles"
              releaseName: "releaseName"
              fileParameters:
              - path: "path"
                name: "name"
              - path: "path"
                name: "name"
              values: "values"
              passCredentials: true
              parameters:
              - forceString: true
                name: "name"
                value: "value"
              - forceString: true
                name: "name"
                value: "value"
              version: "version"
          ignoreDifferences:
          - jqPathExpressions:
            - "jqPathExpressions"
            - "jqPathExpressions"
            jsonPointers:
            - "jsonPointers"
            - "jsonPointers"
            kind: "kind"
            name: "name"
            namespace: "namespace"
            group: "group"
          - jqPathExpressions:
            - "jqPathExpressions"
            - "jqPathExpressions"
            jsonPointers:
            - "jsonPointers"
            - "jsonPointers"
            kind: "kind"
            name: "name"
            namespace: "namespace"
            group: "group"
          syncPolicy:
            automated:
              allowEmpty: true
              selfHeal: true
              prune: true
            retry:
              backoff:
                duration: "duration"
                factor: "factor"
                maxDuration: "maxDuration"
              limit: "limit"
            syncOptions:
            - "syncOptions"
            - "syncOptions"
          info:
          - name: "name"
            value: "value"
          - name: "name"
            value: "value"
        status:
          summary:
            images:
            - "images"
            - "images"
            externalURLs:
            - "externalURLs"
            - "externalURLs"
          sourceType: "sourceType"
          observedAt:
            seconds: "seconds"
            nanos: 0
          operationState:
            phase: "phase"
            retryCount: "retryCount"
            startedAt:
              seconds: "seconds"
              nanos: 0
            syncResult:
              resources:
              - syncPhase: "syncPhase"
                kind: "kind"
                name: "name"
                namespace: "namespace"
                hookPhase: "hookPhase"
                message: "message"
                version: "version"
                hookType: "hookType"
                group: "group"
                status: "status"
              - syncPhase: "syncPhase"
                kind: "kind"
                name: "name"
                namespace: "namespace"
                hookPhase: "hookPhase"
                message: "message"
                version: "version"
                hookType: "hookType"
                group: "group"
                status: "status"
              source:
                repoURL: "repoURL"
                ksonnet:
                  environment: "environment"
                  parameters:
                  - component: "component"
                    name: "name"
                    value: "value"
                  - component: "component"
                    name: "name"
                    value: "value"
                path: "path"
                targetRevision: "targetRevision"
                plugin:
                  name: "name"
                  env:
                  - name: "name"
                    value: "value"
                  - name: "name"
                    value: "value"
                kustomize:
                  commonLabels:
                    key: "commonLabels"
                  images:
                  - "images"
                  - "images"
                  namePrefix: "namePrefix"
                  forceCommonAnnotations: true
                  nameSuffix: "nameSuffix"
                  forceCommonLabels: true
                  version: "version"
                  commonAnnotations:
                    key: "commonAnnotations"
                chart: "chart"
                directory:
                  include: "include"
                  jsonnet:
                    extVars:
                    - code: true
                      name: "name"
                      value: "value"
                    - code: true
                      name: "name"
                      value: "value"
                    libs:
                    - "libs"
                    - "libs"
                    tlas:
                    - code: true
                      name: "name"
                      value: "value"
                    - code: true
                      name: "name"
                      value: "value"
                  recurse: true
                  exclude: "exclude"
                helm:
                  valueFiles:
                  - "valueFiles"
                  - "valueFiles"
                  releaseName: "releaseName"
                  fileParameters:
                  - path: "path"
                    name: "name"
                  - path: "path"
                    name: "name"
                  values: "values"
                  passCredentials: true
                  parameters:
                  - forceString: true
                    name: "name"
                    value: "value"
                  - forceString: true
                    name: "name"
                    value: "value"
                  version: "version"
              revision: "revision"
            message: "message"
            operation:
              sync:
                dryRun: true
                prune: true
                manifests:
                - "manifests"
                - "manifests"
                resources:
                - kind: "kind"
                  name: "name"
                  namespace: "namespace"
                  group: "group"
                - kind: "kind"
                  name: "name"
                  namespace: "namespace"
                  group: "group"
                source:
                  repoURL: "repoURL"
                  ksonnet:
                    environment: "environment"
                    parameters:
                    - component: "component"
                      name: "name"
                      value: "value"
                    - component: "component"
                      name: "name"
                      value: "value"
                  path: "path"
                  targetRevision: "targetRevision"
                  plugin:
                    name: "name"
                    env:
                    - name: "name"
                      value: "value"
                    - name: "name"
                      value: "value"
                  kustomize:
                    commonLabels:
                      key: "commonLabels"
                    images:
                    - "images"
                    - "images"
                    namePrefix: "namePrefix"
                    forceCommonAnnotations: true
                    nameSuffix: "nameSuffix"
                    forceCommonLabels: true
                    version: "version"
                    commonAnnotations:
                      key: "commonAnnotations"
                  chart: "chart"
                  directory:
                    include: "include"
                    jsonnet:
                      extVars:
                      - code: true
                        name: "name"
                        value: "value"
                      - code: true
                        name: "name"
                        value: "value"
                      libs:
                      - "libs"
                      - "libs"
                      tlas:
                      - code: true
                        name: "name"
                        value: "value"
                      - code: true
                        name: "name"
                        value: "value"
                    recurse: true
                    exclude: "exclude"
                  helm:
                    valueFiles:
                    - "valueFiles"
                    - "valueFiles"
                    releaseName: "releaseName"
                    fileParameters:
                    - path: "path"
                      name: "name"
                    - path: "path"
                      name: "name"
                    values: "values"
                    passCredentials: true
                    parameters:
                    - forceString: true
                      name: "name"
                      value: "value"
                    - forceString: true
                      name: "name"
                      value: "value"
                    version: "version"
                syncStrategy:
                  hook:
                    syncStrategyApply:
                      force: true
                  apply:
                    force: true
                syncOptions:
                - "syncOptions"
                - "syncOptions"
                revision: "revision"
              initiatedBy:
                automated: true
                username: "username"
              retry:
                backoff:
                  duration: "duration"
                  factor: "factor"
                  maxDuration: "maxDuration"
                limit: "limit"
              info:
              - name: "name"
                value: "value"
              - name: "name"
                value: "value"
            finishedAt:
              seconds: "seconds"
              nanos: 0
          reconciledAt:
            seconds: "seconds"
            nanos: 0
          health:
            message: "message"
            status: "status"
          resources:
          - hook: true
            kind: "kind"
            name: "name"
            namespace: "namespace"
            health:
              message: "message"
              status: "status"
            requiresPruning: true
            version: "version"
            group: "group"
            status: "status"
          - hook: true
            kind: "kind"
            name: "name"
            namespace: "namespace"
            health:
              message: "message"
              status: "status"
            requiresPruning: true
            version: "version"
            group: "group"
            status: "status"
          history:
          - deployStartedAt:
              seconds: "seconds"
              nanos: 0
            id: "id"
            source:
              repoURL: "repoURL"
              ksonnet:
                environment: "environment"
                parameters:
                - component: "component"
                  name: "name"
                  value: "value"
                - component: "component"
                  name: "name"
                  value: "value"
              path: "path"
              targetRevision: "targetRevision"
              plugin:
                name: "name"
                env:
                - name: "name"
                  value: "value"
                - name: "name"
                  value: "value"
              kustomize:
                commonLabels:
                  key: "commonLabels"
                images:
                - "images"
                - "images"
                namePrefix: "namePrefix"
                forceCommonAnnotations: true
                nameSuffix: "nameSuffix"
                forceCommonLabels: true
                version: "version"
                commonAnnotations:
                  key: "commonAnnotations"
              chart: "chart"
              directory:
                include: "include"
                jsonnet:
                  extVars:
                  - code: true
                    name: "name"
                    value: "value"
                  - code: true
                    name: "name"
                    value: "value"
                  libs:
                  - "libs"
                  - "libs"
                  tlas:
                  - code: true
                    name: "name"
                    value: "value"
                  - code: true
                    name: "name"
                    value: "value"
                recurse: true
                exclude: "exclude"
              helm:
                valueFiles:
                - "valueFiles"
                - "valueFiles"
                releaseName: "releaseName"
                fileParameters:
                - path: "path"
                  name: "name"
                - path: "path"
                  name: "name"
                values: "values"
                passCredentials: true
                parameters:
                - forceString: true
                  name: "name"
                  value: "value"
                - forceString: true
                  name: "name"
                  value: "value"
                version: "version"
            deployedAt:
              seconds: "seconds"
              nanos: 0
            revision: "revision"
          - deployStartedAt:
              seconds: "seconds"
              nanos: 0
            id: "id"
            source:
              repoURL: "repoURL"
              ksonnet:
                environment: "environment"
                parameters:
                - component: "component"
                  name: "name"
                  value: "value"
                - component: "component"
                  name: "name"
                  value: "value"
              path: "path"
              targetRevision: "targetRevision"
              plugin:
                name: "name"
                env:
                - name: "name"
                  value: "value"
                - name: "name"
                  value: "value"
              kustomize:
                commonLabels:
                  key: "commonLabels"
                images:
                - "images"
                - "images"
                namePrefix: "namePrefix"
                forceCommonAnnotations: true
                nameSuffix: "nameSuffix"
                forceCommonLabels: true
                version: "version"
                commonAnnotations:
                  key: "commonAnnotations"
              chart: "chart"
              directory:
                include: "include"
                jsonnet:
                  extVars:
                  - code: true
                    name: "name"
                    value: "value"
                  - code: true
                    name: "name"
                    value: "value"
                  libs:
                  - "libs"
                  - "libs"
                  tlas:
                  - code: true
                    name: "name"
                    value: "value"
                  - code: true
                    name: "name"
                    value: "value"
                recurse: true
                exclude: "exclude"
              helm:
                valueFiles:
                - "valueFiles"
                - "valueFiles"
                releaseName: "releaseName"
                fileParameters:
                - path: "path"
                  name: "name"
                - path: "path"
                  name: "name"
                values: "values"
                passCredentials: true
                parameters:
                - forceString: true
                  name: "name"
                  value: "value"
                - forceString: true
                  name: "name"
                  value: "value"
                version: "version"
            deployedAt:
              seconds: "seconds"
              nanos: 0
            revision: "revision"
          conditions:
          - lastTransitionTime:
              seconds: "seconds"
              nanos: 0
            message: "message"
            type: "type"
          - lastTransitionTime:
              seconds: "seconds"
              nanos: 0
            message: "message"
            type: "type"
          sync:
            comparedTo:
              destination:
                server: "server"
                name: "name"
                namespace: "namespace"
              source:
                repoURL: "repoURL"
                ksonnet:
                  environment: "environment"
                  parameters:
                  - component: "component"
                    name: "name"
                    value: "value"
                  - component: "component"
                    name: "name"
                    value: "value"
                path: "path"
                targetRevision: "targetRevision"
                plugin:
                  name: "name"
                  env:
                  - name: "name"
                    value: "value"
                  - name: "name"
                    value: "value"
                kustomize:
                  commonLabels:
                    key: "commonLabels"
                  images:
                  - "images"
                  - "images"
                  namePrefix: "namePrefix"
                  forceCommonAnnotations: true
                  nameSuffix: "nameSuffix"
                  forceCommonLabels: true
                  version: "version"
                  commonAnnotations:
                    key: "commonAnnotations"
                chart: "chart"
                directory:
                  include: "include"
                  jsonnet:
                    extVars:
                    - code: true
                      name: "name"
                      value: "value"
                    - code: true
                      name: "name"
                      value: "value"
                    libs:
                    - "libs"
                    - "libs"
                    tlas:
                    - code: true
                      name: "name"
                      value: "value"
                    - code: true
                      name: "name"
                      value: "value"
                  recurse: true
                  exclude: "exclude"
                helm:
                  valueFiles:
                  - "valueFiles"
                  - "valueFiles"
                  releaseName: "releaseName"
                  fileParameters:
                  - path: "path"
                    name: "name"
                  - path: "path"
                    name: "name"
                  values: "values"
                  passCredentials: true
                  parameters:
                  - forceString: true
                    name: "name"
                    value: "value"
                  - forceString: true
                    name: "name"
                    value: "value"
                  version: "version"
            revision: "revision"
            status: "status"
      - metadata:
          generation: "generation"
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          deletionTimestamp:
            seconds: "seconds"
            nanos: 0
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: "deletionGracePeriodSeconds"
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1:
              Raw: "Raw"
            manager: "manager"
            subresource: "subresource"
            time:
              seconds: "seconds"
              nanos: 0
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1:
              Raw: "Raw"
            manager: "manager"
            subresource: "subresource"
            time:
              seconds: "seconds"
              nanos: 0
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp:
            seconds: "seconds"
            nanos: 0
          name: "name"
          namespace: "namespace"
        operation:
          sync:
            dryRun: true
            prune: true
            manifests:
            - "manifests"
            - "manifests"
            resources:
            - kind: "kind"
              name: "name"
              namespace: "namespace"
              group: "group"
            - kind: "kind"
              name: "name"
              namespace: "namespace"
              group: "group"
            source:
              repoURL: "repoURL"
              ksonnet:
                environment: "environment"
                parameters:
                - component: "component"
                  name: "name"
                  value: "value"
                - component: "component"
                  name: "name"
                  value: "value"
              path: "path"
              targetRevision: "targetRevision"
              plugin:
                name: "name"
                env:
                - name: "name"
                  value: "value"
                - name: "name"
                  value: "value"
              kustomize:
                commonLabels:
                  key: "commonLabels"
                images:
                - "images"
                - "images"
                namePrefix: "namePrefix"
                forceCommonAnnotations: true
                nameSuffix: "nameSuffix"
                forceCommonLabels: true
                version: "version"
                commonAnnotations:
                  key: "commonAnnotations"
              chart: "chart"
              directory:
                include: "include"
                jsonnet:
                  extVars:
                  - code: true
                    name: "name"
                    value: "value"
                  - code: true
                    name: "name"
                    value: "value"
                  libs:
                  - "libs"
                  - "libs"
                  tlas:
                  - code: true
                    name: "name"
                    value: "value"
                  - code: true
                    name: "name"
                    value: "value"
                recurse: true
                exclude: "exclude"
              helm:
                valueFiles:
                - "valueFiles"
                - "valueFiles"
                releaseName: "releaseName"
                fileParameters:
                - path: "path"
                  name: "name"
                - path: "path"
                  name: "name"
                values: "values"
                passCredentials: true
                parameters:
                - forceString: true
                  name: "name"
                  value: "value"
                - forceString: true
                  name: "name"
                  value: "value"
                version: "version"
            syncStrategy:
              hook:
                syncStrategyApply:
                  force: true
              apply:
                force: true
            syncOptions:
            - "syncOptions"
            - "syncOptions"
            revision: "revision"
          initiatedBy:
            automated: true
            username: "username"
          retry:
            backoff:
              duration: "duration"
              factor: "factor"
              maxDuration: "maxDuration"
            limit: "limit"
          info:
          - name: "name"
            value: "value"
          - name: "name"
            value: "value"
        spec:
          destination:
            server: "server"
            name: "name"
            namespace: "namespace"
          project: "project"
          revisionHistoryLimit: "revisionHistoryLimit"
          source:
            repoURL: "repoURL"
            ksonnet:
              environment: "environment"
              parameters:
              - component: "component"
                name: "name"
                value: "value"
              - component: "component"
                name: "name"
                value: "value"
            path: "path"
            targetRevision: "targetRevision"
            plugin:
              name: "name"
              env:
              - name: "name"
                value: "value"
              - name: "name"
                value: "value"
            kustomize:
              commonLabels:
                key: "commonLabels"
              images:
              - "images"
              - "images"
              namePrefix: "namePrefix"
              forceCommonAnnotations: true
              nameSuffix: "nameSuffix"
              forceCommonLabels: true
              version: "version"
              commonAnnotations:
                key: "commonAnnotations"
            chart: "chart"
            directory:
              include: "include"
              jsonnet:
                extVars:
                - code: true
                  name: "name"
                  value: "value"
                - code: true
                  name: "name"
                  value: "value"
                libs:
                - "libs"
                - "libs"
                tlas:
                - code: true
                  name: "name"
                  value: "value"
                - code: true
                  name: "name"
                  value: "value"
              recurse: true
              exclude: "exclude"
            helm:
              valueFiles:
              - "valueFiles"
              - "valueFiles"
              releaseName: "releaseName"
              fileParameters:
              - path: "path"
                name: "name"
              - path: "path"
                name: "name"
              values: "values"
              passCredentials: true
              parameters:
              - forceString: true
                name: "name"
                value: "value"
              - forceString: true
                name: "name"
                value: "value"
              version: "version"
          ignoreDifferences:
          - jqPathExpressions:
            - "jqPathExpressions"
            - "jqPathExpressions"
            jsonPointers:
            - "jsonPointers"
            - "jsonPointers"
            kind: "kind"
            name: "name"
            namespace: "namespace"
            group: "group"
          - jqPathExpressions:
            - "jqPathExpressions"
            - "jqPathExpressions"
            jsonPointers:
            - "jsonPointers"
            - "jsonPointers"
            kind: "kind"
            name: "name"
            namespace: "namespace"
            group: "group"
          syncPolicy:
            automated:
              allowEmpty: true
              selfHeal: true
              prune: true
            retry:
              backoff:
                duration: "duration"
                factor: "factor"
                maxDuration: "maxDuration"
              limit: "limit"
            syncOptions:
            - "syncOptions"
            - "syncOptions"
          info:
          - name: "name"
            value: "value"
          - name: "name"
            value: "value"
        status:
          summary:
            images:
            - "images"
            - "images"
            externalURLs:
            - "externalURLs"
            - "externalURLs"
          sourceType: "sourceType"
          observedAt:
            seconds: "seconds"
            nanos: 0
          operationState:
            phase: "phase"
            retryCount: "retryCount"
            startedAt:
              seconds: "seconds"
              nanos: 0
            syncResult:
              resources:
              - syncPhase: "syncPhase"
                kind: "kind"
                name: "name"
                namespace: "namespace"
                hookPhase: "hookPhase"
                message: "message"
                version: "version"
                hookType: "hookType"
                group: "group"
                status: "status"
              - syncPhase: "syncPhase"
                kind: "kind"
                name: "name"
                namespace: "namespace"
                hookPhase: "hookPhase"
                message: "message"
                version: "version"
                hookType: "hookType"
                group: "group"
                status: "status"
              source:
                repoURL: "repoURL"
                ksonnet:
                  environment: "environment"
                  parameters:
                  - component: "component"
                    name: "name"
                    value: "value"
                  - component: "component"
                    name: "name"
                    value: "value"
                path: "path"
                targetRevision: "targetRevision"
                plugin:
                  name: "name"
                  env:
                  - name: "name"
                    value: "value"
                  - name: "name"
                    value: "value"
                kustomize:
                  commonLabels:
                    key: "commonLabels"
                  images:
                  - "images"
                  - "images"
                  namePrefix: "namePrefix"
                  forceCommonAnnotations: true
                  nameSuffix: "nameSuffix"
                  forceCommonLabels: true
                  version: "version"
                  commonAnnotations:
                    key: "commonAnnotations"
                chart: "chart"
                directory:
                  include: "include"
                  jsonnet:
                    extVars:
                    - code: true
                      name: "name"
                      value: "value"
                    - code: true
                      name: "name"
                      value: "value"
                    libs:
                    - "libs"
                    - "libs"
                    tlas:
                    - code: true
                      name: "name"
                      value: "value"
                    - code: true
                      name: "name"
                      value: "value"
                  recurse: true
                  exclude: "exclude"
                helm:
                  valueFiles:
                  - "valueFiles"
                  - "valueFiles"
                  releaseName: "releaseName"
                  fileParameters:
                  - path: "path"
                    name: "name"
                  - path: "path"
                    name: "name"
                  values: "values"
                  passCredentials: true
                  parameters:
                  - forceString: true
                    name: "name"
                    value: "value"
                  - forceString: true
                    name: "name"
                    value: "value"
                  version: "version"
              revision: "revision"
            message: "message"
            operation:
              sync:
                dryRun: true
                prune: true
                manifests:
                - "manifests"
                - "manifests"
                resources:
                - kind: "kind"
                  name: "name"
                  namespace: "namespace"
                  group: "group"
                - kind: "kind"
                  name: "name"
                  namespace: "namespace"
                  group: "group"
                source:
                  repoURL: "repoURL"
                  ksonnet:
                    environment: "environment"
                    parameters:
                    - component: "component"
                      name: "name"
                      value: "value"
                    - component: "component"
                      name: "name"
                      value: "value"
                  path: "path"
                  targetRevision: "targetRevision"
                  plugin:
                    name: "name"
                    env:
                    - name: "name"
                      value: "value"
                    - name: "name"
                      value: "value"
                  kustomize:
                    commonLabels:
                      key: "commonLabels"
                    images:
                    - "images"
                    - "images"
                    namePrefix: "namePrefix"
                    forceCommonAnnotations: true
                    nameSuffix: "nameSuffix"
                    forceCommonLabels: true
                    version: "version"
                    commonAnnotations:
                      key: "commonAnnotations"
                  chart: "chart"
                  directory:
                    include: "include"
                    jsonnet:
                      extVars:
                      - code: true
                        name: "name"
                        value: "value"
                      - code: true
                        name: "name"
                        value: "value"
                      libs:
                      - "libs"
                      - "libs"
                      tlas:
                      - code: true
                        name: "name"
                        value: "value"
                      - code: true
                        name: "name"
                        value: "value"
                    recurse: true
                    exclude: "exclude"
                  helm:
                    valueFiles:
                    - "valueFiles"
                    - "valueFiles"
                    releaseName: "releaseName"
                    fileParameters:
                    - path: "path"
                      name: "name"
                    - path: "path"
                      name: "name"
                    values: "values"
                    passCredentials: true
                    parameters:
                    - forceString: true
                      name: "name"
                      value: "value"
                    - forceString: true
                      name: "name"
                      value: "value"
                    version: "version"
                syncStrategy:
                  hook:
                    syncStrategyApply:
                      force: true
                  apply:
                    force: true
                syncOptions:
                - "syncOptions"
                - "syncOptions"
                revision: "revision"
              initiatedBy:
                automated: true
                username: "username"
              retry:
                backoff:
                  duration: "duration"
                  factor: "factor"
                  maxDuration: "maxDuration"
                limit: "limit"
              info:
              - name: "name"
                value: "value"
              - name: "name"
                value: "value"
            finishedAt:
              seconds: "seconds"
              nanos: 0
          reconciledAt:
            seconds: "seconds"
            nanos: 0
          health:
            message: "message"
            status: "status"
          resources:
          - hook: true
            kind: "kind"
            name: "name"
            namespace: "namespace"
            health:
              message: "message"
              status: "status"
            requiresPruning: true
            version: "version"
            group: "group"
            status: "status"
          - hook: true
            kind: "kind"
            name: "name"
            namespace: "namespace"
            health:
              message: "message"
              status: "status"
            requiresPruning: true
            version: "version"
            group: "group"
            status: "status"
          history:
          - deployStartedAt:
              seconds: "seconds"
              nanos: 0
            id: "id"
            source:
              repoURL: "repoURL"
              ksonnet:
                environment: "environment"
                parameters:
                - component: "component"
                  name: "name"
                  value: "value"
                - component: "component"
                  name: "name"
                  value: "value"
              path: "path"
              targetRevision: "targetRevision"
              plugin:
                name: "name"
                env:
                - name: "name"
                  value: "value"
                - name: "name"
                  value: "value"
              kustomize:
                commonLabels:
                  key: "commonLabels"
                images:
                - "images"
                - "images"
                namePrefix: "namePrefix"
                forceCommonAnnotations: true
                nameSuffix: "nameSuffix"
                forceCommonLabels: true
                version: "version"
                commonAnnotations:
                  key: "commonAnnotations"
              chart: "chart"
              directory:
                include: "include"
                jsonnet:
                  extVars:
                  - code: true
                    name: "name"
                    value: "value"
                  - code: true
                    name: "name"
                    value: "value"
                  libs:
                  - "libs"
                  - "libs"
                  tlas:
                  - code: true
                    name: "name"
                    value: "value"
                  - code: true
                    name: "name"
                    value: "value"
                recurse: true
                exclude: "exclude"
              helm:
                valueFiles:
                - "valueFiles"
                - "valueFiles"
                releaseName: "releaseName"
                fileParameters:
                - path: "path"
                  name: "name"
                - path: "path"
                  name: "name"
                values: "values"
                passCredentials: true
                parameters:
                - forceString: true
                  name: "name"
                  value: "value"
                - forceString: true
                  name: "name"
                  value: "value"
                version: "version"
            deployedAt:
              seconds: "seconds"
              nanos: 0
            revision: "revision"
          - deployStartedAt:
              seconds: "seconds"
              nanos: 0
            id: "id"
            source:
              repoURL: "repoURL"
              ksonnet:
                environment: "environment"
                parameters:
                - component: "component"
                  name: "name"
                  value: "value"
                - component: "component"
                  name: "name"
                  value: "value"
              path: "path"
              targetRevision: "targetRevision"
              plugin:
                name: "name"
                env:
                - name: "name"
                  value: "value"
                - name: "name"
                  value: "value"
              kustomize:
                commonLabels:
                  key: "commonLabels"
                images:
                - "images"
                - "images"
                namePrefix: "namePrefix"
                forceCommonAnnotations: true
                nameSuffix: "nameSuffix"
                forceCommonLabels: true
                version: "version"
                commonAnnotations:
                  key: "commonAnnotations"
              chart: "chart"
              directory:
                include: "include"
                jsonnet:
                  extVars:
                  - code: true
                    name: "name"
                    value: "value"
                  - code: true
                    name: "name"
                    value: "value"
                  libs:
                  - "libs"
                  - "libs"
                  tlas:
                  - code: true
                    name: "name"
                    value: "value"
                  - code: true
                    name: "name"
                    value: "value"
                recurse: true
                exclude: "exclude"
              helm:
                valueFiles:
                - "valueFiles"
                - "valueFiles"
                releaseName: "releaseName"
                fileParameters:
                - path: "path"
                  name: "name"
                - path: "path"
                  name: "name"
                values: "values"
                passCredentials: true
                parameters:
                - forceString: true
                  name: "name"
                  value: "value"
                - forceString: true
                  name: "name"
                  value: "value"
                version: "version"
            deployedAt:
              seconds: "seconds"
              nanos: 0
            revision: "revision"
          conditions:
          - lastTransitionTime:
              seconds: "seconds"
              nanos: 0
            message: "message"
            type: "type"
          - lastTransitionTime:
              seconds: "seconds"
              nanos: 0
            message: "message"
            type: "type"
          sync:
            comparedTo:
              destination:
                server: "server"
                name: "name"
                namespace: "namespace"
              source:
                repoURL: "repoURL"
                ksonnet:
                  environment: "environment"
                  parameters:
                  - component: "component"
                    name: "name"
                    value: "value"
                  - component: "component"
                    name: "name"
                    value: "value"
                path: "path"
                targetRevision: "targetRevision"
                plugin:
                  name: "name"
                  env:
                  - name: "name"
                    value: "value"
                  - name: "name"
                    value: "value"
                kustomize:
                  commonLabels:
                    key: "commonLabels"
                  images:
                  - "images"
                  - "images"
                  namePrefix: "namePrefix"
                  forceCommonAnnotations: true
                  nameSuffix: "nameSuffix"
                  forceCommonLabels: true
                  version: "version"
                  commonAnnotations:
                    key: "commonAnnotations"
                chart: "chart"
                directory:
                  include: "include"
                  jsonnet:
                    extVars:
                    - code: true
                      name: "name"
                      value: "value"
                    - code: true
                      name: "name"
                      value: "value"
                    libs:
                    - "libs"
                    - "libs"
                    tlas:
                    - code: true
                      name: "name"
                      value: "value"
                    - code: true
                      name: "name"
                      value: "value"
                  recurse: true
                  exclude: "exclude"
                helm:
                  valueFiles:
                  - "valueFiles"
                  - "valueFiles"
                  releaseName: "releaseName"
                  fileParameters:
                  - path: "path"
                    name: "name"
                  - path: "path"
                    name: "name"
                  values: "values"
                  passCredentials: true
                  parameters:
                  - forceString: true
                    name: "name"
                    value: "value"
                  - forceString: true
                    name: "name"
                    value: "value"
                  version: "version"
            revision: "revision"
            status: "status"
  v1alpha1ApplicationSource:
    type: "object"
    properties:
      chart:
        type: "string"
        description: "Chart is a Helm chart name, and must be specified for applications\
          \ sourced from a Helm repo."
      directory:
        $ref: "#/definitions/v1alpha1ApplicationSourceDirectory"
      helm:
        $ref: "#/definitions/v1alpha1ApplicationSourceHelm"
      ksonnet:
        $ref: "#/definitions/v1alpha1ApplicationSourceKsonnet"
      kustomize:
        $ref: "#/definitions/v1alpha1ApplicationSourceKustomize"
      path:
        type: "string"
        description: "Path is a directory path within the Git repository, and is only\
          \ valid for applications sourced from Git."
      plugin:
        $ref: "#/definitions/v1alpha1ApplicationSourcePlugin"
      repoURL:
        type: "string"
        title: "RepoURL is the URL to the repository (Git or Helm) that contains the\
          \ application manifests"
      targetRevision:
        type: "string"
        description: "TargetRevision defines the revision of the source to sync the\
          \ application to.\nIn case of Git, this can be commit, tag, or branch. If\
          \ omitted, will equal to HEAD.\nIn case of Helm, this is a semver tag for\
          \ the Chart's version."
    title: "ApplicationSource contains all required information about the source of\
      \ an application"
    example:
      repoURL: "repoURL"
      ksonnet:
        environment: "environment"
        parameters:
        - component: "component"
          name: "name"
          value: "value"
        - component: "component"
          name: "name"
          value: "value"
      path: "path"
      targetRevision: "targetRevision"
      plugin:
        name: "name"
        env:
        - name: "name"
          value: "value"
        - name: "name"
          value: "value"
      kustomize:
        commonLabels:
          key: "commonLabels"
        images:
        - "images"
        - "images"
        namePrefix: "namePrefix"
        forceCommonAnnotations: true
        nameSuffix: "nameSuffix"
        forceCommonLabels: true
        version: "version"
        commonAnnotations:
          key: "commonAnnotations"
      chart: "chart"
      directory:
        include: "include"
        jsonnet:
          extVars:
          - code: true
            name: "name"
            value: "value"
          - code: true
            name: "name"
            value: "value"
          libs:
          - "libs"
          - "libs"
          tlas:
          - code: true
            name: "name"
            value: "value"
          - code: true
            name: "name"
            value: "value"
        recurse: true
        exclude: "exclude"
      helm:
        valueFiles:
        - "valueFiles"
        - "valueFiles"
        releaseName: "releaseName"
        fileParameters:
        - path: "path"
          name: "name"
        - path: "path"
          name: "name"
        values: "values"
        passCredentials: true
        parameters:
        - forceString: true
          name: "name"
          value: "value"
        - forceString: true
          name: "name"
          value: "value"
        version: "version"
  v1alpha1ApplicationSourceDirectory:
    type: "object"
    properties:
      exclude:
        type: "string"
        title: "Exclude contains a glob pattern to match paths against that should\
          \ be explicitly excluded from being used during manifest generation"
      include:
        type: "string"
        title: "Include contains a glob pattern to match paths against that should\
          \ be explicitly included during manifest generation"
      jsonnet:
        $ref: "#/definitions/v1alpha1ApplicationSourceJsonnet"
      recurse:
        type: "boolean"
        title: "Recurse specifies whether to scan a directory recursively for manifests"
    title: "ApplicationSourceDirectory holds options for applications of type plain\
      \ YAML or Jsonnet"
    example:
      include: "include"
      jsonnet:
        extVars:
        - code: true
          name: "name"
          value: "value"
        - code: true
          name: "name"
          value: "value"
        libs:
        - "libs"
        - "libs"
        tlas:
        - code: true
          name: "name"
          value: "value"
        - code: true
          name: "name"
          value: "value"
      recurse: true
      exclude: "exclude"
  v1alpha1ApplicationSourceHelm:
    type: "object"
    properties:
      fileParameters:
        type: "array"
        title: "FileParameters are file parameters to the helm template"
        items:
          $ref: "#/definitions/v1alpha1HelmFileParameter"
      parameters:
        type: "array"
        title: "Parameters is a list of Helm parameters which are passed to the helm\
          \ template command upon manifest generation"
        items:
          $ref: "#/definitions/v1alpha1HelmParameter"
      passCredentials:
        type: "boolean"
        title: "PassCredentials pass credentials to all domains (Helm's --pass-credentials)"
      releaseName:
        type: "string"
        title: "ReleaseName is the Helm release name to use. If omitted it will use\
          \ the application name"
      valueFiles:
        type: "array"
        title: "ValuesFiles is a list of Helm value files to use when generating a\
          \ template"
        items:
          type: "string"
      values:
        type: "string"
        title: "Values specifies Helm values to be passed to helm template, typically\
          \ defined as a block"
      version:
        type: "string"
        title: "Version is the Helm version to use for templating (either \"2\" or\
          \ \"3\")"
    title: "ApplicationSourceHelm holds helm specific options"
    example:
      valueFiles:
      - "valueFiles"
      - "valueFiles"
      releaseName: "releaseName"
      fileParameters:
      - path: "path"
        name: "name"
      - path: "path"
        name: "name"
      values: "values"
      passCredentials: true
      parameters:
      - forceString: true
        name: "name"
        value: "value"
      - forceString: true
        name: "name"
        value: "value"
      version: "version"
  v1alpha1ApplicationSourceJsonnet:
    type: "object"
    properties:
      extVars:
        type: "array"
        title: "ExtVars is a list of Jsonnet External Variables"
        items:
          $ref: "#/definitions/v1alpha1JsonnetVar"
      libs:
        type: "array"
        title: "Additional library search dirs"
        items:
          type: "string"
      tlas:
        type: "array"
        title: "TLAS is a list of Jsonnet Top-level Arguments"
        items:
          $ref: "#/definitions/v1alpha1JsonnetVar"
    title: "ApplicationSourceJsonnet holds options specific to applications of type\
      \ Jsonnet"
    example:
      extVars:
      - code: true
        name: "name"
        value: "value"
      - code: true
        name: "name"
        value: "value"
      libs:
      - "libs"
      - "libs"
      tlas:
      - code: true
        name: "name"
        value: "value"
      - code: true
        name: "name"
        value: "value"
  v1alpha1ApplicationSourceKsonnet:
    type: "object"
    properties:
      environment:
        type: "string"
        title: "Environment is a ksonnet application environment name"
      parameters:
        type: "array"
        title: "Parameters are a list of ksonnet component parameter override values"
        items:
          $ref: "#/definitions/v1alpha1KsonnetParameter"
    title: "ApplicationSourceKsonnet holds ksonnet specific options"
    example:
      environment: "environment"
      parameters:
      - component: "component"
        name: "name"
        value: "value"
      - component: "component"
        name: "name"
        value: "value"
  v1alpha1ApplicationSourceKustomize:
    type: "object"
    properties:
      commonAnnotations:
        type: "object"
        title: "CommonAnnotations is a list of additional annotations to add to rendered\
          \ manifests"
        additionalProperties:
          type: "string"
      commonLabels:
        type: "object"
        title: "CommonLabels is a list of additional labels to add to rendered manifests"
        additionalProperties:
          type: "string"
      forceCommonAnnotations:
        type: "boolean"
        title: "ForceCommonAnnotations specifies whether to force applying common\
          \ annotations to resources for Kustomize apps"
      forceCommonLabels:
        type: "boolean"
        title: "ForceCommonLabels specifies whether to force applying common labels\
          \ to resources for Kustomize apps"
      images:
        type: "array"
        title: "Images is a list of Kustomize image override specifications"
        items:
          type: "string"
      namePrefix:
        type: "string"
        title: "NamePrefix is a prefix appended to resources for Kustomize apps"
      nameSuffix:
        type: "string"
        title: "NameSuffix is a suffix appended to resources for Kustomize apps"
      version:
        type: "string"
        title: "Version controls which version of Kustomize to use for rendering manifests"
    title: "ApplicationSourceKustomize holds options specific to an Application source\
      \ specific to Kustomize"
    example:
      commonLabels:
        key: "commonLabels"
      images:
      - "images"
      - "images"
      namePrefix: "namePrefix"
      forceCommonAnnotations: true
      nameSuffix: "nameSuffix"
      forceCommonLabels: true
      version: "version"
      commonAnnotations:
        key: "commonAnnotations"
  v1alpha1ApplicationSourcePlugin:
    type: "object"
    properties:
      env:
        type: "array"
        items:
          $ref: "#/definitions/applicationv1alpha1EnvEntry"
      name:
        type: "string"
    title: "ApplicationSourcePlugin holds options specific to config management plugins"
    example:
      name: "name"
      env:
      - name: "name"
        value: "value"
      - name: "name"
        value: "value"
  v1alpha1ApplicationSpec:
    type: "object"
    properties:
      destination:
        $ref: "#/definitions/v1alpha1ApplicationDestination"
      ignoreDifferences:
        type: "array"
        title: "IgnoreDifferences is a list of resources and their fields which should\
          \ be ignored during comparison"
        items:
          $ref: "#/definitions/v1alpha1ResourceIgnoreDifferences"
      info:
        type: "array"
        title: "Info contains a list of information (URLs, email addresses, and plain\
          \ text) that relates to the application"
        items:
          $ref: "#/definitions/v1alpha1Info"
      project:
        type: "string"
        description: "Project is a reference to the project this application belongs\
          \ to.\nThe empty string means that application belongs to the 'default'\
          \ project."
      revisionHistoryLimit:
        type: "string"
        format: "int64"
        description: "RevisionHistoryLimit limits the number of items kept in the\
          \ application's revision history, which is used for informational purposes\
          \ as well as for rollbacks to previous versions.\nThis should only be changed\
          \ in exceptional circumstances.\nSetting to zero will store no history.\
          \ This will reduce storage used.\nIncreasing will increase the space used\
          \ to store the history, so we do not recommend increasing it.\nDefault is\
          \ 10."
      source:
        $ref: "#/definitions/v1alpha1ApplicationSource"
      syncPolicy:
        $ref: "#/definitions/v1alpha1SyncPolicy"
    description: "ApplicationSpec represents desired application state. Contains link\
      \ to repository with application definition and additional parameters link definition\
      \ revision."
    example:
      destination:
        server: "server"
        name: "name"
        namespace: "namespace"
      project: "project"
      revisionHistoryLimit: "revisionHistoryLimit"
      source:
        repoURL: "repoURL"
        ksonnet:
          environment: "environment"
          parameters:
          - component: "component"
            name: "name"
            value: "value"
          - component: "component"
            name: "name"
            value: "value"
        path: "path"
        targetRevision: "targetRevision"
        plugin:
          name: "name"
          env:
          - name: "name"
            value: "value"
          - name: "name"
            value: "value"
        kustomize:
          commonLabels:
            key: "commonLabels"
          images:
          - "images"
          - "images"
          namePrefix: "namePrefix"
          forceCommonAnnotations: true
          nameSuffix: "nameSuffix"
          forceCommonLabels: true
          version: "version"
          commonAnnotations:
            key: "commonAnnotations"
        chart: "chart"
        directory:
          include: "include"
          jsonnet:
            extVars:
            - code: true
              name: "name"
              value: "value"
            - code: true
              name: "name"
              value: "value"
            libs:
            - "libs"
            - "libs"
            tlas:
            - code: true
              name: "name"
              value: "value"
            - code: true
              name: "name"
              value: "value"
          recurse: true
          exclude: "exclude"
        helm:
          valueFiles:
          - "valueFiles"
          - "valueFiles"
          releaseName: "releaseName"
          fileParameters:
          - path: "path"
            name: "name"
          - path: "path"
            name: "name"
          values: "values"
          passCredentials: true
          parameters:
          - forceString: true
            name: "name"
            value: "value"
          - forceString: true
            name: "name"
            value: "value"
          version: "version"
      ignoreDifferences:
      - jqPathExpressions:
        - "jqPathExpressions"
        - "jqPathExpressions"
        jsonPointers:
        - "jsonPointers"
        - "jsonPointers"
        kind: "kind"
        name: "name"
        namespace: "namespace"
        group: "group"
      - jqPathExpressions:
        - "jqPathExpressions"
        - "jqPathExpressions"
        jsonPointers:
        - "jsonPointers"
        - "jsonPointers"
        kind: "kind"
        name: "name"
        namespace: "namespace"
        group: "group"
      syncPolicy:
        automated:
          allowEmpty: true
          selfHeal: true
          prune: true
        retry:
          backoff:
            duration: "duration"
            factor: "factor"
            maxDuration: "maxDuration"
          limit: "limit"
        syncOptions:
        - "syncOptions"
        - "syncOptions"
      info:
      - name: "name"
        value: "value"
      - name: "name"
        value: "value"
  v1alpha1ApplicationStatus:
    type: "object"
    properties:
      conditions:
        type: "array"
        title: "Conditions is a list of currently observed application conditions"
        items:
          $ref: "#/definitions/v1alpha1ApplicationCondition"
      health:
        $ref: "#/definitions/v1alpha1HealthStatus"
      history:
        type: "array"
        title: "History contains information about the application's sync history"
        items:
          $ref: "#/definitions/v1alpha1RevisionHistory"
      observedAt:
        $ref: "#/definitions/v1Time"
      operationState:
        $ref: "#/definitions/v1alpha1OperationState"
      reconciledAt:
        $ref: "#/definitions/v1Time"
      resources:
        type: "array"
        title: "Resources is a list of Kubernetes resources managed by this application"
        items:
          $ref: "#/definitions/v1alpha1ResourceStatus"
      sourceType:
        type: "string"
        title: "SourceType specifies the type of this application"
      summary:
        $ref: "#/definitions/v1alpha1ApplicationSummary"
      sync:
        $ref: "#/definitions/v1alpha1SyncStatus"
    title: "ApplicationStatus contains status information for the application"
    example:
      summary:
        images:
        - "images"
        - "images"
        externalURLs:
        - "externalURLs"
        - "externalURLs"
      sourceType: "sourceType"
      observedAt:
        seconds: "seconds"
        nanos: 0
      operationState:
        phase: "phase"
        retryCount: "retryCount"
        startedAt:
          seconds: "seconds"
          nanos: 0
        syncResult:
          resources:
          - syncPhase: "syncPhase"
            kind: "kind"
            name: "name"
            namespace: "namespace"
            hookPhase: "hookPhase"
            message: "message"
            version: "version"
            hookType: "hookType"
            group: "group"
            status: "status"
          - syncPhase: "syncPhase"
            kind: "kind"
            name: "name"
            namespace: "namespace"
            hookPhase: "hookPhase"
            message: "message"
            version: "version"
            hookType: "hookType"
            group: "group"
            status: "status"
          source:
            repoURL: "repoURL"
            ksonnet:
              environment: "environment"
              parameters:
              - component: "component"
                name: "name"
                value: "value"
              - component: "component"
                name: "name"
                value: "value"
            path: "path"
            targetRevision: "targetRevision"
            plugin:
              name: "name"
              env:
              - name: "name"
                value: "value"
              - name: "name"
                value: "value"
            kustomize:
              commonLabels:
                key: "commonLabels"
              images:
              - "images"
              - "images"
              namePrefix: "namePrefix"
              forceCommonAnnotations: true
              nameSuffix: "nameSuffix"
              forceCommonLabels: true
              version: "version"
              commonAnnotations:
                key: "commonAnnotations"
            chart: "chart"
            directory:
              include: "include"
              jsonnet:
                extVars:
                - code: true
                  name: "name"
                  value: "value"
                - code: true
                  name: "name"
                  value: "value"
                libs:
                - "libs"
                - "libs"
                tlas:
                - code: true
                  name: "name"
                  value: "value"
                - code: true
                  name: "name"
                  value: "value"
              recurse: true
              exclude: "exclude"
            helm:
              valueFiles:
              - "valueFiles"
              - "valueFiles"
              releaseName: "releaseName"
              fileParameters:
              - path: "path"
                name: "name"
              - path: "path"
                name: "name"
              values: "values"
              passCredentials: true
              parameters:
              - forceString: true
                name: "name"
                value: "value"
              - forceString: true
                name: "name"
                value: "value"
              version: "version"
          revision: "revision"
        message: "message"
        operation:
          sync:
            dryRun: true
            prune: true
            manifests:
            - "manifests"
            - "manifests"
            resources:
            - kind: "kind"
              name: "name"
              namespace: "namespace"
              group: "group"
            - kind: "kind"
              name: "name"
              namespace: "namespace"
              group: "group"
            source:
              repoURL: "repoURL"
              ksonnet:
                environment: "environment"
                parameters:
                - component: "component"
                  name: "name"
                  value: "value"
                - component: "component"
                  name: "name"
                  value: "value"
              path: "path"
              targetRevision: "targetRevision"
              plugin:
                name: "name"
                env:
                - name: "name"
                  value: "value"
                - name: "name"
                  value: "value"
              kustomize:
                commonLabels:
                  key: "commonLabels"
                images:
                - "images"
                - "images"
                namePrefix: "namePrefix"
                forceCommonAnnotations: true
                nameSuffix: "nameSuffix"
                forceCommonLabels: true
                version: "version"
                commonAnnotations:
                  key: "commonAnnotations"
              chart: "chart"
              directory:
                include: "include"
                jsonnet:
                  extVars:
                  - code: true
                    name: "name"
                    value: "value"
                  - code: true
                    name: "name"
                    value: "value"
                  libs:
                  - "libs"
                  - "libs"
                  tlas:
                  - code: true
                    name: "name"
                    value: "value"
                  - code: true
                    name: "name"
                    value: "value"
                recurse: true
                exclude: "exclude"
              helm:
                valueFiles:
                - "valueFiles"
                - "valueFiles"
                releaseName: "releaseName"
                fileParameters:
                - path: "path"
                  name: "name"
                - path: "path"
                  name: "name"
                values: "values"
                passCredentials: true
                parameters:
                - forceString: true
                  name: "name"
                  value: "value"
                - forceString: true
                  name: "name"
                  value: "value"
                version: "version"
            syncStrategy:
              hook:
                syncStrategyApply:
                  force: true
              apply:
                force: true
            syncOptions:
            - "syncOptions"
            - "syncOptions"
            revision: "revision"
          initiatedBy:
            automated: true
            username: "username"
          retry:
            backoff:
              duration: "duration"
              factor: "factor"
              maxDuration: "maxDuration"
            limit: "limit"
          info:
          - name: "name"
            value: "value"
          - name: "name"
            value: "value"
        finishedAt:
          seconds: "seconds"
          nanos: 0
      reconciledAt:
        seconds: "seconds"
        nanos: 0
      health:
        message: "message"
        status: "status"
      resources:
      - hook: true
        kind: "kind"
        name: "name"
        namespace: "namespace"
        health:
          message: "message"
          status: "status"
        requiresPruning: true
        version: "version"
        group: "group"
        status: "status"
      - hook: true
        kind: "kind"
        name: "name"
        namespace: "namespace"
        health:
          message: "message"
          status: "status"
        requiresPruning: true
        version: "version"
        group: "group"
        status: "status"
      history:
      - deployStartedAt:
          seconds: "seconds"
          nanos: 0
        id: "id"
        source:
          repoURL: "repoURL"
          ksonnet:
            environment: "environment"
            parameters:
            - component: "component"
              name: "name"
              value: "value"
            - component: "component"
              name: "name"
              value: "value"
          path: "path"
          targetRevision: "targetRevision"
          plugin:
            name: "name"
            env:
            - name: "name"
              value: "value"
            - name: "name"
              value: "value"
          kustomize:
            commonLabels:
              key: "commonLabels"
            images:
            - "images"
            - "images"
            namePrefix: "namePrefix"
            forceCommonAnnotations: true
            nameSuffix: "nameSuffix"
            forceCommonLabels: true
            version: "version"
            commonAnnotations:
              key: "commonAnnotations"
          chart: "chart"
          directory:
            include: "include"
            jsonnet:
              extVars:
              - code: true
                name: "name"
                value: "value"
              - code: true
                name: "name"
                value: "value"
              libs:
              - "libs"
              - "libs"
              tlas:
              - code: true
                name: "name"
                value: "value"
              - code: true
                name: "name"
                value: "value"
            recurse: true
            exclude: "exclude"
          helm:
            valueFiles:
            - "valueFiles"
            - "valueFiles"
            releaseName: "releaseName"
            fileParameters:
            - path: "path"
              name: "name"
            - path: "path"
              name: "name"
            values: "values"
            passCredentials: true
            parameters:
            - forceString: true
              name: "name"
              value: "value"
            - forceString: true
              name: "name"
              value: "value"
            version: "version"
        deployedAt:
          seconds: "seconds"
          nanos: 0
        revision: "revision"
      - deployStartedAt:
          seconds: "seconds"
          nanos: 0
        id: "id"
        source:
          repoURL: "repoURL"
          ksonnet:
            environment: "environment"
            parameters:
            - component: "component"
              name: "name"
              value: "value"
            - component: "component"
              name: "name"
              value: "value"
          path: "path"
          targetRevision: "targetRevision"
          plugin:
            name: "name"
            env:
            - name: "name"
              value: "value"
            - name: "name"
              value: "value"
          kustomize:
            commonLabels:
              key: "commonLabels"
            images:
            - "images"
            - "images"
            namePrefix: "namePrefix"
            forceCommonAnnotations: true
            nameSuffix: "nameSuffix"
            forceCommonLabels: true
            version: "version"
            commonAnnotations:
              key: "commonAnnotations"
          chart: "chart"
          directory:
            include: "include"
            jsonnet:
              extVars:
              - code: true
                name: "name"
                value: "value"
              - code: true
                name: "name"
                value: "value"
              libs:
              - "libs"
              - "libs"
              tlas:
              - code: true
                name: "name"
                value: "value"
              - code: true
                name: "name"
                value: "value"
            recurse: true
            exclude: "exclude"
          helm:
            valueFiles:
            - "valueFiles"
            - "valueFiles"
            releaseName: "releaseName"
            fileParameters:
            - path: "path"
              name: "name"
            - path: "path"
              name: "name"
            values: "values"
            passCredentials: true
            parameters:
            - forceString: true
              name: "name"
              value: "value"
            - forceString: true
              name: "name"
              value: "value"
            version: "version"
        deployedAt:
          seconds: "seconds"
          nanos: 0
        revision: "revision"
      conditions:
      - lastTransitionTime:
          seconds: "seconds"
          nanos: 0
        message: "message"
        type: "type"
      - lastTransitionTime:
          seconds: "seconds"
          nanos: 0
        message: "message"
        type: "type"
      sync:
        comparedTo:
          destination:
            server: "server"
            name: "name"
            namespace: "namespace"
          source:
            repoURL: "repoURL"
            ksonnet:
              environment: "environment"
              parameters:
              - component: "component"
                name: "name"
                value: "value"
              - component: "component"
                name: "name"
                value: "value"
            path: "path"
            targetRevision: "targetRevision"
            plugin:
              name: "name"
              env:
              - name: "name"
                value: "value"
              - name: "name"
                value: "value"
            kustomize:
              commonLabels:
                key: "commonLabels"
              images:
              - "images"
              - "images"
              namePrefix: "namePrefix"
              forceCommonAnnotations: true
              nameSuffix: "nameSuffix"
              forceCommonLabels: true
              version: "version"
              commonAnnotations:
                key: "commonAnnotations"
            chart: "chart"
            directory:
              include: "include"
              jsonnet:
                extVars:
                - code: true
                  name: "name"
                  value: "value"
                - code: true
                  name: "name"
                  value: "value"
                libs:
                - "libs"
                - "libs"
                tlas:
                - code: true
                  name: "name"
                  value: "value"
                - code: true
                  name: "name"
                  value: "value"
              recurse: true
              exclude: "exclude"
            helm:
              valueFiles:
              - "valueFiles"
              - "valueFiles"
              releaseName: "releaseName"
              fileParameters:
              - path: "path"
                name: "name"
              - path: "path"
                name: "name"
              values: "values"
              passCredentials: true
              parameters:
              - forceString: true
                name: "name"
                value: "value"
              - forceString: true
                name: "name"
                value: "value"
              version: "version"
        revision: "revision"
        status: "status"
  v1alpha1ApplicationSummary:
    type: "object"
    properties:
      externalURLs:
        type: "array"
        description: "ExternalURLs holds all external URLs of application child resources."
        items:
          type: "string"
      images:
        type: "array"
        description: "Images holds all images of application child resources."
        items:
          type: "string"
    title: "ApplicationSummary contains information about URLs and container images\
      \ used by an application"
    example:
      images:
      - "images"
      - "images"
      externalURLs:
      - "externalURLs"
      - "externalURLs"
  v1alpha1ApplicationTree:
    type: "object"
    properties:
      hosts:
        type: "array"
        title: "Hosts holds list of Kubernetes nodes that run application related\
          \ pods"
        items:
          $ref: "#/definitions/v1alpha1HostInfo"
      nodes:
        type: "array"
        description: "Nodes contains list of nodes which either directly managed by\
          \ the application and children of directly managed nodes."
        items:
          $ref: "#/definitions/v1alpha1ResourceNode"
      orphanedNodes:
        type: "array"
        description: "OrphanedNodes contains if or orphaned nodes: nodes which are\
          \ not managed by the app but in the same namespace. List is populated only\
          \ if orphaned resources enabled in app project."
        items:
          $ref: "#/definitions/v1alpha1ResourceNode"
    title: "ApplicationTree holds nodes which belongs to the application\nTODO: describe\
      \ purpose of this type"
    example:
      orphanedNodes:
      - resourceRef:
          uid: "uid"
          kind: "kind"
          name: "name"
          namespace: "namespace"
          version: "version"
          group: "group"
        createdAt:
          seconds: "seconds"
          nanos: 0
        images:
        - "images"
        - "images"
        parentRefs:
        - uid: "uid"
          kind: "kind"
          name: "name"
          namespace: "namespace"
          version: "version"
          group: "group"
        - uid: "uid"
          kind: "kind"
          name: "name"
          namespace: "namespace"
          version: "version"
          group: "group"
        resourceVersion: "resourceVersion"
        health:
          message: "message"
          status: "status"
        info:
        - name: "name"
          value: "value"
        - name: "name"
          value: "value"
        networkingInfo:
          ingress:
          - hostname: "hostname"
            ip: "ip"
            ports:
            - protocol: "protocol"
              port: 0
              error: "error"
            - protocol: "protocol"
              port: 0
              error: "error"
          - hostname: "hostname"
            ip: "ip"
            ports:
            - protocol: "protocol"
              port: 0
              error: "error"
            - protocol: "protocol"
              port: 0
              error: "error"
          targetRefs:
          - uid: "uid"
            kind: "kind"
            name: "name"
            namespace: "namespace"
            version: "version"
            group: "group"
          - uid: "uid"
            kind: "kind"
            name: "name"
            namespace: "namespace"
            version: "version"
            group: "group"
          targetLabels:
            key: "targetLabels"
          externalURLs:
          - "externalURLs"
          - "externalURLs"
          labels:
            key: "labels"
      - resourceRef:
          uid: "uid"
          kind: "kind"
          name: "name"
          namespace: "namespace"
          version: "version"
          group: "group"
        createdAt:
          seconds: "seconds"
          nanos: 0
        images:
        - "images"
        - "images"
        parentRefs:
        - uid: "uid"
          kind: "kind"
          name: "name"
          namespace: "namespace"
          version: "version"
          group: "group"
        - uid: "uid"
          kind: "kind"
          name: "name"
          namespace: "namespace"
          version: "version"
          group: "group"
        resourceVersion: "resourceVersion"
        health:
          message: "message"
          status: "status"
        info:
        - name: "name"
          value: "value"
        - name: "name"
          value: "value"
        networkingInfo:
          ingress:
          - hostname: "hostname"
            ip: "ip"
            ports:
            - protocol: "protocol"
              port: 0
              error: "error"
            - protocol: "protocol"
              port: 0
              error: "error"
          - hostname: "hostname"
            ip: "ip"
            ports:
            - protocol: "protocol"
              port: 0
              error: "error"
            - protocol: "protocol"
              port: 0
              error: "error"
          targetRefs:
          - uid: "uid"
            kind: "kind"
            name: "name"
            namespace: "namespace"
            version: "version"
            group: "group"
          - uid: "uid"
            kind: "kind"
            name: "name"
            namespace: "namespace"
            version: "version"
            group: "group"
          targetLabels:
            key: "targetLabels"
          externalURLs:
          - "externalURLs"
          - "externalURLs"
          labels:
            key: "labels"
      nodes:
      - resourceRef:
          uid: "uid"
          kind: "kind"
          name: "name"
          namespace: "namespace"
          version: "version"
          group: "group"
        createdAt:
          seconds: "seconds"
          nanos: 0
        images:
        - "images"
        - "images"
        parentRefs:
        - uid: "uid"
          kind: "kind"
          name: "name"
          namespace: "namespace"
          version: "version"
          group: "group"
        - uid: "uid"
          kind: "kind"
          name: "name"
          namespace: "namespace"
          version: "version"
          group: "group"
        resourceVersion: "resourceVersion"
        health:
          message: "message"
          status: "status"
        info:
        - name: "name"
          value: "value"
        - name: "name"
          value: "value"
        networkingInfo:
          ingress:
          - hostname: "hostname"
            ip: "ip"
            ports:
            - protocol: "protocol"
              port: 0
              error: "error"
            - protocol: "protocol"
              port: 0
              error: "error"
          - hostname: "hostname"
            ip: "ip"
            ports:
            - protocol: "protocol"
              port: 0
              error: "error"
            - protocol: "protocol"
              port: 0
              error: "error"
          targetRefs:
          - uid: "uid"
            kind: "kind"
            name: "name"
            namespace: "namespace"
            version: "version"
            group: "group"
          - uid: "uid"
            kind: "kind"
            name: "name"
            namespace: "namespace"
            version: "version"
            group: "group"
          targetLabels:
            key: "targetLabels"
          externalURLs:
          - "externalURLs"
          - "externalURLs"
          labels:
            key: "labels"
      - resourceRef:
          uid: "uid"
          kind: "kind"
          name: "name"
          namespace: "namespace"
          version: "version"
          group: "group"
        createdAt:
          seconds: "seconds"
          nanos: 0
        images:
        - "images"
        - "images"
        parentRefs:
        - uid: "uid"
          kind: "kind"
          name: "name"
          namespace: "namespace"
          version: "version"
          group: "group"
        - uid: "uid"
          kind: "kind"
          name: "name"
          namespace: "namespace"
          version: "version"
          group: "group"
        resourceVersion: "resourceVersion"
        health:
          message: "message"
          status: "status"
        info:
        - name: "name"
          value: "value"
        - name: "name"
          value: "value"
        networkingInfo:
          ingress:
          - hostname: "hostname"
            ip: "ip"
            ports:
            - protocol: "protocol"
              port: 0
              error: "error"
            - protocol: "protocol"
              port: 0
              error: "error"
          - hostname: "hostname"
            ip: "ip"
            ports:
            - protocol: "protocol"
              port: 0
              error: "error"
            - protocol: "protocol"
              port: 0
              error: "error"
          targetRefs:
          - uid: "uid"
            kind: "kind"
            name: "name"
            namespace: "namespace"
            version: "version"
            group: "group"
          - uid: "uid"
            kind: "kind"
            name: "name"
            namespace: "namespace"
            version: "version"
            group: "group"
          targetLabels:
            key: "targetLabels"
          externalURLs:
          - "externalURLs"
          - "externalURLs"
          labels:
            key: "labels"
      hosts:
      - systemInfo:
          machineID: "machineID"
          bootID: "bootID"
          containerRuntimeVersion: "containerRuntimeVersion"
          kernelVersion: "kernelVersion"
          kubeletVersion: "kubeletVersion"
          systemUUID: "systemUUID"
          kubeProxyVersion: "kubeProxyVersion"
          operatingSystem: "operatingSystem"
          architecture: "architecture"
          osImage: "osImage"
        name: "name"
        resourcesInfo:
        - requestedByApp: "requestedByApp"
          requestedByNeighbors: "requestedByNeighbors"
          resourceName: "resourceName"
          capacity: "capacity"
        - requestedByApp: "requestedByApp"
          requestedByNeighbors: "requestedByNeighbors"
          resourceName: "resourceName"
          capacity: "capacity"
      - systemInfo:
          machineID: "machineID"
          bootID: "bootID"
          containerRuntimeVersion: "containerRuntimeVersion"
          kernelVersion: "kernelVersion"
          kubeletVersion: "kubeletVersion"
          systemUUID: "systemUUID"
          kubeProxyVersion: "kubeProxyVersion"
          operatingSystem: "operatingSystem"
          architecture: "architecture"
          osImage: "osImage"
        name: "name"
        resourcesInfo:
        - requestedByApp: "requestedByApp"
          requestedByNeighbors: "requestedByNeighbors"
          resourceName: "resourceName"
          capacity: "capacity"
        - requestedByApp: "requestedByApp"
          requestedByNeighbors: "requestedByNeighbors"
          resourceName: "resourceName"
          capacity: "capacity"
  v1alpha1ApplicationWatchEvent:
    type: "object"
    properties:
      application:
        $ref: "#/definitions/v1alpha1Application"
      type:
        type: "string"
    description: "ApplicationWatchEvent contains information about application change."
    example:
      application:
        metadata:
          generation: "generation"
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          deletionTimestamp:
            seconds: "seconds"
            nanos: 0
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: "deletionGracePeriodSeconds"
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1:
              Raw: "Raw"
            manager: "manager"
            subresource: "subresource"
            time:
              seconds: "seconds"
              nanos: 0
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1:
              Raw: "Raw"
            manager: "manager"
            subresource: "subresource"
            time:
              seconds: "seconds"
              nanos: 0
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp:
            seconds: "seconds"
            nanos: 0
          name: "name"
          namespace: "namespace"
        operation:
          sync:
            dryRun: true
            prune: true
            manifests:
            - "manifests"
            - "manifests"
            resources:
            - kind: "kind"
              name: "name"
              namespace: "namespace"
              group: "group"
            - kind: "kind"
              name: "name"
              namespace: "namespace"
              group: "group"
            source:
              repoURL: "repoURL"
              ksonnet:
                environment: "environment"
                parameters:
                - component: "component"
                  name: "name"
                  value: "value"
                - component: "component"
                  name: "name"
                  value: "value"
              path: "path"
              targetRevision: "targetRevision"
              plugin:
                name: "name"
                env:
                - name: "name"
                  value: "value"
                - name: "name"
                  value: "value"
              kustomize:
                commonLabels:
                  key: "commonLabels"
                images:
                - "images"
                - "images"
                namePrefix: "namePrefix"
                forceCommonAnnotations: true
                nameSuffix: "nameSuffix"
                forceCommonLabels: true
                version: "version"
                commonAnnotations:
                  key: "commonAnnotations"
              chart: "chart"
              directory:
                include: "include"
                jsonnet:
                  extVars:
                  - code: true
                    name: "name"
                    value: "value"
                  - code: true
                    name: "name"
                    value: "value"
                  libs:
                  - "libs"
                  - "libs"
                  tlas:
                  - code: true
                    name: "name"
                    value: "value"
                  - code: true
                    name: "name"
                    value: "value"
                recurse: true
                exclude: "exclude"
              helm:
                valueFiles:
                - "valueFiles"
                - "valueFiles"
                releaseName: "releaseName"
                fileParameters:
                - path: "path"
                  name: "name"
                - path: "path"
                  name: "name"
                values: "values"
                passCredentials: true
                parameters:
                - forceString: true
                  name: "name"
                  value: "value"
                - forceString: true
                  name: "name"
                  value: "value"
                version: "version"
            syncStrategy:
              hook:
                syncStrategyApply:
                  force: true
              apply:
                force: true
            syncOptions:
            - "syncOptions"
            - "syncOptions"
            revision: "revision"
          initiatedBy:
            automated: true
            username: "username"
          retry:
            backoff:
              duration: "duration"
              factor: "factor"
              maxDuration: "maxDuration"
            limit: "limit"
          info:
          - name: "name"
            value: "value"
          - name: "name"
            value: "value"
        spec:
          destination:
            server: "server"
            name: "name"
            namespace: "namespace"
          project: "project"
          revisionHistoryLimit: "revisionHistoryLimit"
          source:
            repoURL: "repoURL"
            ksonnet:
              environment: "environment"
              parameters:
              - component: "component"
                name: "name"
                value: "value"
              - component: "component"
                name: "name"
                value: "value"
            path: "path"
            targetRevision: "targetRevision"
            plugin:
              name: "name"
              env:
              - name: "name"
                value: "value"
              - name: "name"
                value: "value"
            kustomize:
              commonLabels:
                key: "commonLabels"
              images:
              - "images"
              - "images"
              namePrefix: "namePrefix"
              forceCommonAnnotations: true
              nameSuffix: "nameSuffix"
              forceCommonLabels: true
              version: "version"
              commonAnnotations:
                key: "commonAnnotations"
            chart: "chart"
            directory:
              include: "include"
              jsonnet:
                extVars:
                - code: true
                  name: "name"
                  value: "value"
                - code: true
                  name: "name"
                  value: "value"
                libs:
                - "libs"
                - "libs"
                tlas:
                - code: true
                  name: "name"
                  value: "value"
                - code: true
                  name: "name"
                  value: "value"
              recurse: true
              exclude: "exclude"
            helm:
              valueFiles:
              - "valueFiles"
              - "valueFiles"
              releaseName: "releaseName"
              fileParameters:
              - path: "path"
                name: "name"
              - path: "path"
                name: "name"
              values: "values"
              passCredentials: true
              parameters:
              - forceString: true
                name: "name"
                value: "value"
              - forceString: true
                name: "name"
                value: "value"
              version: "version"
          ignoreDifferences:
          - jqPathExpressions:
            - "jqPathExpressions"
            - "jqPathExpressions"
            jsonPointers:
            - "jsonPointers"
            - "jsonPointers"
            kind: "kind"
            name: "name"
            namespace: "namespace"
            group: "group"
          - jqPathExpressions:
            - "jqPathExpressions"
            - "jqPathExpressions"
            jsonPointers:
            - "jsonPointers"
            - "jsonPointers"
            kind: "kind"
            name: "name"
            namespace: "namespace"
            group: "group"
          syncPolicy:
            automated:
              allowEmpty: true
              selfHeal: true
              prune: true
            retry:
              backoff:
                duration: "duration"
                factor: "factor"
                maxDuration: "maxDuration"
              limit: "limit"
            syncOptions:
            - "syncOptions"
            - "syncOptions"
          info:
          - name: "name"
            value: "value"
          - name: "name"
            value: "value"
        status:
          summary:
            images:
            - "images"
            - "images"
            externalURLs:
            - "externalURLs"
            - "externalURLs"
          sourceType: "sourceType"
          observedAt:
            seconds: "seconds"
            nanos: 0
          operationState:
            phase: "phase"
            retryCount: "retryCount"
            startedAt:
              seconds: "seconds"
              nanos: 0
            syncResult:
              resources:
              - syncPhase: "syncPhase"
                kind: "kind"
                name: "name"
                namespace: "namespace"
                hookPhase: "hookPhase"
                message: "message"
                version: "version"
                hookType: "hookType"
                group: "group"
                status: "status"
              - syncPhase: "syncPhase"
                kind: "kind"
                name: "name"
                namespace: "namespace"
                hookPhase: "hookPhase"
                message: "message"
                version: "version"
                hookType: "hookType"
                group: "group"
                status: "status"
              source:
                repoURL: "repoURL"
                ksonnet:
                  environment: "environment"
                  parameters:
                  - component: "component"
                    name: "name"
                    value: "value"
                  - component: "component"
                    name: "name"
                    value: "value"
                path: "path"
                targetRevision: "targetRevision"
                plugin:
                  name: "name"
                  env:
                  - name: "name"
                    value: "value"
                  - name: "name"
                    value: "value"
                kustomize:
                  commonLabels:
                    key: "commonLabels"
                  images:
                  - "images"
                  - "images"
                  namePrefix: "namePrefix"
                  forceCommonAnnotations: true
                  nameSuffix: "nameSuffix"
                  forceCommonLabels: true
                  version: "version"
                  commonAnnotations:
                    key: "commonAnnotations"
                chart: "chart"
                directory:
                  include: "include"
                  jsonnet:
                    extVars:
                    - code: true
                      name: "name"
                      value: "value"
                    - code: true
                      name: "name"
                      value: "value"
                    libs:
                    - "libs"
                    - "libs"
                    tlas:
                    - code: true
                      name: "name"
                      value: "value"
                    - code: true
                      name: "name"
                      value: "value"
                  recurse: true
                  exclude: "exclude"
                helm:
                  valueFiles:
                  - "valueFiles"
                  - "valueFiles"
                  releaseName: "releaseName"
                  fileParameters:
                  - path: "path"
                    name: "name"
                  - path: "path"
                    name: "name"
                  values: "values"
                  passCredentials: true
                  parameters:
                  - forceString: true
                    name: "name"
                    value: "value"
                  - forceString: true
                    name: "name"
                    value: "value"
                  version: "version"
              revision: "revision"
            message: "message"
            operation:
              sync:
                dryRun: true
                prune: true
                manifests:
                - "manifests"
                - "manifests"
                resources:
                - kind: "kind"
                  name: "name"
                  namespace: "namespace"
                  group: "group"
                - kind: "kind"
                  name: "name"
                  namespace: "namespace"
                  group: "group"
                source:
                  repoURL: "repoURL"
                  ksonnet:
                    environment: "environment"
                    parameters:
                    - component: "component"
                      name: "name"
                      value: "value"
                    - component: "component"
                      name: "name"
                      value: "value"
                  path: "path"
                  targetRevision: "targetRevision"
                  plugin:
                    name: "name"
                    env:
                    - name: "name"
                      value: "value"
                    - name: "name"
                      value: "value"
                  kustomize:
                    commonLabels:
                      key: "commonLabels"
                    images:
                    - "images"
                    - "images"
                    namePrefix: "namePrefix"
                    forceCommonAnnotations: true
                    nameSuffix: "nameSuffix"
                    forceCommonLabels: true
                    version: "version"
                    commonAnnotations:
                      key: "commonAnnotations"
                  chart: "chart"
                  directory:
                    include: "include"
                    jsonnet:
                      extVars:
                      - code: true
                        name: "name"
                        value: "value"
                      - code: true
                        name: "name"
                        value: "value"
                      libs:
                      - "libs"
                      - "libs"
                      tlas:
                      - code: true
                        name: "name"
                        value: "value"
                      - code: true
                        name: "name"
                        value: "value"
                    recurse: true
                    exclude: "exclude"
                  helm:
                    valueFiles:
                    - "valueFiles"
                    - "valueFiles"
                    releaseName: "releaseName"
                    fileParameters:
                    - path: "path"
                      name: "name"
                    - path: "path"
                      name: "name"
                    values: "values"
                    passCredentials: true
                    parameters:
                    - forceString: true
                      name: "name"
                      value: "value"
                    - forceString: true
                      name: "name"
                      value: "value"
                    version: "version"
                syncStrategy:
                  hook:
                    syncStrategyApply:
                      force: true
                  apply:
                    force: true
                syncOptions:
                - "syncOptions"
                - "syncOptions"
                revision: "revision"
              initiatedBy:
                automated: true
                username: "username"
              retry:
                backoff:
                  duration: "duration"
                  factor: "factor"
                  maxDuration: "maxDuration"
                limit: "limit"
              info:
              - name: "name"
                value: "value"
              - name: "name"
                value: "value"
            finishedAt:
              seconds: "seconds"
              nanos: 0
          reconciledAt:
            seconds: "seconds"
            nanos: 0
          health:
            message: "message"
            status: "status"
          resources:
          - hook: true
            kind: "kind"
            name: "name"
            namespace: "namespace"
            health:
              message: "message"
              status: "status"
            requiresPruning: true
            version: "version"
            group: "group"
            status: "status"
          - hook: true
            kind: "kind"
            name: "name"
            namespace: "namespace"
            health:
              message: "message"
              status: "status"
            requiresPruning: true
            version: "version"
            group: "group"
            status: "status"
          history:
          - deployStartedAt:
              seconds: "seconds"
              nanos: 0
            id: "id"
            source:
              repoURL: "repoURL"
              ksonnet:
                environment: "environment"
                parameters:
                - component: "component"
                  name: "name"
                  value: "value"
                - component: "component"
                  name: "name"
                  value: "value"
              path: "path"
              targetRevision: "targetRevision"
              plugin:
                name: "name"
                env:
                - name: "name"
                  value: "value"
                - name: "name"
                  value: "value"
              kustomize:
                commonLabels:
                  key: "commonLabels"
                images:
                - "images"
                - "images"
                namePrefix: "namePrefix"
                forceCommonAnnotations: true
                nameSuffix: "nameSuffix"
                forceCommonLabels: true
                version: "version"
                commonAnnotations:
                  key: "commonAnnotations"
              chart: "chart"
              directory:
                include: "include"
                jsonnet:
                  extVars:
                  - code: true
                    name: "name"
                    value: "value"
                  - code: true
                    name: "name"
                    value: "value"
                  libs:
                  - "libs"
                  - "libs"
                  tlas:
                  - code: true
                    name: "name"
                    value: "value"
                  - code: true
                    name: "name"
                    value: "value"
                recurse: true
                exclude: "exclude"
              helm:
                valueFiles:
                - "valueFiles"
                - "valueFiles"
                releaseName: "releaseName"
                fileParameters:
                - path: "path"
                  name: "name"
                - path: "path"
                  name: "name"
                values: "values"
                passCredentials: true
                parameters:
                - forceString: true
                  name: "name"
                  value: "value"
                - forceString: true
                  name: "name"
                  value: "value"
                version: "version"
            deployedAt:
              seconds: "seconds"
              nanos: 0
            revision: "revision"
          - deployStartedAt:
              seconds: "seconds"
              nanos: 0
            id: "id"
            source:
              repoURL: "repoURL"
              ksonnet:
                environment: "environment"
                parameters:
                - component: "component"
                  name: "name"
                  value: "value"
                - component: "component"
                  name: "name"
                  value: "value"
              path: "path"
              targetRevision: "targetRevision"
              plugin:
                name: "name"
                env:
                - name: "name"
                  value: "value"
                - name: "name"
                  value: "value"
              kustomize:
                commonLabels:
                  key: "commonLabels"
                images:
                - "images"
                - "images"
                namePrefix: "namePrefix"
                forceCommonAnnotations: true
                nameSuffix: "nameSuffix"
                forceCommonLabels: true
                version: "version"
                commonAnnotations:
                  key: "commonAnnotations"
              chart: "chart"
              directory:
                include: "include"
                jsonnet:
                  extVars:
                  - code: true
                    name: "name"
                    value: "value"
                  - code: true
                    name: "name"
                    value: "value"
                  libs:
                  - "libs"
                  - "libs"
                  tlas:
                  - code: true
                    name: "name"
                    value: "value"
                  - code: true
                    name: "name"
                    value: "value"
                recurse: true
                exclude: "exclude"
              helm:
                valueFiles:
                - "valueFiles"
                - "valueFiles"
                releaseName: "releaseName"
                fileParameters:
                - path: "path"
                  name: "name"
                - path: "path"
                  name: "name"
                values: "values"
                passCredentials: true
                parameters:
                - forceString: true
                  name: "name"
                  value: "value"
                - forceString: true
                  name: "name"
                  value: "value"
                version: "version"
            deployedAt:
              seconds: "seconds"
              nanos: 0
            revision: "revision"
          conditions:
          - lastTransitionTime:
              seconds: "seconds"
              nanos: 0
            message: "message"
            type: "type"
          - lastTransitionTime:
              seconds: "seconds"
              nanos: 0
            message: "message"
            type: "type"
          sync:
            comparedTo:
              destination:
                server: "server"
                name: "name"
                namespace: "namespace"
              source:
                repoURL: "repoURL"
                ksonnet:
                  environment: "environment"
                  parameters:
                  - component: "component"
                    name: "name"
                    value: "value"
                  - component: "component"
                    name: "name"
                    value: "value"
                path: "path"
                targetRevision: "targetRevision"
                plugin:
                  name: "name"
                  env:
                  - name: "name"
                    value: "value"
                  - name: "name"
                    value: "value"
                kustomize:
                  commonLabels:
                    key: "commonLabels"
                  images:
                  - "images"
                  - "images"
                  namePrefix: "namePrefix"
                  forceCommonAnnotations: true
                  nameSuffix: "nameSuffix"
                  forceCommonLabels: true
                  version: "version"
                  commonAnnotations:
                    key: "commonAnnotations"
                chart: "chart"
                directory:
                  include: "include"
                  jsonnet:
                    extVars:
                    - code: true
                      name: "name"
                      value: "value"
                    - code: true
                      name: "name"
                      value: "value"
                    libs:
                    - "libs"
                    - "libs"
                    tlas:
                    - code: true
                      name: "name"
                      value: "value"
                    - code: true
                      name: "name"
                      value: "value"
                  recurse: true
                  exclude: "exclude"
                helm:
                  valueFiles:
                  - "valueFiles"
                  - "valueFiles"
                  releaseName: "releaseName"
                  fileParameters:
                  - path: "path"
                    name: "name"
                  - path: "path"
                    name: "name"
                  values: "values"
                  passCredentials: true
                  parameters:
                  - forceString: true
                    name: "name"
                    value: "value"
                  - forceString: true
                    name: "name"
                    value: "value"
                  version: "version"
            revision: "revision"
            status: "status"
      type: "type"
  v1alpha1Backoff:
    type: "object"
    properties:
      duration:
        type: "string"
        title: "Duration is the amount to back off. Default unit is seconds, but could\
          \ also be a duration (e.g. \"2m\", \"1h\")"
      factor:
        type: "string"
        format: "int64"
        title: "Factor is a factor to multiply the base duration after each failed\
          \ retry"
      maxDuration:
        type: "string"
        title: "MaxDuration is the maximum amount of time allowed for the backoff\
          \ strategy"
    title: "Backoff is the backoff strategy to use on subsequent retries for failing\
      \ syncs"
    example:
      duration: "duration"
      factor: "factor"
      maxDuration: "maxDuration"
  v1alpha1Cluster:
    type: "object"
    properties:
      annotations:
        type: "object"
        title: "Annotations for cluster secret metadata"
        additionalProperties:
          type: "string"
      clusterResources:
        type: "boolean"
        description: "Indicates if cluster level resources should be managed. This\
          \ setting is used only if cluster is connected in a namespaced mode."
      config:
        $ref: "#/definitions/v1alpha1ClusterConfig"
      connectionState:
        $ref: "#/definitions/v1alpha1ConnectionState"
      info:
        $ref: "#/definitions/v1alpha1ClusterInfo"
      labels:
        type: "object"
        title: "Labels for cluster secret metadata"
        additionalProperties:
          type: "string"
      name:
        type: "string"
        title: "Name of the cluster. If omitted, will use the server address"
      namespaces:
        type: "array"
        description: "Holds list of namespaces which are accessible in that cluster.\
          \ Cluster level resources will be ignored if namespace list is not empty."
        items:
          type: "string"
      project:
        type: "string"
        title: "Reference between project and cluster that allow you automatically\
          \ to be added as item inside Destinations project entity"
      refreshRequestedAt:
        $ref: "#/definitions/v1Time"
      server:
        type: "string"
        title: "Server is the API server URL of the Kubernetes cluster"
      serverVersion:
        type: "string"
        title: "DEPRECATED: use Info.ServerVersion field instead.\nThe server version"
      shard:
        type: "string"
        format: "int64"
        description: "Shard contains optional shard number. Calculated on the fly\
          \ by the application controller if not specified."
    title: "Cluster is the definition of a cluster resource"
    example:
      server: "server"
      serverVersion: "serverVersion"
      connectionState:
        message: "message"
        attemptedAt:
          seconds: "seconds"
          nanos: 0
        status: "status"
      annotations:
        key: "annotations"
      project: "project"
      labels:
        key: "labels"
      refreshRequestedAt:
        seconds: "seconds"
        nanos: 0
      clusterResources: true
      name: "name"
      shard: "shard"
      config:
        awsAuthConfig:
          roleARN: "roleARN"
          clusterName: "clusterName"
        password: "password"
        tlsClientConfig:
          keyData: "keyData"
          insecure: true
          serverName: "serverName"
          certData: "certData"
          caData: "caData"
        bearerToken: "bearerToken"
        execProviderConfig:
          args:
          - "args"
          - "args"
          apiVersion: "apiVersion"
          env:
            key: "env"
          installHint: "installHint"
          command: "command"
        username: "username"
      info:
        serverVersion: "serverVersion"
        apiVersions:
        - "apiVersions"
        - "apiVersions"
        connectionState:
          message: "message"
          attemptedAt:
            seconds: "seconds"
            nanos: 0
          status: "status"
        cacheInfo:
          apisCount: "apisCount"
          lastCacheSyncTime:
            seconds: "seconds"
            nanos: 0
          resourcesCount: "resourcesCount"
        applicationsCount: "applicationsCount"
      namespaces:
      - "namespaces"
      - "namespaces"
  v1alpha1ClusterCacheInfo:
    type: "object"
    properties:
      apisCount:
        type: "string"
        format: "int64"
        title: "APIsCount holds number of observed Kubernetes API count"
      lastCacheSyncTime:
        $ref: "#/definitions/v1Time"
      resourcesCount:
        type: "string"
        format: "int64"
        title: "ResourcesCount holds number of observed Kubernetes resources"
    title: "ClusterCacheInfo contains information about the cluster cache"
    example:
      apisCount: "apisCount"
      lastCacheSyncTime:
        seconds: "seconds"
        nanos: 0
      resourcesCount: "resourcesCount"
  v1alpha1ClusterConfig:
    type: "object"
    properties:
      awsAuthConfig:
        $ref: "#/definitions/v1alpha1AWSAuthConfig"
      bearerToken:
        type: "string"
        description: "Server requires Bearer authentication. This client will not\
          \ attempt to use\nrefresh tokens for an OAuth2 flow.\nTODO: demonstrate\
          \ an OAuth2 compatible client."
      execProviderConfig:
        $ref: "#/definitions/v1alpha1ExecProviderConfig"
      password:
        type: "string"
      tlsClientConfig:
        $ref: "#/definitions/v1alpha1TLSClientConfig"
      username:
        type: "string"
        title: "Server requires Basic authentication"
    description: "ClusterConfig is the configuration attributes. This structure is\
      \ subset of the go-client\nrest.Config with annotations added for marshalling."
    example:
      awsAuthConfig:
        roleARN: "roleARN"
        clusterName: "clusterName"
      password: "password"
      tlsClientConfig:
        keyData: "keyData"
        insecure: true
        serverName: "serverName"
        certData: "certData"
        caData: "caData"
      bearerToken: "bearerToken"
      execProviderConfig:
        args:
        - "args"
        - "args"
        apiVersion: "apiVersion"
        env:
          key: "env"
        installHint: "installHint"
        command: "command"
      username: "username"
  v1alpha1ClusterInfo:
    type: "object"
    properties:
      apiVersions:
        type: "array"
        title: "APIVersions contains list of API versions supported by the cluster"
        items:
          type: "string"
      applicationsCount:
        type: "string"
        format: "int64"
        title: "ApplicationsCount is the number of applications managed by Argo CD\
          \ on the cluster"
      cacheInfo:
        $ref: "#/definitions/v1alpha1ClusterCacheInfo"
      connectionState:
        $ref: "#/definitions/v1alpha1ConnectionState"
      serverVersion:
        type: "string"
        title: "ServerVersion contains information about the Kubernetes version of\
          \ the cluster"
    title: "ClusterInfo contains information about the cluster"
    example:
      serverVersion: "serverVersion"
      apiVersions:
      - "apiVersions"
      - "apiVersions"
      connectionState:
        message: "message"
        attemptedAt:
          seconds: "seconds"
          nanos: 0
        status: "status"
      cacheInfo:
        apisCount: "apisCount"
        lastCacheSyncTime:
          seconds: "seconds"
          nanos: 0
        resourcesCount: "resourcesCount"
      applicationsCount: "applicationsCount"
  v1alpha1ClusterList:
    type: "object"
    properties:
      items:
        type: "array"
        items:
          $ref: "#/definitions/v1alpha1Cluster"
      metadata:
        $ref: "#/definitions/v1ListMeta"
    description: "ClusterList is a collection of Clusters."
    example:
      metadata:
        remainingItemCount: "remainingItemCount"
        continue: "continue"
        resourceVersion: "resourceVersion"
        selfLink: "selfLink"
      items:
      - server: "server"
        serverVersion: "serverVersion"
        connectionState:
          message: "message"
          attemptedAt:
            seconds: "seconds"
            nanos: 0
          status: "status"
        annotations:
          key: "annotations"
        project: "project"
        labels:
          key: "labels"
        refreshRequestedAt:
          seconds: "seconds"
          nanos: 0
        clusterResources: true
        name: "name"
        shard: "shard"
        config:
          awsAuthConfig:
            roleARN: "roleARN"
            clusterName: "clusterName"
          password: "password"
          tlsClientConfig:
            keyData: "keyData"
            insecure: true
            serverName: "serverName"
            certData: "certData"
            caData: "caData"
          bearerToken: "bearerToken"
          execProviderConfig:
            args:
            - "args"
            - "args"
            apiVersion: "apiVersion"
            env:
              key: "env"
            installHint: "installHint"
            command: "command"
          username: "username"
        info:
          serverVersion: "serverVersion"
          apiVersions:
          - "apiVersions"
          - "apiVersions"
          connectionState:
            message: "message"
            attemptedAt:
              seconds: "seconds"
              nanos: 0
            status: "status"
          cacheInfo:
            apisCount: "apisCount"
            lastCacheSyncTime:
              seconds: "seconds"
              nanos: 0
            resourcesCount: "resourcesCount"
          applicationsCount: "applicationsCount"
        namespaces:
        - "namespaces"
        - "namespaces"
      - server: "server"
        serverVersion: "serverVersion"
        connectionState:
          message: "message"
          attemptedAt:
            seconds: "seconds"
            nanos: 0
          status: "status"
        annotations:
          key: "annotations"
        project: "project"
        labels:
          key: "labels"
        refreshRequestedAt:
          seconds: "seconds"
          nanos: 0
        clusterResources: true
        name: "name"
        shard: "shard"
        config:
          awsAuthConfig:
            roleARN: "roleARN"
            clusterName: "clusterName"
          password: "password"
          tlsClientConfig:
            keyData: "keyData"
            insecure: true
            serverName: "serverName"
            certData: "certData"
            caData: "caData"
          bearerToken: "bearerToken"
          execProviderConfig:
            args:
            - "args"
            - "args"
            apiVersion: "apiVersion"
            env:
              key: "env"
            installHint: "installHint"
            command: "command"
          username: "username"
        info:
          serverVersion: "serverVersion"
          apiVersions:
          - "apiVersions"
          - "apiVersions"
          connectionState:
            message: "message"
            attemptedAt:
              seconds: "seconds"
              nanos: 0
            status: "status"
          cacheInfo:
            apisCount: "apisCount"
            lastCacheSyncTime:
              seconds: "seconds"
              nanos: 0
            resourcesCount: "resourcesCount"
          applicationsCount: "applicationsCount"
        namespaces:
        - "namespaces"
        - "namespaces"
  v1alpha1Command:
    type: "object"
    properties:
      args:
        type: "array"
        items:
          type: "string"
      command:
        type: "array"
        items:
          type: "string"
    title: "Command holds binary path and arguments list"
    example:
      args:
      - "args"
      - "args"
      command:
      - "command"
      - "command"
  v1alpha1ComparedTo:
    type: "object"
    properties:
      destination:
        $ref: "#/definitions/v1alpha1ApplicationDestination"
      source:
        $ref: "#/definitions/v1alpha1ApplicationSource"
    title: "ComparedTo contains application source and target which was used for resources\
      \ comparison"
    example:
      destination:
        server: "server"
        name: "name"
        namespace: "namespace"
      source:
        repoURL: "repoURL"
        ksonnet:
          environment: "environment"
          parameters:
          - component: "component"
            name: "name"
            value: "value"
          - component: "component"
            name: "name"
            value: "value"
        path: "path"
        targetRevision: "targetRevision"
        plugin:
          name: "name"
          env:
          - name: "name"
            value: "value"
          - name: "name"
            value: "value"
        kustomize:
          commonLabels:
            key: "commonLabels"
          images:
          - "images"
          - "images"
          namePrefix: "namePrefix"
          forceCommonAnnotations: true
          nameSuffix: "nameSuffix"
          forceCommonLabels: true
          version: "version"
          commonAnnotations:
            key: "commonAnnotations"
        chart: "chart"
        directory:
          include: "include"
          jsonnet:
            extVars:
            - code: true
              name: "name"
              value: "value"
            - code: true
              name: "name"
              value: "value"
            libs:
            - "libs"
            - "libs"
            tlas:
            - code: true
              name: "name"
              value: "value"
            - code: true
              name: "name"
              value: "value"
          recurse: true
          exclude: "exclude"
        helm:
          valueFiles:
          - "valueFiles"
          - "valueFiles"
          releaseName: "releaseName"
          fileParameters:
          - path: "path"
            name: "name"
          - path: "path"
            name: "name"
          values: "values"
          passCredentials: true
          parameters:
          - forceString: true
            name: "name"
            value: "value"
          - forceString: true
            name: "name"
            value: "value"
          version: "version"
  v1alpha1ConfigManagementPlugin:
    type: "object"
    properties:
      generate:
        $ref: "#/definitions/v1alpha1Command"
      init:
        $ref: "#/definitions/v1alpha1Command"
      lockRepo:
        type: "boolean"
      name:
        type: "string"
    title: "ConfigManagementPlugin contains config management plugin configuration"
    example:
      lockRepo: true
      init:
        args:
        - "args"
        - "args"
        command:
        - "command"
        - "command"
      name: "name"
      generate:
        args:
        - "args"
        - "args"
        command:
        - "command"
        - "command"
  v1alpha1ConnectionState:
    type: "object"
    properties:
      attemptedAt:
        $ref: "#/definitions/v1Time"
      message:
        type: "string"
        title: "Message contains human readable information about the connection status"
      status:
        type: "string"
        title: "Status contains the current status indicator for the connection"
    title: "ConnectionState contains information about remote resource connection\
      \ state, currently used for clusters and repositories"
    example:
      message: "message"
      attemptedAt:
        seconds: "seconds"
        nanos: 0
      status: "status"
  v1alpha1ExecProviderConfig:
    type: "object"
    properties:
      apiVersion:
        type: "string"
        title: "Preferred input version of the ExecInfo"
      args:
        type: "array"
        title: "Arguments to pass to the command when executing it"
        items:
          type: "string"
      command:
        type: "string"
        title: "Command to execute"
      env:
        type: "object"
        title: "Env defines additional environment variables to expose to the process"
        additionalProperties:
          type: "string"
      installHint:
        type: "string"
        title: "This text is shown to the user when the executable doesn't seem to\
          \ be present"
    title: "ExecProviderConfig is config used to call an external command to perform\
      \ cluster authentication\nSee: https://godoc.org/k8s.io/client-go/tools/clientcmd/api#ExecConfig"
    example:
      args:
      - "args"
      - "args"
      apiVersion: "apiVersion"
      env:
        key: "env"
      installHint: "installHint"
      command: "command"
  v1alpha1GnuPGPublicKey:
    type: "object"
    properties:
      fingerprint:
        type: "string"
        title: "Fingerprint is the fingerprint of the key"
      keyData:
        type: "string"
        title: "KeyData holds the raw key data, in base64 encoded format"
      keyID:
        type: "string"
        title: "KeyID specifies the key ID, in hexadecimal string format"
      owner:
        type: "string"
        title: "Owner holds the owner identification, e.g. a name and e-mail address"
      subType:
        type: "string"
        title: "SubType holds the key's sub type (e.g. rsa4096)"
      trust:
        type: "string"
        title: "Trust holds the level of trust assigned to this key"
    title: "GnuPGPublicKey is a representation of a GnuPG public key"
    example:
      owner: "owner"
      trust: "trust"
      keyData: "keyData"
      fingerprint: "fingerprint"
      keyID: "keyID"
      subType: "subType"
  v1alpha1GnuPGPublicKeyList:
    type: "object"
    properties:
      items:
        type: "array"
        items:
          $ref: "#/definitions/v1alpha1GnuPGPublicKey"
      metadata:
        $ref: "#/definitions/v1ListMeta"
    title: "GnuPGPublicKeyList is a collection of GnuPGPublicKey objects"
    example:
      metadata:
        remainingItemCount: "remainingItemCount"
        continue: "continue"
        resourceVersion: "resourceVersion"
        selfLink: "selfLink"
      items:
      - owner: "owner"
        trust: "trust"
        keyData: "keyData"
        fingerprint: "fingerprint"
        keyID: "keyID"
        subType: "subType"
      - owner: "owner"
        trust: "trust"
        keyData: "keyData"
        fingerprint: "fingerprint"
        keyID: "keyID"
        subType: "subType"
  v1alpha1HealthStatus:
    type: "object"
    properties:
      message:
        type: "string"
        title: "Message is a human-readable informational message describing the health\
          \ status"
      status:
        type: "string"
        title: "Status holds the status code of the application or resource"
    title: "HealthStatus contains information about the currently observed health\
      \ state of an application or resource"
    example:
      message: "message"
      status: "status"
  v1alpha1HelmFileParameter:
    type: "object"
    properties:
      name:
        type: "string"
        title: "Name is the name of the Helm parameter"
      path:
        type: "string"
        title: "Path is the path to the file containing the values for the Helm parameter"
    title: "HelmFileParameter is a file parameter that's passed to helm template during\
      \ manifest generation"
    example:
      path: "path"
      name: "name"
  v1alpha1HelmParameter:
    type: "object"
    properties:
      forceString:
        type: "boolean"
        title: "ForceString determines whether to tell Helm to interpret booleans\
          \ and numbers as strings"
      name:
        type: "string"
        title: "Name is the name of the Helm parameter"
      value:
        type: "string"
        title: "Value is the value for the Helm parameter"
    title: "HelmParameter is a parameter that's passed to helm template during manifest\
      \ generation"
    example:
      forceString: true
      name: "name"
      value: "value"
  v1alpha1HostInfo:
    type: "object"
    properties:
      name:
        type: "string"
      resourcesInfo:
        type: "array"
        items:
          $ref: "#/definitions/v1alpha1HostResourceInfo"
      systemInfo:
        $ref: "#/definitions/v1NodeSystemInfo"
    title: "HostInfo holds host name and resources metrics\nTODO: describe purpose\
      \ of this type\nTODO: describe members of this type"
    example:
      systemInfo:
        machineID: "machineID"
        bootID: "bootID"
        containerRuntimeVersion: "containerRuntimeVersion"
        kernelVersion: "kernelVersion"
        kubeletVersion: "kubeletVersion"
        systemUUID: "systemUUID"
        kubeProxyVersion: "kubeProxyVersion"
        operatingSystem: "operatingSystem"
        architecture: "architecture"
        osImage: "osImage"
      name: "name"
      resourcesInfo:
      - requestedByApp: "requestedByApp"
        requestedByNeighbors: "requestedByNeighbors"
        resourceName: "resourceName"
        capacity: "capacity"
      - requestedByApp: "requestedByApp"
        requestedByNeighbors: "requestedByNeighbors"
        resourceName: "resourceName"
        capacity: "capacity"
  v1alpha1HostResourceInfo:
    type: "object"
    properties:
      capacity:
        type: "string"
        format: "int64"
      requestedByApp:
        type: "string"
        format: "int64"
      requestedByNeighbors:
        type: "string"
        format: "int64"
      resourceName:
        type: "string"
    title: "TODO: describe this type"
    example:
      requestedByApp: "requestedByApp"
      requestedByNeighbors: "requestedByNeighbors"
      resourceName: "resourceName"
      capacity: "capacity"
  v1alpha1Info:
    type: "object"
    properties:
      name:
        type: "string"
      value:
        type: "string"
    example:
      name: "name"
      value: "value"
  v1alpha1InfoItem:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Name is a human readable title for this piece of information."
      value:
        type: "string"
        description: "Value is human readable content."
    title: "InfoItem contains arbitrary, human readable information about an application"
    example:
      name: "name"
      value: "value"
  v1alpha1JWTToken:
    type: "object"
    properties:
      exp:
        type: "string"
        format: "int64"
      iat:
        type: "string"
        format: "int64"
      id:
        type: "string"
    title: "JWTToken holds the issuedAt and expiresAt values of a token"
    example:
      id: "id"
      exp: "exp"
      iat: "iat"
  v1alpha1JWTTokens:
    type: "object"
    properties:
      items:
        type: "array"
        items:
          $ref: "#/definitions/v1alpha1JWTToken"
    title: "JWTTokens represents a list of JWT tokens"
    example:
      items:
      - id: "id"
        exp: "exp"
        iat: "iat"
      - id: "id"
        exp: "exp"
        iat: "iat"
  v1alpha1JsonnetVar:
    type: "object"
    properties:
      code:
        type: "boolean"
      name:
        type: "string"
      value:
        type: "string"
    title: "JsonnetVar represents a variable to be passed to jsonnet during manifest\
      \ generation"
    example:
      code: true
      name: "name"
      value: "value"
  v1alpha1KnownTypeField:
    type: "object"
    properties:
      field:
        type: "string"
      type:
        type: "string"
    title: "KnownTypeField contains mapping between CRD field and known Kubernetes\
      \ type.\nThis is mainly used for unit conversion in unknown resources (e.g.\
      \ 0.1 == 100mi)\nTODO: Describe the members of this type"
    example:
      field: "field"
      type: "type"
  v1alpha1KsonnetParameter:
    type: "object"
    properties:
      component:
        type: "string"
      name:
        type: "string"
      value:
        type: "string"
    title: "KsonnetParameter is a ksonnet component parameter"
    example:
      component: "component"
      name: "name"
      value: "value"
  v1alpha1KustomizeOptions:
    type: "object"
    properties:
      binaryPath:
        type: "string"
        title: "BinaryPath holds optional path to kustomize binary"
      buildOptions:
        type: "string"
        title: "BuildOptions is a string of build parameters to use when calling `kustomize\
          \ build`"
    title: "KustomizeOptions are options for kustomize to use when building manifests"
    example:
      binaryPath: "binaryPath"
      buildOptions: "buildOptions"
  v1alpha1Operation:
    type: "object"
    properties:
      info:
        type: "array"
        title: "Info is a list of informational items for this operation"
        items:
          $ref: "#/definitions/v1alpha1Info"
      initiatedBy:
        $ref: "#/definitions/v1alpha1OperationInitiator"
      retry:
        $ref: "#/definitions/v1alpha1RetryStrategy"
      sync:
        $ref: "#/definitions/v1alpha1SyncOperation"
    title: "Operation contains information about a requested or running operation"
    example:
      sync:
        dryRun: true
        prune: true
        manifests:
        - "manifests"
        - "manifests"
        resources:
        - kind: "kind"
          name: "name"
          namespace: "namespace"
          group: "group"
        - kind: "kind"
          name: "name"
          namespace: "namespace"
          group: "group"
        source:
          repoURL: "repoURL"
          ksonnet:
            environment: "environment"
            parameters:
            - component: "component"
              name: "name"
              value: "value"
            - component: "component"
              name: "name"
              value: "value"
          path: "path"
          targetRevision: "targetRevision"
          plugin:
            name: "name"
            env:
            - name: "name"
              value: "value"
            - name: "name"
              value: "value"
          kustomize:
            commonLabels:
              key: "commonLabels"
            images:
            - "images"
            - "images"
            namePrefix: "namePrefix"
            forceCommonAnnotations: true
            nameSuffix: "nameSuffix"
            forceCommonLabels: true
            version: "version"
            commonAnnotations:
              key: "commonAnnotations"
          chart: "chart"
          directory:
            include: "include"
            jsonnet:
              extVars:
              - code: true
                name: "name"
                value: "value"
              - code: true
                name: "name"
                value: "value"
              libs:
              - "libs"
              - "libs"
              tlas:
              - code: true
                name: "name"
                value: "value"
              - code: true
                name: "name"
                value: "value"
            recurse: true
            exclude: "exclude"
          helm:
            valueFiles:
            - "valueFiles"
            - "valueFiles"
            releaseName: "releaseName"
            fileParameters:
            - path: "path"
              name: "name"
            - path: "path"
              name: "name"
            values: "values"
            passCredentials: true
            parameters:
            - forceString: true
              name: "name"
              value: "value"
            - forceString: true
              name: "name"
              value: "value"
            version: "version"
        syncStrategy:
          hook:
            syncStrategyApply:
              force: true
          apply:
            force: true
        syncOptions:
        - "syncOptions"
        - "syncOptions"
        revision: "revision"
      initiatedBy:
        automated: true
        username: "username"
      retry:
        backoff:
          duration: "duration"
          factor: "factor"
          maxDuration: "maxDuration"
        limit: "limit"
      info:
      - name: "name"
        value: "value"
      - name: "name"
        value: "value"
  v1alpha1OperationInitiator:
    type: "object"
    properties:
      automated:
        type: "boolean"
        description: "Automated is set to true if operation was initiated automatically\
          \ by the application controller."
      username:
        type: "string"
        title: "Username contains the name of a user who started operation"
    title: "OperationInitiator contains information about the initiator of an operation"
    example:
      automated: true
      username: "username"
  v1alpha1OperationState:
    type: "object"
    properties:
      finishedAt:
        $ref: "#/definitions/v1Time"
      message:
        type: "string"
        description: "Message holds any pertinent messages when attempting to perform\
          \ operation (typically errors)."
      operation:
        $ref: "#/definitions/v1alpha1Operation"
      phase:
        type: "string"
        title: "Phase is the current phase of the operation"
      retryCount:
        type: "string"
        format: "int64"
        title: "RetryCount contains time of operation retries"
      startedAt:
        $ref: "#/definitions/v1Time"
      syncResult:
        $ref: "#/definitions/v1alpha1SyncOperationResult"
    title: "OperationState contains information about state of a running operation"
    example:
      phase: "phase"
      retryCount: "retryCount"
      startedAt:
        seconds: "seconds"
        nanos: 0
      syncResult:
        resources:
        - syncPhase: "syncPhase"
          kind: "kind"
          name: "name"
          namespace: "namespace"
          hookPhase: "hookPhase"
          message: "message"
          version: "version"
          hookType: "hookType"
          group: "group"
          status: "status"
        - syncPhase: "syncPhase"
          kind: "kind"
          name: "name"
          namespace: "namespace"
          hookPhase: "hookPhase"
          message: "message"
          version: "version"
          hookType: "hookType"
          group: "group"
          status: "status"
        source:
          repoURL: "repoURL"
          ksonnet:
            environment: "environment"
            parameters:
            - component: "component"
              name: "name"
              value: "value"
            - component: "component"
              name: "name"
              value: "value"
          path: "path"
          targetRevision: "targetRevision"
          plugin:
            name: "name"
            env:
            - name: "name"
              value: "value"
            - name: "name"
              value: "value"
          kustomize:
            commonLabels:
              key: "commonLabels"
            images:
            - "images"
            - "images"
            namePrefix: "namePrefix"
            forceCommonAnnotations: true
            nameSuffix: "nameSuffix"
            forceCommonLabels: true
            version: "version"
            commonAnnotations:
              key: "commonAnnotations"
          chart: "chart"
          directory:
            include: "include"
            jsonnet:
              extVars:
              - code: true
                name: "name"
                value: "value"
              - code: true
                name: "name"
                value: "value"
              libs:
              - "libs"
              - "libs"
              tlas:
              - code: true
                name: "name"
                value: "value"
              - code: true
                name: "name"
                value: "value"
            recurse: true
            exclude: "exclude"
          helm:
            valueFiles:
            - "valueFiles"
            - "valueFiles"
            releaseName: "releaseName"
            fileParameters:
            - path: "path"
              name: "name"
            - path: "path"
              name: "name"
            values: "values"
            passCredentials: true
            parameters:
            - forceString: true
              name: "name"
              value: "value"
            - forceString: true
              name: "name"
              value: "value"
            version: "version"
        revision: "revision"
      message: "message"
      operation:
        sync:
          dryRun: true
          prune: true
          manifests:
          - "manifests"
          - "manifests"
          resources:
          - kind: "kind"
            name: "name"
            namespace: "namespace"
            group: "group"
          - kind: "kind"
            name: "name"
            namespace: "namespace"
            group: "group"
          source:
            repoURL: "repoURL"
            ksonnet:
              environment: "environment"
              parameters:
              - component: "component"
                name: "name"
                value: "value"
              - component: "component"
                name: "name"
                value: "value"
            path: "path"
            targetRevision: "targetRevision"
            plugin:
              name: "name"
              env:
              - name: "name"
                value: "value"
              - name: "name"
                value: "value"
            kustomize:
              commonLabels:
                key: "commonLabels"
              images:
              - "images"
              - "images"
              namePrefix: "namePrefix"
              forceCommonAnnotations: true
              nameSuffix: "nameSuffix"
              forceCommonLabels: true
              version: "version"
              commonAnnotations:
                key: "commonAnnotations"
            chart: "chart"
            directory:
              include: "include"
              jsonnet:
                extVars:
                - code: true
                  name: "name"
                  value: "value"
                - code: true
                  name: "name"
                  value: "value"
                libs:
                - "libs"
                - "libs"
                tlas:
                - code: true
                  name: "name"
                  value: "value"
                - code: true
                  name: "name"
                  value: "value"
              recurse: true
              exclude: "exclude"
            helm:
              valueFiles:
              - "valueFiles"
              - "valueFiles"
              releaseName: "releaseName"
              fileParameters:
              - path: "path"
                name: "name"
              - path: "path"
                name: "name"
              values: "values"
              passCredentials: true
              parameters:
              - forceString: true
                name: "name"
                value: "value"
              - forceString: true
                name: "name"
                value: "value"
              version: "version"
          syncStrategy:
            hook:
              syncStrategyApply:
                force: true
            apply:
              force: true
          syncOptions:
          - "syncOptions"
          - "syncOptions"
          revision: "revision"
        initiatedBy:
          automated: true
          username: "username"
        retry:
          backoff:
            duration: "duration"
            factor: "factor"
            maxDuration: "maxDuration"
          limit: "limit"
        info:
        - name: "name"
          value: "value"
        - name: "name"
          value: "value"
      finishedAt:
        seconds: "seconds"
        nanos: 0
  v1alpha1OrphanedResourceKey:
    type: "object"
    properties:
      group:
        type: "string"
      kind:
        type: "string"
      name:
        type: "string"
    title: "OrphanedResourceKey is a reference to a resource to be ignored from"
    example:
      kind: "kind"
      name: "name"
      group: "group"
  v1alpha1OrphanedResourcesMonitorSettings:
    type: "object"
    properties:
      ignore:
        type: "array"
        title: "Ignore contains a list of resources that are to be excluded from orphaned\
          \ resources monitoring"
        items:
          $ref: "#/definitions/v1alpha1OrphanedResourceKey"
      warn:
        type: "boolean"
        title: "Warn indicates if warning condition should be created for apps which\
          \ have orphaned resources"
    title: "OrphanedResourcesMonitorSettings holds settings of orphaned resources\
      \ monitoring"
    example:
      warn: true
      ignore:
      - kind: "kind"
        name: "name"
        group: "group"
      - kind: "kind"
        name: "name"
        group: "group"
  v1alpha1OverrideIgnoreDiff:
    type: "object"
    properties:
      jSONPointers:
        type: "array"
        items:
          type: "string"
      jqPathExpressions:
        type: "array"
        items:
          type: "string"
    title: "TODO: describe this type"
    example:
      jqPathExpressions:
      - "jqPathExpressions"
      - "jqPathExpressions"
      jSONPointers:
      - "jSONPointers"
      - "jSONPointers"
  v1alpha1ProjectRole:
    type: "object"
    properties:
      description:
        type: "string"
        title: "Description is a description of the role"
      groups:
        type: "array"
        title: "Groups are a list of OIDC group claims bound to this role"
        items:
          type: "string"
      jwtTokens:
        type: "array"
        title: "JWTTokens are a list of generated JWT tokens bound to this role"
        items:
          $ref: "#/definitions/v1alpha1JWTToken"
      name:
        type: "string"
        title: "Name is a name for this role"
      policies:
        type: "array"
        title: "Policies Stores a list of casbin formatted strings that define access\
          \ policies for the role in the project"
        items:
          type: "string"
    title: "ProjectRole represents a role that has access to a project"
    example:
      name: "name"
      policies:
      - "policies"
      - "policies"
      description: "description"
      groups:
      - "groups"
      - "groups"
      jwtTokens:
      - id: "id"
        exp: "exp"
        iat: "iat"
      - id: "id"
        exp: "exp"
        iat: "iat"
  v1alpha1RepoCreds:
    type: "object"
    properties:
      enableOCI:
        type: "boolean"
        title: "EnableOCI specifies whether helm-oci support should be enabled for\
          \ this repo"
      githubAppEnterpriseBaseUrl:
        type: "string"
        title: "GithubAppEnterpriseBaseURL specifies the GitHub API URL for GitHub\
          \ app authentication. If empty will default to https://api.github.com"
      githubAppID:
        type: "string"
        format: "int64"
        title: "GithubAppId specifies the Github App ID of the app used to access\
          \ the repo for GitHub app authentication"
      githubAppInstallationID:
        type: "string"
        format: "int64"
        title: "GithubAppInstallationId specifies the ID of the installed GitHub App\
          \ for GitHub app authentication"
      githubAppPrivateKey:
        type: "string"
        title: "GithubAppPrivateKey specifies the private key PEM data for authentication\
          \ via GitHub app"
      password:
        type: "string"
        title: "Password for authenticating at the repo server"
      sshPrivateKey:
        type: "string"
        title: "SSHPrivateKey contains the private key data for authenticating at\
          \ the repo server using SSH (only Git repos)"
      tlsClientCertData:
        type: "string"
        title: "TLSClientCertData specifies the TLS client cert data for authenticating\
          \ at the repo server"
      tlsClientCertKey:
        type: "string"
        title: "TLSClientCertKey specifies the TLS client cert key for authenticating\
          \ at the repo server"
      type:
        type: "string"
        description: "Type specifies the type of the repoCreds. Can be either \"git\"\
          \ or \"helm. \"git\" is assumed if empty or absent."
      url:
        type: "string"
        title: "URL is the URL that this credentials matches to"
      username:
        type: "string"
        title: "Username for authenticating at the repo server"
    title: "RepoCreds holds the definition for repository credentials"
    example:
      tlsClientCertKey: "tlsClientCertKey"
      password: "password"
      githubAppID: "githubAppID"
      sshPrivateKey: "sshPrivateKey"
      githubAppInstallationID: "githubAppInstallationID"
      tlsClientCertData: "tlsClientCertData"
      enableOCI: true
      type: "type"
      githubAppPrivateKey: "githubAppPrivateKey"
      githubAppEnterpriseBaseUrl: "githubAppEnterpriseBaseUrl"
      url: "url"
      username: "username"
  v1alpha1RepoCredsList:
    type: "object"
    properties:
      items:
        type: "array"
        items:
          $ref: "#/definitions/v1alpha1RepoCreds"
      metadata:
        $ref: "#/definitions/v1ListMeta"
    description: "RepositoryList is a collection of Repositories."
    example:
      metadata:
        remainingItemCount: "remainingItemCount"
        continue: "continue"
        resourceVersion: "resourceVersion"
        selfLink: "selfLink"
      items:
      - tlsClientCertKey: "tlsClientCertKey"
        password: "password"
        githubAppID: "githubAppID"
        sshPrivateKey: "sshPrivateKey"
        githubAppInstallationID: "githubAppInstallationID"
        tlsClientCertData: "tlsClientCertData"
        enableOCI: true
        type: "type"
        githubAppPrivateKey: "githubAppPrivateKey"
        githubAppEnterpriseBaseUrl: "githubAppEnterpriseBaseUrl"
        url: "url"
        username: "username"
      - tlsClientCertKey: "tlsClientCertKey"
        password: "password"
        githubAppID: "githubAppID"
        sshPrivateKey: "sshPrivateKey"
        githubAppInstallationID: "githubAppInstallationID"
        tlsClientCertData: "tlsClientCertData"
        enableOCI: true
        type: "type"
        githubAppPrivateKey: "githubAppPrivateKey"
        githubAppEnterpriseBaseUrl: "githubAppEnterpriseBaseUrl"
        url: "url"
        username: "username"
  v1alpha1Repository:
    type: "object"
    properties:
      connectionState:
        $ref: "#/definitions/v1alpha1ConnectionState"
      enableLfs:
        type: "boolean"
        description: "EnableLFS specifies whether git-lfs support should be enabled\
          \ for this repo. Only valid for Git repositories."
      enableOCI:
        type: "boolean"
        title: "EnableOCI specifies whether helm-oci support should be enabled for\
          \ this repo"
      githubAppEnterpriseBaseUrl:
        type: "string"
        title: "GithubAppEnterpriseBaseURL specifies the base URL of GitHub Enterprise\
          \ installation. If empty will default to https://api.github.com"
      githubAppID:
        type: "string"
        format: "int64"
        title: "GithubAppId specifies the ID of the GitHub app used to access the\
          \ repo"
      githubAppInstallationID:
        type: "string"
        format: "int64"
        title: "GithubAppInstallationId specifies the installation ID of the GitHub\
          \ App used to access the repo"
      githubAppPrivateKey:
        type: "string"
        title: "Github App Private Key PEM data"
      inheritedCreds:
        type: "boolean"
        title: "Whether credentials were inherited from a credential set"
      insecure:
        type: "boolean"
        title: "Insecure specifies whether the connection to the repository ignores\
          \ any errors when verifying TLS certificates or SSH host keys"
      insecureIgnoreHostKey:
        type: "boolean"
        title: "InsecureIgnoreHostKey should not be used anymore, Insecure is favoured\n\
          Used only for Git repos"
      name:
        type: "string"
        title: "Name specifies a name to be used for this repo. Only used with Helm\
          \ repos"
      password:
        type: "string"
        title: "Password contains the password or PAT used for authenticating at the\
          \ remote repository"
      project:
        type: "string"
        title: "Reference between project and repository that allow you automatically\
          \ to be added as item inside SourceRepos project entity"
      proxy:
        type: "string"
        title: "Proxy specifies the HTTP/HTTPS proxy used to access the repo"
      repo:
        type: "string"
        title: "Repo contains the URL to the remote repository"
      sshPrivateKey:
        type: "string"
        description: "SSHPrivateKey contains the PEM data for authenticating at the\
          \ repo server. Only used with Git repos."
      tlsClientCertData:
        type: "string"
        title: "TLSClientCertData contains a certificate in PEM format for authenticating\
          \ at the repo server"
      tlsClientCertKey:
        type: "string"
        title: "TLSClientCertKey contains a private key in PEM format for authenticating\
          \ at the repo server"
      type:
        type: "string"
        description: "Type specifies the type of the repo. Can be either \"git\" or\
          \ \"helm. \"git\" is assumed if empty or absent."
      username:
        type: "string"
        title: "Username contains the user name used for authenticating at the remote\
          \ repository"
    title: "Repository is a repository holding application configurations"
    example:
      tlsClientCertKey: "tlsClientCertKey"
      insecureIgnoreHostKey: true
      githubAppID: "githubAppID"
      connectionState:
        message: "message"
        attemptedAt:
          seconds: "seconds"
          nanos: 0
        status: "status"
      repo: "repo"
      githubAppInstallationID: "githubAppInstallationID"
      project: "project"
      tlsClientCertData: "tlsClientCertData"
      enableOCI: true
      type: "type"
      githubAppPrivateKey: "githubAppPrivateKey"
      enableLfs: true
      proxy: "proxy"
      password: "password"
      sshPrivateKey: "sshPrivateKey"
      insecure: true
      name: "name"
      inheritedCreds: true
      githubAppEnterpriseBaseUrl: "githubAppEnterpriseBaseUrl"
      username: "username"
  v1alpha1RepositoryCertificate:
    type: "object"
    properties:
      certData:
        type: "string"
        format: "byte"
        title: "CertData contains the actual certificate data, dependent on the certificate\
          \ type"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      certInfo:
        type: "string"
        title: "CertInfo will hold additional certificate info, depdendent on the\
          \ certificate type (e.g. SSH fingerprint, X509 CommonName)"
      certSubType:
        type: "string"
        title: "CertSubType specifies the sub type of the cert, i.e. \"ssh-rsa\""
      certType:
        type: "string"
        title: "CertType specifies the type of the certificate - currently one of\
          \ \"https\" or \"ssh\""
      serverName:
        type: "string"
        title: "ServerName specifies the DNS name of the server this certificate is\
          \ intended for"
    title: "A RepositoryCertificate is either SSH known hosts entry or TLS certificate"
    example:
      certType: "certType"
      certSubType: "certSubType"
      certInfo: "certInfo"
      serverName: "serverName"
      certData: "certData"
  v1alpha1RepositoryCertificateList:
    type: "object"
    properties:
      items:
        type: "array"
        title: "List of certificates to be processed"
        items:
          $ref: "#/definitions/v1alpha1RepositoryCertificate"
      metadata:
        $ref: "#/definitions/v1ListMeta"
    title: "RepositoryCertificateList is a collection of RepositoryCertificates"
    example:
      metadata:
        remainingItemCount: "remainingItemCount"
        continue: "continue"
        resourceVersion: "resourceVersion"
        selfLink: "selfLink"
      items:
      - certType: "certType"
        certSubType: "certSubType"
        certInfo: "certInfo"
        serverName: "serverName"
        certData: "certData"
      - certType: "certType"
        certSubType: "certSubType"
        certInfo: "certInfo"
        serverName: "serverName"
        certData: "certData"
  v1alpha1RepositoryList:
    type: "object"
    properties:
      items:
        type: "array"
        items:
          $ref: "#/definitions/v1alpha1Repository"
      metadata:
        $ref: "#/definitions/v1ListMeta"
    description: "RepositoryList is a collection of Repositories."
    example:
      metadata:
        remainingItemCount: "remainingItemCount"
        continue: "continue"
        resourceVersion: "resourceVersion"
        selfLink: "selfLink"
      items:
      - tlsClientCertKey: "tlsClientCertKey"
        insecureIgnoreHostKey: true
        githubAppID: "githubAppID"
        connectionState:
          message: "message"
          attemptedAt:
            seconds: "seconds"
            nanos: 0
          status: "status"
        repo: "repo"
        githubAppInstallationID: "githubAppInstallationID"
        project: "project"
        tlsClientCertData: "tlsClientCertData"
        enableOCI: true
        type: "type"
        githubAppPrivateKey: "githubAppPrivateKey"
        enableLfs: true
        proxy: "proxy"
        password: "password"
        sshPrivateKey: "sshPrivateKey"
        insecure: true
        name: "name"
        inheritedCreds: true
        githubAppEnterpriseBaseUrl: "githubAppEnterpriseBaseUrl"
        username: "username"
      - tlsClientCertKey: "tlsClientCertKey"
        insecureIgnoreHostKey: true
        githubAppID: "githubAppID"
        connectionState:
          message: "message"
          attemptedAt:
            seconds: "seconds"
            nanos: 0
          status: "status"
        repo: "repo"
        githubAppInstallationID: "githubAppInstallationID"
        project: "project"
        tlsClientCertData: "tlsClientCertData"
        enableOCI: true
        type: "type"
        githubAppPrivateKey: "githubAppPrivateKey"
        enableLfs: true
        proxy: "proxy"
        password: "password"
        sshPrivateKey: "sshPrivateKey"
        insecure: true
        name: "name"
        inheritedCreds: true
        githubAppEnterpriseBaseUrl: "githubAppEnterpriseBaseUrl"
        username: "username"
  v1alpha1ResourceAction:
    type: "object"
    properties:
      disabled:
        type: "boolean"
      name:
        type: "string"
      params:
        type: "array"
        items:
          $ref: "#/definitions/v1alpha1ResourceActionParam"
    title: "TODO: describe this type\nTODO: describe members of this type"
    example:
      name: "name"
      disabled: true
      params:
      - default: "default"
        name: "name"
        type: "type"
        value: "value"
      - default: "default"
        name: "name"
        type: "type"
        value: "value"
  v1alpha1ResourceActionParam:
    type: "object"
    properties:
      default:
        type: "string"
      name:
        type: "string"
      type:
        type: "string"
      value:
        type: "string"
    title: "TODO: describe this type\nTODO: describe members of this type"
    example:
      default: "default"
      name: "name"
      type: "type"
      value: "value"
  v1alpha1ResourceDiff:
    type: "object"
    properties:
      diff:
        type: "string"
        title: "Diff contains the JSON patch between target and live resource\nDeprecated:\
          \ use NormalizedLiveState and PredictedLiveState to render the difference"
      group:
        type: "string"
      hook:
        type: "boolean"
      kind:
        type: "string"
      liveState:
        type: "string"
        title: "TargetState contains the JSON live resource manifest"
      modified:
        type: "boolean"
      name:
        type: "string"
      namespace:
        type: "string"
      normalizedLiveState:
        type: "string"
        title: "NormalizedLiveState contains JSON serialized live resource state with\
          \ applied normalizations"
      predictedLiveState:
        type: "string"
        title: "PredictedLiveState contains JSON serialized resource state that is\
          \ calculated based on normalized and target resource state"
      resourceVersion:
        type: "string"
      targetState:
        type: "string"
        title: "TargetState contains the JSON serialized resource manifest defined\
          \ in the Git/Helm"
    title: "ResourceDiff holds the diff of a live and target resource object\nTODO:\
      \ describe members of this type"
    example:
      hook: true
      kind: "kind"
      targetState: "targetState"
      normalizedLiveState: "normalizedLiveState"
      resourceVersion: "resourceVersion"
      name: "name"
      namespace: "namespace"
      modified: true
      diff: "diff"
      predictedLiveState: "predictedLiveState"
      group: "group"
      liveState: "liveState"
  v1alpha1ResourceIgnoreDifferences:
    type: "object"
    properties:
      group:
        type: "string"
      jqPathExpressions:
        type: "array"
        items:
          type: "string"
      jsonPointers:
        type: "array"
        items:
          type: "string"
      kind:
        type: "string"
      name:
        type: "string"
      namespace:
        type: "string"
    description: "ResourceIgnoreDifferences contains resource filter and list of json\
      \ paths which should be ignored during comparison with live state."
    example:
      jqPathExpressions:
      - "jqPathExpressions"
      - "jqPathExpressions"
      jsonPointers:
      - "jsonPointers"
      - "jsonPointers"
      kind: "kind"
      name: "name"
      namespace: "namespace"
      group: "group"
  v1alpha1ResourceNetworkingInfo:
    type: "object"
    properties:
      externalURLs:
        type: "array"
        description: "ExternalURLs holds list of URLs which should be available externally.\
          \ List is populated for ingress resources using rules hostnames."
        items:
          type: "string"
      ingress:
        type: "array"
        items:
          $ref: "#/definitions/v1LoadBalancerIngress"
      labels:
        type: "object"
        additionalProperties:
          type: "string"
      targetLabels:
        type: "object"
        additionalProperties:
          type: "string"
      targetRefs:
        type: "array"
        items:
          $ref: "#/definitions/v1alpha1ResourceRef"
    title: "ResourceNetworkingInfo holds networking resource related information\n\
      TODO: describe members of this type"
    example:
      ingress:
      - hostname: "hostname"
        ip: "ip"
        ports:
        - protocol: "protocol"
          port: 0
          error: "error"
        - protocol: "protocol"
          port: 0
          error: "error"
      - hostname: "hostname"
        ip: "ip"
        ports:
        - protocol: "protocol"
          port: 0
          error: "error"
        - protocol: "protocol"
          port: 0
          error: "error"
      targetRefs:
      - uid: "uid"
        kind: "kind"
        name: "name"
        namespace: "namespace"
        version: "version"
        group: "group"
      - uid: "uid"
        kind: "kind"
        name: "name"
        namespace: "namespace"
        version: "version"
        group: "group"
      targetLabels:
        key: "targetLabels"
      externalURLs:
      - "externalURLs"
      - "externalURLs"
      labels:
        key: "labels"
  v1alpha1ResourceNode:
    type: "object"
    properties:
      createdAt:
        $ref: "#/definitions/v1Time"
      health:
        $ref: "#/definitions/v1alpha1HealthStatus"
      images:
        type: "array"
        items:
          type: "string"
      info:
        type: "array"
        items:
          $ref: "#/definitions/v1alpha1InfoItem"
      networkingInfo:
        $ref: "#/definitions/v1alpha1ResourceNetworkingInfo"
      parentRefs:
        type: "array"
        items:
          $ref: "#/definitions/v1alpha1ResourceRef"
      resourceRef:
        $ref: "#/definitions/v1alpha1ResourceRef"
      resourceVersion:
        type: "string"
    title: "ResourceNode contains information about live resource and its children\n\
      TODO: describe members of this type"
    example:
      resourceRef:
        uid: "uid"
        kind: "kind"
        name: "name"
        namespace: "namespace"
        version: "version"
        group: "group"
      createdAt:
        seconds: "seconds"
        nanos: 0
      images:
      - "images"
      - "images"
      parentRefs:
      - uid: "uid"
        kind: "kind"
        name: "name"
        namespace: "namespace"
        version: "version"
        group: "group"
      - uid: "uid"
        kind: "kind"
        name: "name"
        namespace: "namespace"
        version: "version"
        group: "group"
      resourceVersion: "resourceVersion"
      health:
        message: "message"
        status: "status"
      info:
      - name: "name"
        value: "value"
      - name: "name"
        value: "value"
      networkingInfo:
        ingress:
        - hostname: "hostname"
          ip: "ip"
          ports:
          - protocol: "protocol"
            port: 0
            error: "error"
          - protocol: "protocol"
            port: 0
            error: "error"
        - hostname: "hostname"
          ip: "ip"
          ports:
          - protocol: "protocol"
            port: 0
            error: "error"
          - protocol: "protocol"
            port: 0
            error: "error"
        targetRefs:
        - uid: "uid"
          kind: "kind"
          name: "name"
          namespace: "namespace"
          version: "version"
          group: "group"
        - uid: "uid"
          kind: "kind"
          name: "name"
          namespace: "namespace"
          version: "version"
          group: "group"
        targetLabels:
          key: "targetLabels"
        externalURLs:
        - "externalURLs"
        - "externalURLs"
        labels:
          key: "labels"
  v1alpha1ResourceOverride:
    type: "object"
    properties:
      actions:
        type: "string"
      healthLua:
        type: "string"
      ignoreDifferences:
        $ref: "#/definitions/v1alpha1OverrideIgnoreDiff"
      knownTypeFields:
        type: "array"
        items:
          $ref: "#/definitions/v1alpha1KnownTypeField"
      useOpenLibs:
        type: "boolean"
    title: "ResourceOverride holds configuration to customize resource diffing and\
      \ health assessment\nTODO: describe the members of this type"
    example:
      healthLua: "healthLua"
      knownTypeFields:
      - field: "field"
        type: "type"
      - field: "field"
        type: "type"
      useOpenLibs: true
      actions: "actions"
      ignoreDifferences:
        jqPathExpressions:
        - "jqPathExpressions"
        - "jqPathExpressions"
        jSONPointers:
        - "jSONPointers"
        - "jSONPointers"
  v1alpha1ResourceRef:
    type: "object"
    properties:
      group:
        type: "string"
      kind:
        type: "string"
      name:
        type: "string"
      namespace:
        type: "string"
      uid:
        type: "string"
      version:
        type: "string"
    title: "ResourceRef includes fields which uniquely identify a resource"
    example:
      uid: "uid"
      kind: "kind"
      name: "name"
      namespace: "namespace"
      version: "version"
      group: "group"
  v1alpha1ResourceResult:
    type: "object"
    properties:
      group:
        type: "string"
        title: "Group specifies the API group of the resource"
      hookPhase:
        type: "string"
        description: "HookPhase contains the state of any operation associated with\
          \ this resource OR hook\nThis can also contain values for non-hook resources."
      hookType:
        type: "string"
        title: "HookType specifies the type of the hook. Empty for non-hook resources"
      kind:
        type: "string"
        title: "Kind specifies the API kind of the resource"
      message:
        type: "string"
        title: "Message contains an informational or error message for the last sync\
          \ OR operation"
      name:
        type: "string"
        title: "Name specifies the name of the resource"
      namespace:
        type: "string"
        title: "Namespace specifies the target namespace of the resource"
      status:
        type: "string"
        title: "Status holds the final result of the sync. Will be empty if the resources\
          \ is yet to be applied/pruned and is always zero-value for hooks"
      syncPhase:
        type: "string"
        title: "SyncPhase indicates the particular phase of the sync that this result\
          \ was acquired in"
      version:
        type: "string"
        title: "Version specifies the API version of the resource"
    title: "ResourceResult holds the operation result details of a specific resource"
    example:
      syncPhase: "syncPhase"
      kind: "kind"
      name: "name"
      namespace: "namespace"
      hookPhase: "hookPhase"
      message: "message"
      version: "version"
      hookType: "hookType"
      group: "group"
      status: "status"
  v1alpha1ResourceStatus:
    type: "object"
    properties:
      group:
        type: "string"
      health:
        $ref: "#/definitions/v1alpha1HealthStatus"
      hook:
        type: "boolean"
      kind:
        type: "string"
      name:
        type: "string"
      namespace:
        type: "string"
      requiresPruning:
        type: "boolean"
      status:
        type: "string"
      version:
        type: "string"
    title: "ResourceStatus holds the current sync and health status of a resource\n\
      TODO: describe members of this type"
    example:
      hook: true
      kind: "kind"
      name: "name"
      namespace: "namespace"
      health:
        message: "message"
        status: "status"
      requiresPruning: true
      version: "version"
      group: "group"
      status: "status"
  v1alpha1RetryStrategy:
    type: "object"
    properties:
      backoff:
        $ref: "#/definitions/v1alpha1Backoff"
      limit:
        type: "string"
        format: "int64"
        description: "Limit is the maximum number of attempts for retrying a failed\
          \ sync. If set to 0, no retries will be performed."
    title: "RetryStrategy contains information about the strategy to apply when a\
      \ sync failed"
    example:
      backoff:
        duration: "duration"
        factor: "factor"
        maxDuration: "maxDuration"
      limit: "limit"
  v1alpha1RevisionHistory:
    type: "object"
    properties:
      deployStartedAt:
        $ref: "#/definitions/v1Time"
      deployedAt:
        $ref: "#/definitions/v1Time"
      id:
        type: "string"
        format: "int64"
        title: "ID is an auto incrementing identifier of the RevisionHistory"
      revision:
        type: "string"
        title: "Revision holds the revision the sync was performed against"
      source:
        $ref: "#/definitions/v1alpha1ApplicationSource"
    title: "RevisionHistory contains history information about a previous sync"
    example:
      deployStartedAt:
        seconds: "seconds"
        nanos: 0
      id: "id"
      source:
        repoURL: "repoURL"
        ksonnet:
          environment: "environment"
          parameters:
          - component: "component"
            name: "name"
            value: "value"
          - component: "component"
            name: "name"
            value: "value"
        path: "path"
        targetRevision: "targetRevision"
        plugin:
          name: "name"
          env:
          - name: "name"
            value: "value"
          - name: "name"
            value: "value"
        kustomize:
          commonLabels:
            key: "commonLabels"
          images:
          - "images"
          - "images"
          namePrefix: "namePrefix"
          forceCommonAnnotations: true
          nameSuffix: "nameSuffix"
          forceCommonLabels: true
          version: "version"
          commonAnnotations:
            key: "commonAnnotations"
        chart: "chart"
        directory:
          include: "include"
          jsonnet:
            extVars:
            - code: true
              name: "name"
              value: "value"
            - code: true
              name: "name"
              value: "value"
            libs:
            - "libs"
            - "libs"
            tlas:
            - code: true
              name: "name"
              value: "value"
            - code: true
              name: "name"
              value: "value"
          recurse: true
          exclude: "exclude"
        helm:
          valueFiles:
          - "valueFiles"
          - "valueFiles"
          releaseName: "releaseName"
          fileParameters:
          - path: "path"
            name: "name"
          - path: "path"
            name: "name"
          values: "values"
          passCredentials: true
          parameters:
          - forceString: true
            name: "name"
            value: "value"
          - forceString: true
            name: "name"
            value: "value"
          version: "version"
      deployedAt:
        seconds: "seconds"
        nanos: 0
      revision: "revision"
  v1alpha1RevisionMetadata:
    type: "object"
    properties:
      author:
        type: "string"
        title: "who authored this revision,\ntypically their name and email, e.g.\
          \ \"John Doe <john_doe@my-company.com>\",\nbut might not match this example"
      date:
        $ref: "#/definitions/v1Time"
      message:
        type: "string"
        title: "Message contains the message associated with the revision, most likely\
          \ the commit message.\nThe message is truncated to the first newline or\
          \ 64 characters (which ever comes first)"
      signatureInfo:
        type: "string"
        description: "SignatureInfo contains a hint on the signer if the revision\
          \ was signed with GPG, and signature verification is enabled."
      tags:
        type: "array"
        title: "Tags specifies any tags currently attached to the revision\nFloating\
          \ tags can move from one revision to another"
        items:
          type: "string"
    title: "RevisionMetadata contains metadata for a specific revision in a Git repository"
    example:
      date:
        seconds: "seconds"
        nanos: 0
      signatureInfo: "signatureInfo"
      author: "author"
      message: "message"
      tags:
      - "tags"
      - "tags"
  v1alpha1SignatureKey:
    type: "object"
    properties:
      keyID:
        type: "string"
        title: "The ID of the key in hexadecimal notation"
    title: "SignatureKey is the specification of a key required to verify commit signatures\
      \ with"
    example:
      keyID: "keyID"
  v1alpha1SyncOperation:
    type: "object"
    properties:
      dryRun:
        type: "boolean"
        title: "DryRun specifies to perform a `kubectl apply --dry-run` without actually\
          \ performing the sync"
      manifests:
        type: "array"
        title: "Manifests is an optional field that overrides sync source with a local\
          \ directory for development"
        items:
          type: "string"
      prune:
        type: "boolean"
        title: "Prune specifies to delete resources from the cluster that are no longer\
          \ tracked in git"
      resources:
        type: "array"
        title: "Resources describes which resources shall be part of the sync"
        items:
          $ref: "#/definitions/v1alpha1SyncOperationResource"
      revision:
        type: "string"
        description: "Revision is the revision (Git) or chart version (Helm) which\
          \ to sync the application to\nIf omitted, will use the revision specified\
          \ in app spec."
      source:
        $ref: "#/definitions/v1alpha1ApplicationSource"
      syncOptions:
        type: "array"
        title: "SyncOptions provide per-sync sync-options, e.g. Validate=false"
        items:
          type: "string"
      syncStrategy:
        $ref: "#/definitions/v1alpha1SyncStrategy"
    description: "SyncOperation contains details about a sync operation."
    example:
      dryRun: true
      prune: true
      manifests:
      - "manifests"
      - "manifests"
      resources:
      - kind: "kind"
        name: "name"
        namespace: "namespace"
        group: "group"
      - kind: "kind"
        name: "name"
        namespace: "namespace"
        group: "group"
      source:
        repoURL: "repoURL"
        ksonnet:
          environment: "environment"
          parameters:
          - component: "component"
            name: "name"
            value: "value"
          - component: "component"
            name: "name"
            value: "value"
        path: "path"
        targetRevision: "targetRevision"
        plugin:
          name: "name"
          env:
          - name: "name"
            value: "value"
          - name: "name"
            value: "value"
        kustomize:
          commonLabels:
            key: "commonLabels"
          images:
          - "images"
          - "images"
          namePrefix: "namePrefix"
          forceCommonAnnotations: true
          nameSuffix: "nameSuffix"
          forceCommonLabels: true
          version: "version"
          commonAnnotations:
            key: "commonAnnotations"
        chart: "chart"
        directory:
          include: "include"
          jsonnet:
            extVars:
            - code: true
              name: "name"
              value: "value"
            - code: true
              name: "name"
              value: "value"
            libs:
            - "libs"
            - "libs"
            tlas:
            - code: true
              name: "name"
              value: "value"
            - code: true
              name: "name"
              value: "value"
          recurse: true
          exclude: "exclude"
        helm:
          valueFiles:
          - "valueFiles"
          - "valueFiles"
          releaseName: "releaseName"
          fileParameters:
          - path: "path"
            name: "name"
          - path: "path"
            name: "name"
          values: "values"
          passCredentials: true
          parameters:
          - forceString: true
            name: "name"
            value: "value"
          - forceString: true
            name: "name"
            value: "value"
          version: "version"
      syncStrategy:
        hook:
          syncStrategyApply:
            force: true
        apply:
          force: true
      syncOptions:
      - "syncOptions"
      - "syncOptions"
      revision: "revision"
  v1alpha1SyncOperationResource:
    type: "object"
    properties:
      group:
        type: "string"
      kind:
        type: "string"
      name:
        type: "string"
      namespace:
        type: "string"
    description: "SyncOperationResource contains resources to sync."
    example:
      kind: "kind"
      name: "name"
      namespace: "namespace"
      group: "group"
  v1alpha1SyncOperationResult:
    type: "object"
    properties:
      resources:
        type: "array"
        title: "Resources contains a list of sync result items for each individual\
          \ resource in a sync operation"
        items:
          $ref: "#/definitions/v1alpha1ResourceResult"
      revision:
        type: "string"
        title: "Revision holds the revision this sync operation was performed to"
      source:
        $ref: "#/definitions/v1alpha1ApplicationSource"
    title: "SyncOperationResult represent result of sync operation"
    example:
      resources:
      - syncPhase: "syncPhase"
        kind: "kind"
        name: "name"
        namespace: "namespace"
        hookPhase: "hookPhase"
        message: "message"
        version: "version"
        hookType: "hookType"
        group: "group"
        status: "status"
      - syncPhase: "syncPhase"
        kind: "kind"
        name: "name"
        namespace: "namespace"
        hookPhase: "hookPhase"
        message: "message"
        version: "version"
        hookType: "hookType"
        group: "group"
        status: "status"
      source:
        repoURL: "repoURL"
        ksonnet:
          environment: "environment"
          parameters:
          - component: "component"
            name: "name"
            value: "value"
          - component: "component"
            name: "name"
            value: "value"
        path: "path"
        targetRevision: "targetRevision"
        plugin:
          name: "name"
          env:
          - name: "name"
            value: "value"
          - name: "name"
            value: "value"
        kustomize:
          commonLabels:
            key: "commonLabels"
          images:
          - "images"
          - "images"
          namePrefix: "namePrefix"
          forceCommonAnnotations: true
          nameSuffix: "nameSuffix"
          forceCommonLabels: true
          version: "version"
          commonAnnotations:
            key: "commonAnnotations"
        chart: "chart"
        directory:
          include: "include"
          jsonnet:
            extVars:
            - code: true
              name: "name"
              value: "value"
            - code: true
              name: "name"
              value: "value"
            libs:
            - "libs"
            - "libs"
            tlas:
            - code: true
              name: "name"
              value: "value"
            - code: true
              name: "name"
              value: "value"
          recurse: true
          exclude: "exclude"
        helm:
          valueFiles:
          - "valueFiles"
          - "valueFiles"
          releaseName: "releaseName"
          fileParameters:
          - path: "path"
            name: "name"
          - path: "path"
            name: "name"
          values: "values"
          passCredentials: true
          parameters:
          - forceString: true
            name: "name"
            value: "value"
          - forceString: true
            name: "name"
            value: "value"
          version: "version"
      revision: "revision"
  v1alpha1SyncPolicy:
    type: "object"
    properties:
      automated:
        $ref: "#/definitions/v1alpha1SyncPolicyAutomated"
      retry:
        $ref: "#/definitions/v1alpha1RetryStrategy"
      syncOptions:
        type: "array"
        title: "Options allow you to specify whole app sync-options"
        items:
          type: "string"
    title: "SyncPolicy controls when a sync will be performed in response to updates\
      \ in git"
    example:
      automated:
        allowEmpty: true
        selfHeal: true
        prune: true
      retry:
        backoff:
          duration: "duration"
          factor: "factor"
          maxDuration: "maxDuration"
        limit: "limit"
      syncOptions:
      - "syncOptions"
      - "syncOptions"
  v1alpha1SyncPolicyAutomated:
    type: "object"
    properties:
      allowEmpty:
        type: "boolean"
        title: "AllowEmpty allows apps have zero live resources (default: false)"
      prune:
        type: "boolean"
        title: "Prune specifies whether to delete resources from the cluster that\
          \ are not found in the sources anymore as part of automated sync (default:\
          \ false)"
      selfHeal:
        type: "boolean"
        title: "SelfHeal specifes whether to revert resources back to their desired\
          \ state upon modification in the cluster (default: false)"
    title: "SyncPolicyAutomated controls the behavior of an automated sync"
    example:
      allowEmpty: true
      selfHeal: true
      prune: true
  v1alpha1SyncStatus:
    type: "object"
    properties:
      comparedTo:
        $ref: "#/definitions/v1alpha1ComparedTo"
      revision:
        type: "string"
        title: "Revision contains information about the revision the comparison has\
          \ been performed to"
      status:
        type: "string"
        title: "Status is the sync state of the comparison"
    title: "SyncStatus contains information about the currently observed live and\
      \ desired states of an application"
    example:
      comparedTo:
        destination:
          server: "server"
          name: "name"
          namespace: "namespace"
        source:
          repoURL: "repoURL"
          ksonnet:
            environment: "environment"
            parameters:
            - component: "component"
              name: "name"
              value: "value"
            - component: "component"
              name: "name"
              value: "value"
          path: "path"
          targetRevision: "targetRevision"
          plugin:
            name: "name"
            env:
            - name: "name"
              value: "value"
            - name: "name"
              value: "value"
          kustomize:
            commonLabels:
              key: "commonLabels"
            images:
            - "images"
            - "images"
            namePrefix: "namePrefix"
            forceCommonAnnotations: true
            nameSuffix: "nameSuffix"
            forceCommonLabels: true
            version: "version"
            commonAnnotations:
              key: "commonAnnotations"
          chart: "chart"
          directory:
            include: "include"
            jsonnet:
              extVars:
              - code: true
                name: "name"
                value: "value"
              - code: true
                name: "name"
                value: "value"
              libs:
              - "libs"
              - "libs"
              tlas:
              - code: true
                name: "name"
                value: "value"
              - code: true
                name: "name"
                value: "value"
            recurse: true
            exclude: "exclude"
          helm:
            valueFiles:
            - "valueFiles"
            - "valueFiles"
            releaseName: "releaseName"
            fileParameters:
            - path: "path"
              name: "name"
            - path: "path"
              name: "name"
            values: "values"
            passCredentials: true
            parameters:
            - forceString: true
              name: "name"
              value: "value"
            - forceString: true
              name: "name"
              value: "value"
            version: "version"
      revision: "revision"
      status: "status"
  v1alpha1SyncStrategy:
    type: "object"
    properties:
      apply:
        $ref: "#/definitions/v1alpha1SyncStrategyApply"
      hook:
        $ref: "#/definitions/v1alpha1SyncStrategyHook"
    title: "SyncStrategy controls the manner in which a sync is performed"
    example:
      hook:
        syncStrategyApply:
          force: true
      apply:
        force: true
  v1alpha1SyncStrategyApply:
    type: "object"
    properties:
      force:
        type: "boolean"
        description: "Force indicates whether or not to supply the --force flag to\
          \ `kubectl apply`.\nThe --force flag deletes and re-create the resource,\
          \ when PATCH encounters conflict and has\nretried for 5 times."
    title: "SyncStrategyApply uses `kubectl apply` to perform the apply"
    example:
      force: true
  v1alpha1SyncStrategyHook:
    type: "object"
    properties:
      syncStrategyApply:
        $ref: "#/definitions/v1alpha1SyncStrategyApply"
    description: "SyncStrategyHook will perform a sync using hooks annotations.\n\
      If no hook annotation is specified falls back to `kubectl apply`."
    example:
      syncStrategyApply:
        force: true
  v1alpha1SyncWindow:
    type: "object"
    properties:
      applications:
        type: "array"
        title: "Applications contains a list of applications that the window will\
          \ apply to"
        items:
          type: "string"
      clusters:
        type: "array"
        title: "Clusters contains a list of clusters that the window will apply to"
        items:
          type: "string"
      duration:
        type: "string"
        title: "Duration is the amount of time the sync window will be open"
      kind:
        type: "string"
        title: "Kind defines if the window allows or blocks syncs"
      manualSync:
        type: "boolean"
        title: "ManualSync enables manual syncs when they would otherwise be blocked"
      namespaces:
        type: "array"
        title: "Namespaces contains a list of namespaces that the window will apply\
          \ to"
        items:
          type: "string"
      schedule:
        type: "string"
        title: "Schedule is the time the window will begin, specified in cron format"
      timeZone:
        type: "string"
        title: "TimeZone of the sync that will be applied to the schedule"
    title: "SyncWindow contains the kind, time, duration and attributes that are used\
      \ to assign the syncWindows to apps"
    example:
      duration: "duration"
      schedule: "schedule"
      kind: "kind"
      timeZone: "timeZone"
      manualSync: true
      clusters:
      - "clusters"
      - "clusters"
      applications:
      - "applications"
      - "applications"
      namespaces:
      - "namespaces"
      - "namespaces"
  v1alpha1TLSClientConfig:
    type: "object"
    properties:
      caData:
        type: "string"
        format: "byte"
        title: "CAData holds PEM-encoded bytes (typically read from a root certificates\
          \ bundle).\nCAData takes precedence over CAFile"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      certData:
        type: "string"
        format: "byte"
        title: "CertData holds PEM-encoded bytes (typically read from a client certificate\
          \ file).\nCertData takes precedence over CertFile"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      insecure:
        type: "boolean"
        description: "Insecure specifies that the server should be accessed without\
          \ verifying the TLS certificate. For testing only."
      keyData:
        type: "string"
        format: "byte"
        title: "KeyData holds PEM-encoded bytes (typically read from a client certificate\
          \ key file).\nKeyData takes precedence over KeyFile"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      serverName:
        type: "string"
        description: "ServerName is passed to the server for SNI and is used in the\
          \ client to check server\ncertificates against. If ServerName is empty,\
          \ the hostname used to contact the\nserver is used."
    title: "TLSClientConfig contains settings to enable transport layer security"
    example:
      keyData: "keyData"
      insecure: true
      serverName: "serverName"
      certData: "certData"
      caData: "caData"
  versionVersionMessage:
    type: "object"
    properties:
      BuildDate:
        type: "string"
      Compiler:
        type: "string"
      GitCommit:
        type: "string"
      GitTag:
        type: "string"
      GitTreeState:
        type: "string"
      GoVersion:
        type: "string"
      HelmVersion:
        type: "string"
      JsonnetVersion:
        type: "string"
      KsonnetVersion:
        type: "string"
      KubectlVersion:
        type: "string"
      KustomizeVersion:
        type: "string"
      Platform:
        type: "string"
      Version:
        type: "string"
    title: "VersionMessage represents version of the Argo CD API server"
    example:
      Compiler: "Compiler"
      HelmVersion: "HelmVersion"
      GitCommit: "GitCommit"
      Platform: "Platform"
      KustomizeVersion: "KustomizeVersion"
      KsonnetVersion: "KsonnetVersion"
      KubectlVersion: "KubectlVersion"
      GitTreeState: "GitTreeState"
      JsonnetVersion: "JsonnetVersion"
      GitTag: "GitTag"
      BuildDate: "BuildDate"
      Version: "Version"
      GoVersion: "GoVersion"
  Stream result of applicationLogEntry:
    type: "object"
    properties:
      error:
        $ref: "#/definitions/runtimeStreamError"
      result:
        $ref: "#/definitions/applicationLogEntry"
    example:
      result:
        timeStamp:
          seconds: "seconds"
          nanos: 0
        last: true
        timeStampStr: "timeStampStr"
        podName: "podName"
        content: "content"
      error:
        http_code: 6
        details:
        - value: "value"
          type_url: "type_url"
        - value: "value"
          type_url: "type_url"
        http_status: "http_status"
        message: "message"
        grpc_code: 0
  Stream result of v1alpha1ApplicationWatchEvent:
    type: "object"
    properties:
      error:
        $ref: "#/definitions/runtimeStreamError"
      result:
        $ref: "#/definitions/v1alpha1ApplicationWatchEvent"
    example:
      result:
        application:
          metadata:
            generation: "generation"
            finalizers:
            - "finalizers"
            - "finalizers"
            resourceVersion: "resourceVersion"
            annotations:
              key: "annotations"
            generateName: "generateName"
            deletionTimestamp:
              seconds: "seconds"
              nanos: 0
            labels:
              key: "labels"
            ownerReferences:
            - uid: "uid"
              controller: true
              apiVersion: "apiVersion"
              kind: "kind"
              name: "name"
              blockOwnerDeletion: true
            - uid: "uid"
              controller: true
              apiVersion: "apiVersion"
              kind: "kind"
              name: "name"
              blockOwnerDeletion: true
            selfLink: "selfLink"
            deletionGracePeriodSeconds: "deletionGracePeriodSeconds"
            uid: "uid"
            managedFields:
            - apiVersion: "apiVersion"
              fieldsV1:
                Raw: "Raw"
              manager: "manager"
              subresource: "subresource"
              time:
                seconds: "seconds"
                nanos: 0
              operation: "operation"
              fieldsType: "fieldsType"
            - apiVersion: "apiVersion"
              fieldsV1:
                Raw: "Raw"
              manager: "manager"
              subresource: "subresource"
              time:
                seconds: "seconds"
                nanos: 0
              operation: "operation"
              fieldsType: "fieldsType"
            clusterName: "clusterName"
            creationTimestamp:
              seconds: "seconds"
              nanos: 0
            name: "name"
            namespace: "namespace"
          operation:
            sync:
              dryRun: true
              prune: true
              manifests:
              - "manifests"
              - "manifests"
              resources:
              - kind: "kind"
                name: "name"
                namespace: "namespace"
                group: "group"
              - kind: "kind"
                name: "name"
                namespace: "namespace"
                group: "group"
              source:
                repoURL: "repoURL"
                ksonnet:
                  environment: "environment"
                  parameters:
                  - component: "component"
                    name: "name"
                    value: "value"
                  - component: "component"
                    name: "name"
                    value: "value"
                path: "path"
                targetRevision: "targetRevision"
                plugin:
                  name: "name"
                  env:
                  - name: "name"
                    value: "value"
                  - name: "name"
                    value: "value"
                kustomize:
                  commonLabels:
                    key: "commonLabels"
                  images:
                  - "images"
                  - "images"
                  namePrefix: "namePrefix"
                  forceCommonAnnotations: true
                  nameSuffix: "nameSuffix"
                  forceCommonLabels: true
                  version: "version"
                  commonAnnotations:
                    key: "commonAnnotations"
                chart: "chart"
                directory:
                  include: "include"
                  jsonnet:
                    extVars:
                    - code: true
                      name: "name"
                      value: "value"
                    - code: true
                      name: "name"
                      value: "value"
                    libs:
                    - "libs"
                    - "libs"
                    tlas:
                    - code: true
                      name: "name"
                      value: "value"
                    - code: true
                      name: "name"
                      value: "value"
                  recurse: true
                  exclude: "exclude"
                helm:
                  valueFiles:
                  - "valueFiles"
                  - "valueFiles"
                  releaseName: "releaseName"
                  fileParameters:
                  - path: "path"
                    name: "name"
                  - path: "path"
                    name: "name"
                  values: "values"
                  passCredentials: true
                  parameters:
                  - forceString: true
                    name: "name"
                    value: "value"
                  - forceString: true
                    name: "name"
                    value: "value"
                  version: "version"
              syncStrategy:
                hook:
                  syncStrategyApply:
                    force: true
                apply:
                  force: true
              syncOptions:
              - "syncOptions"
              - "syncOptions"
              revision: "revision"
            initiatedBy:
              automated: true
              username: "username"
            retry:
              backoff:
                duration: "duration"
                factor: "factor"
                maxDuration: "maxDuration"
              limit: "limit"
            info:
            - name: "name"
              value: "value"
            - name: "name"
              value: "value"
          spec:
            destination:
              server: "server"
              name: "name"
              namespace: "namespace"
            project: "project"
            revisionHistoryLimit: "revisionHistoryLimit"
            source:
              repoURL: "repoURL"
              ksonnet:
                environment: "environment"
                parameters:
                - component: "component"
                  name: "name"
                  value: "value"
                - component: "component"
                  name: "name"
                  value: "value"
              path: "path"
              targetRevision: "targetRevision"
              plugin:
                name: "name"
                env:
                - name: "name"
                  value: "value"
                - name: "name"
                  value: "value"
              kustomize:
                commonLabels:
                  key: "commonLabels"
                images:
                - "images"
                - "images"
                namePrefix: "namePrefix"
                forceCommonAnnotations: true
                nameSuffix: "nameSuffix"
                forceCommonLabels: true
                version: "version"
                commonAnnotations:
                  key: "commonAnnotations"
              chart: "chart"
              directory:
                include: "include"
                jsonnet:
                  extVars:
                  - code: true
                    name: "name"
                    value: "value"
                  - code: true
                    name: "name"
                    value: "value"
                  libs:
                  - "libs"
                  - "libs"
                  tlas:
                  - code: true
                    name: "name"
                    value: "value"
                  - code: true
                    name: "name"
                    value: "value"
                recurse: true
                exclude: "exclude"
              helm:
                valueFiles:
                - "valueFiles"
                - "valueFiles"
                releaseName: "releaseName"
                fileParameters:
                - path: "path"
                  name: "name"
                - path: "path"
                  name: "name"
                values: "values"
                passCredentials: true
                parameters:
                - forceString: true
                  name: "name"
                  value: "value"
                - forceString: true
                  name: "name"
                  value: "value"
                version: "version"
            ignoreDifferences:
            - jqPathExpressions:
              - "jqPathExpressions"
              - "jqPathExpressions"
              jsonPointers:
              - "jsonPointers"
              - "jsonPointers"
              kind: "kind"
              name: "name"
              namespace: "namespace"
              group: "group"
            - jqPathExpressions:
              - "jqPathExpressions"
              - "jqPathExpressions"
              jsonPointers:
              - "jsonPointers"
              - "jsonPointers"
              kind: "kind"
              name: "name"
              namespace: "namespace"
              group: "group"
            syncPolicy:
              automated:
                allowEmpty: true
                selfHeal: true
                prune: true
              retry:
                backoff:
                  duration: "duration"
                  factor: "factor"
                  maxDuration: "maxDuration"
                limit: "limit"
              syncOptions:
              - "syncOptions"
              - "syncOptions"
            info:
            - name: "name"
              value: "value"
            - name: "name"
              value: "value"
          status:
            summary:
              images:
              - "images"
              - "images"
              externalURLs:
              - "externalURLs"
              - "externalURLs"
            sourceType: "sourceType"
            observedAt:
              seconds: "seconds"
              nanos: 0
            operationState:
              phase: "phase"
              retryCount: "retryCount"
              startedAt:
                seconds: "seconds"
                nanos: 0
              syncResult:
                resources:
                - syncPhase: "syncPhase"
                  kind: "kind"
                  name: "name"
                  namespace: "namespace"
                  hookPhase: "hookPhase"
                  message: "message"
                  version: "version"
                  hookType: "hookType"
                  group: "group"
                  status: "status"
                - syncPhase: "syncPhase"
                  kind: "kind"
                  name: "name"
                  namespace: "namespace"
                  hookPhase: "hookPhase"
                  message: "message"
                  version: "version"
                  hookType: "hookType"
                  group: "group"
                  status: "status"
                source:
                  repoURL: "repoURL"
                  ksonnet:
                    environment: "environment"
                    parameters:
                    - component: "component"
                      name: "name"
                      value: "value"
                    - component: "component"
                      name: "name"
                      value: "value"
                  path: "path"
                  targetRevision: "targetRevision"
                  plugin:
                    name: "name"
                    env:
                    - name: "name"
                      value: "value"
                    - name: "name"
                      value: "value"
                  kustomize:
                    commonLabels:
                      key: "commonLabels"
                    images:
                    - "images"
                    - "images"
                    namePrefix: "namePrefix"
                    forceCommonAnnotations: true
                    nameSuffix: "nameSuffix"
                    forceCommonLabels: true
                    version: "version"
                    commonAnnotations:
                      key: "commonAnnotations"
                  chart: "chart"
                  directory:
                    include: "include"
                    jsonnet:
                      extVars:
                      - code: true
                        name: "name"
                        value: "value"
                      - code: true
                        name: "name"
                        value: "value"
                      libs:
                      - "libs"
                      - "libs"
                      tlas:
                      - code: true
                        name: "name"
                        value: "value"
                      - code: true
                        name: "name"
                        value: "value"
                    recurse: true
                    exclude: "exclude"
                  helm:
                    valueFiles:
                    - "valueFiles"
                    - "valueFiles"
                    releaseName: "releaseName"
                    fileParameters:
                    - path: "path"
                      name: "name"
                    - path: "path"
                      name: "name"
                    values: "values"
                    passCredentials: true
                    parameters:
                    - forceString: true
                      name: "name"
                      value: "value"
                    - forceString: true
                      name: "name"
                      value: "value"
                    version: "version"
                revision: "revision"
              message: "message"
              operation:
                sync:
                  dryRun: true
                  prune: true
                  manifests:
                  - "manifests"
                  - "manifests"
                  resources:
                  - kind: "kind"
                    name: "name"
                    namespace: "namespace"
                    group: "group"
                  - kind: "kind"
                    name: "name"
                    namespace: "namespace"
                    group: "group"
                  source:
                    repoURL: "repoURL"
                    ksonnet:
                      environment: "environment"
                      parameters:
                      - component: "component"
                        name: "name"
                        value: "value"
                      - component: "component"
                        name: "name"
                        value: "value"
                    path: "path"
                    targetRevision: "targetRevision"
                    plugin:
                      name: "name"
                      env:
                      - name: "name"
                        value: "value"
                      - name: "name"
                        value: "value"
                    kustomize:
                      commonLabels:
                        key: "commonLabels"
                      images:
                      - "images"
                      - "images"
                      namePrefix: "namePrefix"
                      forceCommonAnnotations: true
                      nameSuffix: "nameSuffix"
                      forceCommonLabels: true
                      version: "version"
                      commonAnnotations:
                        key: "commonAnnotations"
                    chart: "chart"
                    directory:
                      include: "include"
                      jsonnet:
                        extVars:
                        - code: true
                          name: "name"
                          value: "value"
                        - code: true
                          name: "name"
                          value: "value"
                        libs:
                        - "libs"
                        - "libs"
                        tlas:
                        - code: true
                          name: "name"
                          value: "value"
                        - code: true
                          name: "name"
                          value: "value"
                      recurse: true
                      exclude: "exclude"
                    helm:
                      valueFiles:
                      - "valueFiles"
                      - "valueFiles"
                      releaseName: "releaseName"
                      fileParameters:
                      - path: "path"
                        name: "name"
                      - path: "path"
                        name: "name"
                      values: "values"
                      passCredentials: true
                      parameters:
                      - forceString: true
                        name: "name"
                        value: "value"
                      - forceString: true
                        name: "name"
                        value: "value"
                      version: "version"
                  syncStrategy:
                    hook:
                      syncStrategyApply:
                        force: true
                    apply:
                      force: true
                  syncOptions:
                  - "syncOptions"
                  - "syncOptions"
                  revision: "revision"
                initiatedBy:
                  automated: true
                  username: "username"
                retry:
                  backoff:
                    duration: "duration"
                    factor: "factor"
                    maxDuration: "maxDuration"
                  limit: "limit"
                info:
                - name: "name"
                  value: "value"
                - name: "name"
                  value: "value"
              finishedAt:
                seconds: "seconds"
                nanos: 0
            reconciledAt:
              seconds: "seconds"
              nanos: 0
            health:
              message: "message"
              status: "status"
            resources:
            - hook: true
              kind: "kind"
              name: "name"
              namespace: "namespace"
              health:
                message: "message"
                status: "status"
              requiresPruning: true
              version: "version"
              group: "group"
              status: "status"
            - hook: true
              kind: "kind"
              name: "name"
              namespace: "namespace"
              health:
                message: "message"
                status: "status"
              requiresPruning: true
              version: "version"
              group: "group"
              status: "status"
            history:
            - deployStartedAt:
                seconds: "seconds"
                nanos: 0
              id: "id"
              source:
                repoURL: "repoURL"
                ksonnet:
                  environment: "environment"
                  parameters:
                  - component: "component"
                    name: "name"
                    value: "value"
                  - component: "component"
                    name: "name"
                    value: "value"
                path: "path"
                targetRevision: "targetRevision"
                plugin:
                  name: "name"
                  env:
                  - name: "name"
                    value: "value"
                  - name: "name"
                    value: "value"
                kustomize:
                  commonLabels:
                    key: "commonLabels"
                  images:
                  - "images"
                  - "images"
                  namePrefix: "namePrefix"
                  forceCommonAnnotations: true
                  nameSuffix: "nameSuffix"
                  forceCommonLabels: true
                  version: "version"
                  commonAnnotations:
                    key: "commonAnnotations"
                chart: "chart"
                directory:
                  include: "include"
                  jsonnet:
                    extVars:
                    - code: true
                      name: "name"
                      value: "value"
                    - code: true
                      name: "name"
                      value: "value"
                    libs:
                    - "libs"
                    - "libs"
                    tlas:
                    - code: true
                      name: "name"
                      value: "value"
                    - code: true
                      name: "name"
                      value: "value"
                  recurse: true
                  exclude: "exclude"
                helm:
                  valueFiles:
                  - "valueFiles"
                  - "valueFiles"
                  releaseName: "releaseName"
                  fileParameters:
                  - path: "path"
                    name: "name"
                  - path: "path"
                    name: "name"
                  values: "values"
                  passCredentials: true
                  parameters:
                  - forceString: true
                    name: "name"
                    value: "value"
                  - forceString: true
                    name: "name"
                    value: "value"
                  version: "version"
              deployedAt:
                seconds: "seconds"
                nanos: 0
              revision: "revision"
            - deployStartedAt:
                seconds: "seconds"
                nanos: 0
              id: "id"
              source:
                repoURL: "repoURL"
                ksonnet:
                  environment: "environment"
                  parameters:
                  - component: "component"
                    name: "name"
                    value: "value"
                  - component: "component"
                    name: "name"
                    value: "value"
                path: "path"
                targetRevision: "targetRevision"
                plugin:
                  name: "name"
                  env:
                  - name: "name"
                    value: "value"
                  - name: "name"
                    value: "value"
                kustomize:
                  commonLabels:
                    key: "commonLabels"
                  images:
                  - "images"
                  - "images"
                  namePrefix: "namePrefix"
                  forceCommonAnnotations: true
                  nameSuffix: "nameSuffix"
                  forceCommonLabels: true
                  version: "version"
                  commonAnnotations:
                    key: "commonAnnotations"
                chart: "chart"
                directory:
                  include: "include"
                  jsonnet:
                    extVars:
                    - code: true
                      name: "name"
                      value: "value"
                    - code: true
                      name: "name"
                      value: "value"
                    libs:
                    - "libs"
                    - "libs"
                    tlas:
                    - code: true
                      name: "name"
                      value: "value"
                    - code: true
                      name: "name"
                      value: "value"
                  recurse: true
                  exclude: "exclude"
                helm:
                  valueFiles:
                  - "valueFiles"
                  - "valueFiles"
                  releaseName: "releaseName"
                  fileParameters:
                  - path: "path"
                    name: "name"
                  - path: "path"
                    name: "name"
                  values: "values"
                  passCredentials: true
                  parameters:
                  - forceString: true
                    name: "name"
                    value: "value"
                  - forceString: true
                    name: "name"
                    value: "value"
                  version: "version"
              deployedAt:
                seconds: "seconds"
                nanos: 0
              revision: "revision"
            conditions:
            - lastTransitionTime:
                seconds: "seconds"
                nanos: 0
              message: "message"
              type: "type"
            - lastTransitionTime:
                seconds: "seconds"
                nanos: 0
              message: "message"
              type: "type"
            sync:
              comparedTo:
                destination:
                  server: "server"
                  name: "name"
                  namespace: "namespace"
                source:
                  repoURL: "repoURL"
                  ksonnet:
                    environment: "environment"
                    parameters:
                    - component: "component"
                      name: "name"
                      value: "value"
                    - component: "component"
                      name: "name"
                      value: "value"
                  path: "path"
                  targetRevision: "targetRevision"
                  plugin:
                    name: "name"
                    env:
                    - name: "name"
                      value: "value"
                    - name: "name"
                      value: "value"
                  kustomize:
                    commonLabels:
                      key: "commonLabels"
                    images:
                    - "images"
                    - "images"
                    namePrefix: "namePrefix"
                    forceCommonAnnotations: true
                    nameSuffix: "nameSuffix"
                    forceCommonLabels: true
                    version: "version"
                    commonAnnotations:
                      key: "commonAnnotations"
                  chart: "chart"
                  directory:
                    include: "include"
                    jsonnet:
                      extVars:
                      - code: true
                        name: "name"
                        value: "value"
                      - code: true
                        name: "name"
                        value: "value"
                      libs:
                      - "libs"
                      - "libs"
                      tlas:
                      - code: true
                        name: "name"
                        value: "value"
                      - code: true
                        name: "name"
                        value: "value"
                    recurse: true
                    exclude: "exclude"
                  helm:
                    valueFiles:
                    - "valueFiles"
                    - "valueFiles"
                    releaseName: "releaseName"
                    fileParameters:
                    - path: "path"
                      name: "name"
                    - path: "path"
                      name: "name"
                    values: "values"
                    passCredentials: true
                    parameters:
                    - forceString: true
                      name: "name"
                      value: "value"
                    - forceString: true
                      name: "name"
                      value: "value"
                    version: "version"
              revision: "revision"
              status: "status"
        type: "type"
      error:
        http_code: 6
        details:
        - value: "value"
          type_url: "type_url"
        - value: "value"
          type_url: "type_url"
        http_status: "http_status"
        message: "message"
        grpc_code: 0
  Stream result of v1alpha1ApplicationTree:
    type: "object"
    properties:
      error:
        $ref: "#/definitions/runtimeStreamError"
      result:
        $ref: "#/definitions/v1alpha1ApplicationTree"
    example:
      result:
        orphanedNodes:
        - resourceRef:
            uid: "uid"
            kind: "kind"
            name: "name"
            namespace: "namespace"
            version: "version"
            group: "group"
          createdAt:
            seconds: "seconds"
            nanos: 0
          images:
          - "images"
          - "images"
          parentRefs:
          - uid: "uid"
            kind: "kind"
            name: "name"
            namespace: "namespace"
            version: "version"
            group: "group"
          - uid: "uid"
            kind: "kind"
            name: "name"
            namespace: "namespace"
            version: "version"
            group: "group"
          resourceVersion: "resourceVersion"
          health:
            message: "message"
            status: "status"
          info:
          - name: "name"
            value: "value"
          - name: "name"
            value: "value"
          networkingInfo:
            ingress:
            - hostname: "hostname"
              ip: "ip"
              ports:
              - protocol: "protocol"
                port: 0
                error: "error"
              - protocol: "protocol"
                port: 0
                error: "error"
            - hostname: "hostname"
              ip: "ip"
              ports:
              - protocol: "protocol"
                port: 0
                error: "error"
              - protocol: "protocol"
                port: 0
                error: "error"
            targetRefs:
            - uid: "uid"
              kind: "kind"
              name: "name"
              namespace: "namespace"
              version: "version"
              group: "group"
            - uid: "uid"
              kind: "kind"
              name: "name"
              namespace: "namespace"
              version: "version"
              group: "group"
            targetLabels:
              key: "targetLabels"
            externalURLs:
            - "externalURLs"
            - "externalURLs"
            labels:
              key: "labels"
        - resourceRef:
            uid: "uid"
            kind: "kind"
            name: "name"
            namespace: "namespace"
            version: "version"
            group: "group"
          createdAt:
            seconds: "seconds"
            nanos: 0
          images:
          - "images"
          - "images"
          parentRefs:
          - uid: "uid"
            kind: "kind"
            name: "name"
            namespace: "namespace"
            version: "version"
            group: "group"
          - uid: "uid"
            kind: "kind"
            name: "name"
            namespace: "namespace"
            version: "version"
            group: "group"
          resourceVersion: "resourceVersion"
          health:
            message: "message"
            status: "status"
          info:
          - name: "name"
            value: "value"
          - name: "name"
            value: "value"
          networkingInfo:
            ingress:
            - hostname: "hostname"
              ip: "ip"
              ports:
              - protocol: "protocol"
                port: 0
                error: "error"
              - protocol: "protocol"
                port: 0
                error: "error"
            - hostname: "hostname"
              ip: "ip"
              ports:
              - protocol: "protocol"
                port: 0
                error: "error"
              - protocol: "protocol"
                port: 0
                error: "error"
            targetRefs:
            - uid: "uid"
              kind: "kind"
              name: "name"
              namespace: "namespace"
              version: "version"
              group: "group"
            - uid: "uid"
              kind: "kind"
              name: "name"
              namespace: "namespace"
              version: "version"
              group: "group"
            targetLabels:
              key: "targetLabels"
            externalURLs:
            - "externalURLs"
            - "externalURLs"
            labels:
              key: "labels"
        nodes:
        - resourceRef:
            uid: "uid"
            kind: "kind"
            name: "name"
            namespace: "namespace"
            version: "version"
            group: "group"
          createdAt:
            seconds: "seconds"
            nanos: 0
          images:
          - "images"
          - "images"
          parentRefs:
          - uid: "uid"
            kind: "kind"
            name: "name"
            namespace: "namespace"
            version: "version"
            group: "group"
          - uid: "uid"
            kind: "kind"
            name: "name"
            namespace: "namespace"
            version: "version"
            group: "group"
          resourceVersion: "resourceVersion"
          health:
            message: "message"
            status: "status"
          info:
          - name: "name"
            value: "value"
          - name: "name"
            value: "value"
          networkingInfo:
            ingress:
            - hostname: "hostname"
              ip: "ip"
              ports:
              - protocol: "protocol"
                port: 0
                error: "error"
              - protocol: "protocol"
                port: 0
                error: "error"
            - hostname: "hostname"
              ip: "ip"
              ports:
              - protocol: "protocol"
                port: 0
                error: "error"
              - protocol: "protocol"
                port: 0
                error: "error"
            targetRefs:
            - uid: "uid"
              kind: "kind"
              name: "name"
              namespace: "namespace"
              version: "version"
              group: "group"
            - uid: "uid"
              kind: "kind"
              name: "name"
              namespace: "namespace"
              version: "version"
              group: "group"
            targetLabels:
              key: "targetLabels"
            externalURLs:
            - "externalURLs"
            - "externalURLs"
            labels:
              key: "labels"
        - resourceRef:
            uid: "uid"
            kind: "kind"
            name: "name"
            namespace: "namespace"
            version: "version"
            group: "group"
          createdAt:
            seconds: "seconds"
            nanos: 0
          images:
          - "images"
          - "images"
          parentRefs:
          - uid: "uid"
            kind: "kind"
            name: "name"
            namespace: "namespace"
            version: "version"
            group: "group"
          - uid: "uid"
            kind: "kind"
            name: "name"
            namespace: "namespace"
            version: "version"
            group: "group"
          resourceVersion: "resourceVersion"
          health:
            message: "message"
            status: "status"
          info:
          - name: "name"
            value: "value"
          - name: "name"
            value: "value"
          networkingInfo:
            ingress:
            - hostname: "hostname"
              ip: "ip"
              ports:
              - protocol: "protocol"
                port: 0
                error: "error"
              - protocol: "protocol"
                port: 0
                error: "error"
            - hostname: "hostname"
              ip: "ip"
              ports:
              - protocol: "protocol"
                port: 0
                error: "error"
              - protocol: "protocol"
                port: 0
                error: "error"
            targetRefs:
            - uid: "uid"
              kind: "kind"
              name: "name"
              namespace: "namespace"
              version: "version"
              group: "group"
            - uid: "uid"
              kind: "kind"
              name: "name"
              namespace: "namespace"
              version: "version"
              group: "group"
            targetLabels:
              key: "targetLabels"
            externalURLs:
            - "externalURLs"
            - "externalURLs"
            labels:
              key: "labels"
        hosts:
        - systemInfo:
            machineID: "machineID"
            bootID: "bootID"
            containerRuntimeVersion: "containerRuntimeVersion"
            kernelVersion: "kernelVersion"
            kubeletVersion: "kubeletVersion"
            systemUUID: "systemUUID"
            kubeProxyVersion: "kubeProxyVersion"
            operatingSystem: "operatingSystem"
            architecture: "architecture"
            osImage: "osImage"
          name: "name"
          resourcesInfo:
          - requestedByApp: "requestedByApp"
            requestedByNeighbors: "requestedByNeighbors"
            resourceName: "resourceName"
            capacity: "capacity"
          - requestedByApp: "requestedByApp"
            requestedByNeighbors: "requestedByNeighbors"
            resourceName: "resourceName"
            capacity: "capacity"
        - systemInfo:
            machineID: "machineID"
            bootID: "bootID"
            containerRuntimeVersion: "containerRuntimeVersion"
            kernelVersion: "kernelVersion"
            kubeletVersion: "kubeletVersion"
            systemUUID: "systemUUID"
            kubeProxyVersion: "kubeProxyVersion"
            operatingSystem: "operatingSystem"
            architecture: "architecture"
            osImage: "osImage"
          name: "name"
          resourcesInfo:
          - requestedByApp: "requestedByApp"
            requestedByNeighbors: "requestedByNeighbors"
            resourceName: "resourceName"
            capacity: "capacity"
          - requestedByApp: "requestedByApp"
            requestedByNeighbors: "requestedByNeighbors"
            resourceName: "resourceName"
            capacity: "capacity"
      error:
        http_code: 6
        details:
        - value: "value"
          type_url: "type_url"
        - value: "value"
          type_url: "type_url"
        http_status: "http_status"
        message: "message"
        grpc_code: 0
